
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b18  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08007cb8  08007cb8  00017cb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080dc  080080dc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080080dc  080080dc  000180dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080e4  080080e4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080e4  080080e4  000180e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080e8  080080e8  000180e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080080ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  200001e0  080082cc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  080082cc  00020358  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f0b1  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002041  00000000  00000000  0002f2c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df8  00000000  00000000  00031308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d30  00000000  00000000  00032100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001845e  00000000  00000000  00032e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb49  00000000  00000000  0004b28e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b4c4  00000000  00000000  0005add7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f629b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d08  00000000  00000000  000f62ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007ca0 	.word	0x08007ca0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08007ca0 	.word	0x08007ca0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <microDelay>:
uint8_t RH = 0;

char Rx_data[] = "0";
char CLR[] = "";

void microDelay(uint16_t delay) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <microDelay+0x38>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2200      	movs	r2, #0
 8000fac:	625a      	str	r2, [r3, #36]	; 0x24
	int counter = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
	while (counter < delay) {
 8000fb2:	e003      	b.n	8000fbc <microDelay+0x20>
		counter = __HAL_TIM_GET_COUNTER(&htim1);
 8000fb4:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <microDelay+0x38>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fba:	60fb      	str	r3, [r7, #12]
	while (counter < delay) {
 8000fbc:	88fb      	ldrh	r3, [r7, #6]
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	dbf7      	blt.n	8000fb4 <microDelay+0x18>
	}
}
 8000fc4:	bf00      	nop
 8000fc6:	bf00      	nop
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	20000244 	.word	0x20000244

08000fd8 <milliDelay>:

void milliDelay(uint16_t delay) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < delay; i++) {
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	e006      	b.n	8000ff6 <milliDelay+0x1e>
		microDelay(1000);
 8000fe8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fec:	f7ff ffd6 	bl	8000f9c <microDelay>
	for (int i = 0; i < delay; i++) {
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	88fb      	ldrh	r3, [r7, #6]
 8000ff8:	68fa      	ldr	r2, [r7, #12]
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	dbf4      	blt.n	8000fe8 <milliDelay+0x10>
	}
}
 8000ffe:	bf00      	nop
 8001000:	bf00      	nop
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <SET_ADC_READING_SOIL>:

void SET_ADC_READING_SOIL() {
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800100e:	463b      	mov	r3, r7
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_0;
 800101a:	2300      	movs	r3, #0
 800101c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800101e:	2301      	movs	r3, #1
 8001020:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001022:	2300      	movs	r3, #0
 8001024:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001026:	463b      	mov	r3, r7
 8001028:	4619      	mov	r1, r3
 800102a:	4806      	ldr	r0, [pc, #24]	; (8001044 <SET_ADC_READING_SOIL+0x3c>)
 800102c:	f001 f976 	bl	800231c <HAL_ADC_ConfigChannel>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <SET_ADC_READING_SOIL+0x32>
		Error_Handler();
 8001036:	f000 fcc9 	bl	80019cc <Error_Handler>
	}
}
 800103a:	bf00      	nop
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200001fc 	.word	0x200001fc

08001048 <SET_ADC_READING_LIGHT>:

void SET_ADC_READING_LIGHT() {
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800104e:	463b      	mov	r3, r7
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_1;
 800105a:	2301      	movs	r3, #1
 800105c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800105e:	2301      	movs	r3, #1
 8001060:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001062:	2300      	movs	r3, #0
 8001064:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001066:	463b      	mov	r3, r7
 8001068:	4619      	mov	r1, r3
 800106a:	4806      	ldr	r0, [pc, #24]	; (8001084 <SET_ADC_READING_LIGHT+0x3c>)
 800106c:	f001 f956 	bl	800231c <HAL_ADC_ConfigChannel>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <SET_ADC_READING_LIGHT+0x32>
		Error_Handler();
 8001076:	f000 fca9 	bl	80019cc <Error_Handler>
	}
}
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	200001fc 	.word	0x200001fc

08001088 <DHT11_Start>:

uint8_t DHT11_Start(void) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	75fb      	strb	r3, [r7, #23]
	GPIO_InitTypeDef GPIO_InitStructPrivate = { 0 };
 8001092:	463b      	mov	r3, r7
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
	GPIO_InitStructPrivate.Pin = DHT11_PIN;
 80010a0:	2320      	movs	r3, #32
 80010a2:	603b      	str	r3, [r7, #0]
	GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 80010a4:	2301      	movs	r3, #1
 80010a6:	607b      	str	r3, [r7, #4]
	GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 80010b0:	463b      	mov	r3, r7
 80010b2:	4619      	mov	r1, r3
 80010b4:	482a      	ldr	r0, [pc, #168]	; (8001160 <DHT11_Start+0xd8>)
 80010b6:	f001 fd03 	bl	8002ac0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 80010ba:	2200      	movs	r2, #0
 80010bc:	2120      	movs	r1, #32
 80010be:	4828      	ldr	r0, [pc, #160]	; (8001160 <DHT11_Start+0xd8>)
 80010c0:	f001 fe9a 	bl	8002df8 <HAL_GPIO_WritePin>
	HAL_Delay(20);   // wait for 20ms
 80010c4:	2014      	movs	r0, #20
 80010c6:	f000 ff41 	bl	8001f4c <HAL_Delay>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 80010ca:	2201      	movs	r2, #1
 80010cc:	2120      	movs	r1, #32
 80010ce:	4824      	ldr	r0, [pc, #144]	; (8001160 <DHT11_Start+0xd8>)
 80010d0:	f001 fe92 	bl	8002df8 <HAL_GPIO_WritePin>

	microDelay(30);   // wait for 30us
 80010d4:	201e      	movs	r0, #30
 80010d6:	f7ff ff61 	bl	8000f9c <microDelay>

	GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
	GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 80010de:	2301      	movs	r3, #1
 80010e0:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 80010e2:	463b      	mov	r3, r7
 80010e4:	4619      	mov	r1, r3
 80010e6:	481e      	ldr	r0, [pc, #120]	; (8001160 <DHT11_Start+0xd8>)
 80010e8:	f001 fcea 	bl	8002ac0 <HAL_GPIO_Init>
	microDelay(40);
 80010ec:	2028      	movs	r0, #40	; 0x28
 80010ee:	f7ff ff55 	bl	8000f9c <microDelay>
	if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))) {
 80010f2:	2120      	movs	r1, #32
 80010f4:	481a      	ldr	r0, [pc, #104]	; (8001160 <DHT11_Start+0xd8>)
 80010f6:	f001 fe67 	bl	8002dc8 <HAL_GPIO_ReadPin>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d10b      	bne.n	8001118 <DHT11_Start+0x90>
		microDelay(80);
 8001100:	2050      	movs	r0, #80	; 0x50
 8001102:	f7ff ff4b 	bl	8000f9c <microDelay>
		if ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 8001106:	2120      	movs	r1, #32
 8001108:	4815      	ldr	r0, [pc, #84]	; (8001160 <DHT11_Start+0xd8>)
 800110a:	f001 fe5d 	bl	8002dc8 <HAL_GPIO_ReadPin>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <DHT11_Start+0x90>
			Response = 1;
 8001114:	2301      	movs	r3, #1
 8001116:	75fb      	strb	r3, [r7, #23]
	}
	pMillis = HAL_GetTick();
 8001118:	f000 ff0c 	bl	8001f34 <HAL_GetTick>
 800111c:	4603      	mov	r3, r0
 800111e:	4a11      	ldr	r2, [pc, #68]	; (8001164 <DHT11_Start+0xdc>)
 8001120:	6013      	str	r3, [r2, #0]
	cMillis = HAL_GetTick();
 8001122:	f000 ff07 	bl	8001f34 <HAL_GetTick>
 8001126:	4603      	mov	r3, r0
 8001128:	4a0f      	ldr	r2, [pc, #60]	; (8001168 <DHT11_Start+0xe0>)
 800112a:	6013      	str	r3, [r2, #0]
	while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis) {
 800112c:	e004      	b.n	8001138 <DHT11_Start+0xb0>
		cMillis = HAL_GetTick();
 800112e:	f000 ff01 	bl	8001f34 <HAL_GetTick>
 8001132:	4603      	mov	r3, r0
 8001134:	4a0c      	ldr	r2, [pc, #48]	; (8001168 <DHT11_Start+0xe0>)
 8001136:	6013      	str	r3, [r2, #0]
	while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis) {
 8001138:	2120      	movs	r1, #32
 800113a:	4809      	ldr	r0, [pc, #36]	; (8001160 <DHT11_Start+0xd8>)
 800113c:	f001 fe44 	bl	8002dc8 <HAL_GPIO_ReadPin>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d006      	beq.n	8001154 <DHT11_Start+0xcc>
 8001146:	4b07      	ldr	r3, [pc, #28]	; (8001164 <DHT11_Start+0xdc>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	1c9a      	adds	r2, r3, #2
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <DHT11_Start+0xe0>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	429a      	cmp	r2, r3
 8001152:	d8ec      	bhi.n	800112e <DHT11_Start+0xa6>
	}
	return Response;
 8001154:	7dfb      	ldrb	r3, [r7, #23]
}
 8001156:	4618      	mov	r0, r3
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40020400 	.word	0x40020400
 8001164:	2000032c 	.word	0x2000032c
 8001168:	20000330 	.word	0x20000330

0800116c <DHT11_Read>:

uint8_t DHT11_Read(void) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
	uint8_t a, b;
	for (a = 0; a < 8; a++) {
 8001172:	2300      	movs	r3, #0
 8001174:	71fb      	strb	r3, [r7, #7]
 8001176:	e063      	b.n	8001240 <DHT11_Read+0xd4>
		pMillis = HAL_GetTick();
 8001178:	f000 fedc 	bl	8001f34 <HAL_GetTick>
 800117c:	4603      	mov	r3, r0
 800117e:	4a34      	ldr	r2, [pc, #208]	; (8001250 <DHT11_Read+0xe4>)
 8001180:	6013      	str	r3, [r2, #0]
		cMillis = HAL_GetTick();
 8001182:	f000 fed7 	bl	8001f34 <HAL_GetTick>
 8001186:	4603      	mov	r3, r0
 8001188:	4a32      	ldr	r2, [pc, #200]	; (8001254 <DHT11_Read+0xe8>)
 800118a:	6013      	str	r3, [r2, #0]
		while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 800118c:	e004      	b.n	8001198 <DHT11_Read+0x2c>
				&& pMillis + 2 > cMillis) {  // wait for the pin to go high
			cMillis = HAL_GetTick();
 800118e:	f000 fed1 	bl	8001f34 <HAL_GetTick>
 8001192:	4603      	mov	r3, r0
 8001194:	4a2f      	ldr	r2, [pc, #188]	; (8001254 <DHT11_Read+0xe8>)
 8001196:	6013      	str	r3, [r2, #0]
		while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 8001198:	2120      	movs	r1, #32
 800119a:	482f      	ldr	r0, [pc, #188]	; (8001258 <DHT11_Read+0xec>)
 800119c:	f001 fe14 	bl	8002dc8 <HAL_GPIO_ReadPin>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d106      	bne.n	80011b4 <DHT11_Read+0x48>
				&& pMillis + 2 > cMillis) {  // wait for the pin to go high
 80011a6:	4b2a      	ldr	r3, [pc, #168]	; (8001250 <DHT11_Read+0xe4>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	1c9a      	adds	r2, r3, #2
 80011ac:	4b29      	ldr	r3, [pc, #164]	; (8001254 <DHT11_Read+0xe8>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d8ec      	bhi.n	800118e <DHT11_Read+0x22>
		}
		microDelay(40);   // wait for 40 us
 80011b4:	2028      	movs	r0, #40	; 0x28
 80011b6:	f7ff fef1 	bl	8000f9c <microDelay>
		if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))   // if the pin is low
 80011ba:	2120      	movs	r1, #32
 80011bc:	4826      	ldr	r0, [pc, #152]	; (8001258 <DHT11_Read+0xec>)
 80011be:	f001 fe03 	bl	8002dc8 <HAL_GPIO_ReadPin>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d10e      	bne.n	80011e6 <DHT11_Read+0x7a>
			b &= ~(1 << (7 - a));
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	f1c3 0307 	rsb	r3, r3, #7
 80011ce:	2201      	movs	r2, #1
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	b25b      	sxtb	r3, r3
 80011d6:	43db      	mvns	r3, r3
 80011d8:	b25a      	sxtb	r2, r3
 80011da:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80011de:	4013      	ands	r3, r2
 80011e0:	b25b      	sxtb	r3, r3
 80011e2:	71bb      	strb	r3, [r7, #6]
 80011e4:	e00b      	b.n	80011fe <DHT11_Read+0x92>
		else
			b |= (1 << (7 - a));
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	f1c3 0307 	rsb	r3, r3, #7
 80011ec:	2201      	movs	r2, #1
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	b25a      	sxtb	r2, r3
 80011f4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	b25b      	sxtb	r3, r3
 80011fc:	71bb      	strb	r3, [r7, #6]
		pMillis = HAL_GetTick();
 80011fe:	f000 fe99 	bl	8001f34 <HAL_GetTick>
 8001202:	4603      	mov	r3, r0
 8001204:	4a12      	ldr	r2, [pc, #72]	; (8001250 <DHT11_Read+0xe4>)
 8001206:	6013      	str	r3, [r2, #0]
		cMillis = HAL_GetTick();
 8001208:	f000 fe94 	bl	8001f34 <HAL_GetTick>
 800120c:	4603      	mov	r3, r0
 800120e:	4a11      	ldr	r2, [pc, #68]	; (8001254 <DHT11_Read+0xe8>)
 8001210:	6013      	str	r3, [r2, #0]
		while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 8001212:	e004      	b.n	800121e <DHT11_Read+0xb2>
				&& pMillis + 2 > cMillis) {  // wait for the pin to go low
			cMillis = HAL_GetTick();
 8001214:	f000 fe8e 	bl	8001f34 <HAL_GetTick>
 8001218:	4603      	mov	r3, r0
 800121a:	4a0e      	ldr	r2, [pc, #56]	; (8001254 <DHT11_Read+0xe8>)
 800121c:	6013      	str	r3, [r2, #0]
		while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 800121e:	2120      	movs	r1, #32
 8001220:	480d      	ldr	r0, [pc, #52]	; (8001258 <DHT11_Read+0xec>)
 8001222:	f001 fdd1 	bl	8002dc8 <HAL_GPIO_ReadPin>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d006      	beq.n	800123a <DHT11_Read+0xce>
				&& pMillis + 2 > cMillis) {  // wait for the pin to go low
 800122c:	4b08      	ldr	r3, [pc, #32]	; (8001250 <DHT11_Read+0xe4>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	1c9a      	adds	r2, r3, #2
 8001232:	4b08      	ldr	r3, [pc, #32]	; (8001254 <DHT11_Read+0xe8>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	429a      	cmp	r2, r3
 8001238:	d8ec      	bhi.n	8001214 <DHT11_Read+0xa8>
	for (a = 0; a < 8; a++) {
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	3301      	adds	r3, #1
 800123e:	71fb      	strb	r3, [r7, #7]
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	2b07      	cmp	r3, #7
 8001244:	d998      	bls.n	8001178 <DHT11_Read+0xc>
		}
	}
	return b;
 8001246:	79bb      	ldrb	r3, [r7, #6]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	2000032c 	.word	0x2000032c
 8001254:	20000330 	.word	0x20000330
 8001258:	40020400 	.word	0x40020400
 800125c:	00000000 	.word	0x00000000

08001260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001264:	f000 fe00 	bl	8001e68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001268:	f000 f948 	bl	80014fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800126c:	f000 fa96 	bl	800179c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001270:	f000 fa6a 	bl	8001748 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001274:	f000 f9ac 	bl	80015d0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001278:	f000 f9ec 	bl	8001654 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800127c:	f000 fa3a 	bl	80016f4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 8001280:	4889      	ldr	r0, [pc, #548]	; (80014a8 <main+0x248>)
 8001282:	f002 fad5 	bl	8003830 <HAL_TIM_Base_Start>
	HAL_UART_Receive_IT(&huart1, Rx_data, 1);
 8001286:	2201      	movs	r2, #1
 8001288:	4988      	ldr	r1, [pc, #544]	; (80014ac <main+0x24c>)
 800128a:	4889      	ldr	r0, [pc, #548]	; (80014b0 <main+0x250>)
 800128c:	f002 fe59 	bl	8003f42 <HAL_UART_Receive_IT>

    /* USER CODE BEGIN 3 */


		// Reading Soil Moisture
		SET_ADC_READING_SOIL();
 8001290:	f7ff feba 	bl	8001008 <SET_ADC_READING_SOIL>
		HAL_ADC_Start(&hadc1);
 8001294:	4887      	ldr	r0, [pc, #540]	; (80014b4 <main+0x254>)
 8001296:	f000 fec1 	bl	800201c <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK) {
 800129a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800129e:	4885      	ldr	r0, [pc, #532]	; (80014b4 <main+0x254>)
 80012a0:	f000 ffa3 	bl	80021ea <HAL_ADC_PollForConversion>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d135      	bne.n	8001316 <main+0xb6>
			RAW_SOIL_ADC = HAL_ADC_GetValue(&hadc1);
 80012aa:	4882      	ldr	r0, [pc, #520]	; (80014b4 <main+0x254>)
 80012ac:	f001 f828 	bl	8002300 <HAL_ADC_GetValue>
 80012b0:	4603      	mov	r3, r0
 80012b2:	461a      	mov	r2, r3
 80012b4:	4b80      	ldr	r3, [pc, #512]	; (80014b8 <main+0x258>)
 80012b6:	601a      	str	r2, [r3, #0]
			SOIL_HUMID = (float)(-0.0503 * RAW_SOIL_ADC) + 205.98;
 80012b8:	4b7f      	ldr	r3, [pc, #508]	; (80014b8 <main+0x258>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f939 	bl	8000534 <__aeabi_i2d>
 80012c2:	a373      	add	r3, pc, #460	; (adr r3, 8001490 <main+0x230>)
 80012c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c8:	f7ff f99e 	bl	8000608 <__aeabi_dmul>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4610      	mov	r0, r2
 80012d2:	4619      	mov	r1, r3
 80012d4:	f7ff fc90 	bl	8000bf8 <__aeabi_d2f>
 80012d8:	4603      	mov	r3, r0
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff f93c 	bl	8000558 <__aeabi_f2d>
 80012e0:	a36d      	add	r3, pc, #436	; (adr r3, 8001498 <main+0x238>)
 80012e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e6:	f7fe ffd9 	bl	800029c <__adddf3>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	4610      	mov	r0, r2
 80012f0:	4619      	mov	r1, r3
 80012f2:	f7ff fc81 	bl	8000bf8 <__aeabi_d2f>
 80012f6:	4603      	mov	r3, r0
 80012f8:	4a70      	ldr	r2, [pc, #448]	; (80014bc <main+0x25c>)
 80012fa:	6013      	str	r3, [r2, #0]

			if (SOIL_HUMID > 100) {
 80012fc:	4b6f      	ldr	r3, [pc, #444]	; (80014bc <main+0x25c>)
 80012fe:	edd3 7a00 	vldr	s15, [r3]
 8001302:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80014c0 <main+0x260>
 8001306:	eef4 7ac7 	vcmpe.f32	s15, s14
 800130a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130e:	dd02      	ble.n	8001316 <main+0xb6>
				SOIL_HUMID = 100.0;
 8001310:	4b6a      	ldr	r3, [pc, #424]	; (80014bc <main+0x25c>)
 8001312:	4a6c      	ldr	r2, [pc, #432]	; (80014c4 <main+0x264>)
 8001314:	601a      	str	r2, [r3, #0]
			}
		}
		HAL_ADC_Stop(&hadc1);
 8001316:	4867      	ldr	r0, [pc, #412]	; (80014b4 <main+0x254>)
 8001318:	f000 ff34 	bl	8002184 <HAL_ADC_Stop>

		// Reading LDR
		SET_ADC_READING_LIGHT();
 800131c:	f7ff fe94 	bl	8001048 <SET_ADC_READING_LIGHT>
		HAL_ADC_Start(&hadc1);
 8001320:	4864      	ldr	r0, [pc, #400]	; (80014b4 <main+0x254>)
 8001322:	f000 fe7b 	bl	800201c <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK) {
 8001326:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800132a:	4862      	ldr	r0, [pc, #392]	; (80014b4 <main+0x254>)
 800132c:	f000 ff5d 	bl	80021ea <HAL_ADC_PollForConversion>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d12d      	bne.n	8001392 <main+0x132>
//			int ldrRawData = HAL_ADC_GetValue(&hadc1);
//			float resistorVoltage = (float)ldrRawData / MAX_ADC_READING * ADC_REF_VOLTAGE;
//			float ldrVoltage = ADC_REF_VOLTAGE - resistorVoltage;
//			float ldrResistance = ldrVoltage/resistorVoltage * REF_RESISTANCE;
//			ldrLux = LUX_CALC_SCALAR * pow(ldrResistance, LUX_CALC_EXPONENT);
			RAW_LDR_ADC = HAL_ADC_GetValue(&hadc1);
 8001336:	485f      	ldr	r0, [pc, #380]	; (80014b4 <main+0x254>)
 8001338:	f000 ffe2 	bl	8002300 <HAL_ADC_GetValue>
 800133c:	4603      	mov	r3, r0
 800133e:	461a      	mov	r2, r3
 8001340:	4b61      	ldr	r3, [pc, #388]	; (80014c8 <main+0x268>)
 8001342:	601a      	str	r2, [r3, #0]
			LIGHT = (float)(406535.0 / RAW_LDR_ADC) - 308.5;
 8001344:	4b60      	ldr	r3, [pc, #384]	; (80014c8 <main+0x268>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff f8f3 	bl	8000534 <__aeabi_i2d>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	a153      	add	r1, pc, #332	; (adr r1, 80014a0 <main+0x240>)
 8001354:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001358:	f7ff fa80 	bl	800085c <__aeabi_ddiv>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4610      	mov	r0, r2
 8001362:	4619      	mov	r1, r3
 8001364:	f7ff fc48 	bl	8000bf8 <__aeabi_d2f>
 8001368:	ee07 0a10 	vmov	s14, r0
 800136c:	eddf 7a57 	vldr	s15, [pc, #348]	; 80014cc <main+0x26c>
 8001370:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001374:	4b56      	ldr	r3, [pc, #344]	; (80014d0 <main+0x270>)
 8001376:	edc3 7a00 	vstr	s15, [r3]
			if (LIGHT < 0.0) {
 800137a:	4b55      	ldr	r3, [pc, #340]	; (80014d0 <main+0x270>)
 800137c:	edd3 7a00 	vldr	s15, [r3]
 8001380:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001388:	d503      	bpl.n	8001392 <main+0x132>
				LIGHT = 0.0;
 800138a:	4b51      	ldr	r3, [pc, #324]	; (80014d0 <main+0x270>)
 800138c:	f04f 0200 	mov.w	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
			}
		}
		HAL_ADC_Stop(&hadc1);
 8001392:	4848      	ldr	r0, [pc, #288]	; (80014b4 <main+0x254>)
 8001394:	f000 fef6 	bl	8002184 <HAL_ADC_Stop>

		if (DHT11_Start() || 1) {
 8001398:	f7ff fe76 	bl	8001088 <DHT11_Start>
			RHI = DHT11_Read(); // Relative humidity integral
 800139c:	f7ff fee6 	bl	800116c <DHT11_Read>
 80013a0:	4603      	mov	r3, r0
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b4b      	ldr	r3, [pc, #300]	; (80014d4 <main+0x274>)
 80013a6:	701a      	strb	r2, [r3, #0]
			RHD = DHT11_Read(); // Relative humidity decimal
 80013a8:	f7ff fee0 	bl	800116c <DHT11_Read>
 80013ac:	4603      	mov	r3, r0
 80013ae:	461a      	mov	r2, r3
 80013b0:	4b49      	ldr	r3, [pc, #292]	; (80014d8 <main+0x278>)
 80013b2:	701a      	strb	r2, [r3, #0]
			TCI = DHT11_Read(); // Celsius integral
 80013b4:	f7ff feda 	bl	800116c <DHT11_Read>
 80013b8:	4603      	mov	r3, r0
 80013ba:	461a      	mov	r2, r3
 80013bc:	4b47      	ldr	r3, [pc, #284]	; (80014dc <main+0x27c>)
 80013be:	701a      	strb	r2, [r3, #0]
			TCD = DHT11_Read(); // Celsius decimal
 80013c0:	f7ff fed4 	bl	800116c <DHT11_Read>
 80013c4:	4603      	mov	r3, r0
 80013c6:	461a      	mov	r2, r3
 80013c8:	4b45      	ldr	r3, [pc, #276]	; (80014e0 <main+0x280>)
 80013ca:	701a      	strb	r2, [r3, #0]
			SUM = DHT11_Read(); // Check sum
 80013cc:	f7ff fece 	bl	800116c <DHT11_Read>
 80013d0:	4603      	mov	r3, r0
 80013d2:	461a      	mov	r2, r3
 80013d4:	4b43      	ldr	r3, [pc, #268]	; (80014e4 <main+0x284>)
 80013d6:	701a      	strb	r2, [r3, #0]
			if (RHI + RHD + TCI + TCD == SUM) {
 80013d8:	4b3e      	ldr	r3, [pc, #248]	; (80014d4 <main+0x274>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	4b3e      	ldr	r3, [pc, #248]	; (80014d8 <main+0x278>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	4413      	add	r3, r2
 80013e4:	4a3d      	ldr	r2, [pc, #244]	; (80014dc <main+0x27c>)
 80013e6:	7812      	ldrb	r2, [r2, #0]
 80013e8:	4413      	add	r3, r2
 80013ea:	4a3d      	ldr	r2, [pc, #244]	; (80014e0 <main+0x280>)
 80013ec:	7812      	ldrb	r2, [r2, #0]
 80013ee:	4413      	add	r3, r2
 80013f0:	4a3c      	ldr	r2, [pc, #240]	; (80014e4 <main+0x284>)
 80013f2:	7812      	ldrb	r2, [r2, #0]
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d143      	bne.n	8001480 <main+0x220>
				// Can use RHI and TCI for any purposes if whole number only needed
				tCelsius = (uint8_t) TCI + (uint8_t) (TCD / 10.0);
 80013f8:	4b39      	ldr	r3, [pc, #228]	; (80014e0 <main+0x280>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff f899 	bl	8000534 <__aeabi_i2d>
 8001402:	f04f 0200 	mov.w	r2, #0
 8001406:	4b38      	ldr	r3, [pc, #224]	; (80014e8 <main+0x288>)
 8001408:	f7ff fa28 	bl	800085c <__aeabi_ddiv>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	4610      	mov	r0, r2
 8001412:	4619      	mov	r1, r3
 8001414:	f7ff fbd0 	bl	8000bb8 <__aeabi_d2uiz>
 8001418:	4603      	mov	r3, r0
 800141a:	b2da      	uxtb	r2, r3
 800141c:	4b2f      	ldr	r3, [pc, #188]	; (80014dc <main+0x27c>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	4413      	add	r3, r2
 8001422:	b2da      	uxtb	r2, r3
 8001424:	4b31      	ldr	r3, [pc, #196]	; (80014ec <main+0x28c>)
 8001426:	701a      	strb	r2, [r3, #0]
				tFahrenheit = tCelsius * 9 / 5 + 32;
 8001428:	4b30      	ldr	r3, [pc, #192]	; (80014ec <main+0x28c>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	4613      	mov	r3, r2
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	4413      	add	r3, r2
 8001434:	4a2e      	ldr	r2, [pc, #184]	; (80014f0 <main+0x290>)
 8001436:	fb82 1203 	smull	r1, r2, r2, r3
 800143a:	1052      	asrs	r2, r2, #1
 800143c:	17db      	asrs	r3, r3, #31
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	3320      	adds	r3, #32
 8001442:	ee07 3a90 	vmov	s15, r3
 8001446:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800144a:	4b2a      	ldr	r3, [pc, #168]	; (80014f4 <main+0x294>)
 800144c:	edc3 7a00 	vstr	s15, [r3]
				RH = (uint8_t) RHI + (uint8_t) (RHD / 10.0);
 8001450:	4b21      	ldr	r3, [pc, #132]	; (80014d8 <main+0x278>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff f86d 	bl	8000534 <__aeabi_i2d>
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	4b22      	ldr	r3, [pc, #136]	; (80014e8 <main+0x288>)
 8001460:	f7ff f9fc 	bl	800085c <__aeabi_ddiv>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4610      	mov	r0, r2
 800146a:	4619      	mov	r1, r3
 800146c:	f7ff fba4 	bl	8000bb8 <__aeabi_d2uiz>
 8001470:	4603      	mov	r3, r0
 8001472:	b2da      	uxtb	r2, r3
 8001474:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <main+0x274>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	4413      	add	r3, r2
 800147a:	b2da      	uxtb	r2, r3
 800147c:	4b1e      	ldr	r3, [pc, #120]	; (80014f8 <main+0x298>)
 800147e:	701a      	strb	r2, [r3, #0]
//		char out[80] = "";
//		sprintf(out, "[%u,%u,%.2f,%.2f]\n\r", tCelsius, RH, SOIL_HUMID, RAW_SOIL_ADC, LIGHT, RAW_LDR_ADC);
//
//		HAL_UART_Transmit(&huart1, out, strlen(out), 100);
//		HAL_UART_Transmit(&huart2, out, strlen(out), 100);
		HAL_Delay(1000);
 8001480:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001484:	f000 fd62 	bl	8001f4c <HAL_Delay>
		SET_ADC_READING_SOIL();
 8001488:	e702      	b.n	8001290 <main+0x30>
 800148a:	bf00      	nop
 800148c:	f3af 8000 	nop.w
 8001490:	edfa43fe 	.word	0xedfa43fe
 8001494:	bfa9c0eb 	.word	0xbfa9c0eb
 8001498:	28f5c28f 	.word	0x28f5c28f
 800149c:	4069bf5c 	.word	0x4069bf5c
 80014a0:	00000000 	.word	0x00000000
 80014a4:	4118d01c 	.word	0x4118d01c
 80014a8:	20000244 	.word	0x20000244
 80014ac:	20000000 	.word	0x20000000
 80014b0:	2000028c 	.word	0x2000028c
 80014b4:	200001fc 	.word	0x200001fc
 80014b8:	20000320 	.word	0x20000320
 80014bc:	20000314 	.word	0x20000314
 80014c0:	42c80000 	.word	0x42c80000
 80014c4:	42c80000 	.word	0x42c80000
 80014c8:	2000031c 	.word	0x2000031c
 80014cc:	439a4000 	.word	0x439a4000
 80014d0:	20000318 	.word	0x20000318
 80014d4:	20000324 	.word	0x20000324
 80014d8:	20000325 	.word	0x20000325
 80014dc:	20000326 	.word	0x20000326
 80014e0:	20000327 	.word	0x20000327
 80014e4:	20000328 	.word	0x20000328
 80014e8:	40240000 	.word	0x40240000
 80014ec:	20000334 	.word	0x20000334
 80014f0:	66666667 	.word	0x66666667
 80014f4:	20000338 	.word	0x20000338
 80014f8:	2000033c 	.word	0x2000033c

080014fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b094      	sub	sp, #80	; 0x50
 8001500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001502:	f107 0320 	add.w	r3, r7, #32
 8001506:	2230      	movs	r2, #48	; 0x30
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f003 fcdc 	bl	8004ec8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001510:	f107 030c 	add.w	r3, r7, #12
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001520:	2300      	movs	r3, #0
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	4b28      	ldr	r3, [pc, #160]	; (80015c8 <SystemClock_Config+0xcc>)
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	4a27      	ldr	r2, [pc, #156]	; (80015c8 <SystemClock_Config+0xcc>)
 800152a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800152e:	6413      	str	r3, [r2, #64]	; 0x40
 8001530:	4b25      	ldr	r3, [pc, #148]	; (80015c8 <SystemClock_Config+0xcc>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800153c:	2300      	movs	r3, #0
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	4b22      	ldr	r3, [pc, #136]	; (80015cc <SystemClock_Config+0xd0>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a21      	ldr	r2, [pc, #132]	; (80015cc <SystemClock_Config+0xd0>)
 8001546:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800154a:	6013      	str	r3, [r2, #0]
 800154c:	4b1f      	ldr	r3, [pc, #124]	; (80015cc <SystemClock_Config+0xd0>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001554:	607b      	str	r3, [r7, #4]
 8001556:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001558:	2302      	movs	r3, #2
 800155a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800155c:	2301      	movs	r3, #1
 800155e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001560:	2310      	movs	r3, #16
 8001562:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001564:	2302      	movs	r3, #2
 8001566:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001568:	2300      	movs	r3, #0
 800156a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800156c:	2310      	movs	r3, #16
 800156e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001570:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001574:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001576:	2304      	movs	r3, #4
 8001578:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800157a:	2304      	movs	r3, #4
 800157c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800157e:	f107 0320 	add.w	r3, r7, #32
 8001582:	4618      	mov	r0, r3
 8001584:	f001 fc6c 	bl	8002e60 <HAL_RCC_OscConfig>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800158e:	f000 fa1d 	bl	80019cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001592:	230f      	movs	r3, #15
 8001594:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001596:	2302      	movs	r3, #2
 8001598:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800159a:	2300      	movs	r3, #0
 800159c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800159e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015a8:	f107 030c 	add.w	r3, r7, #12
 80015ac:	2102      	movs	r1, #2
 80015ae:	4618      	mov	r0, r3
 80015b0:	f001 fece 	bl	8003350 <HAL_RCC_ClockConfig>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80015ba:	f000 fa07 	bl	80019cc <Error_Handler>
  }
}
 80015be:	bf00      	nop
 80015c0:	3750      	adds	r7, #80	; 0x50
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40007000 	.word	0x40007000

080015d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015d6:	463b      	mov	r3, r7
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015e2:	4b19      	ldr	r3, [pc, #100]	; (8001648 <MX_ADC1_Init+0x78>)
 80015e4:	4a19      	ldr	r2, [pc, #100]	; (800164c <MX_ADC1_Init+0x7c>)
 80015e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015e8:	4b17      	ldr	r3, [pc, #92]	; (8001648 <MX_ADC1_Init+0x78>)
 80015ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015f0:	4b15      	ldr	r3, [pc, #84]	; (8001648 <MX_ADC1_Init+0x78>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80015f6:	4b14      	ldr	r3, [pc, #80]	; (8001648 <MX_ADC1_Init+0x78>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <MX_ADC1_Init+0x78>)
 80015fe:	2201      	movs	r2, #1
 8001600:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <MX_ADC1_Init+0x78>)
 8001604:	2200      	movs	r2, #0
 8001606:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800160a:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <MX_ADC1_Init+0x78>)
 800160c:	2200      	movs	r2, #0
 800160e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001610:	4b0d      	ldr	r3, [pc, #52]	; (8001648 <MX_ADC1_Init+0x78>)
 8001612:	4a0f      	ldr	r2, [pc, #60]	; (8001650 <MX_ADC1_Init+0x80>)
 8001614:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001616:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <MX_ADC1_Init+0x78>)
 8001618:	2200      	movs	r2, #0
 800161a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800161c:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <MX_ADC1_Init+0x78>)
 800161e:	2201      	movs	r2, #1
 8001620:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <MX_ADC1_Init+0x78>)
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800162a:	4b07      	ldr	r3, [pc, #28]	; (8001648 <MX_ADC1_Init+0x78>)
 800162c:	2201      	movs	r2, #1
 800162e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001630:	4805      	ldr	r0, [pc, #20]	; (8001648 <MX_ADC1_Init+0x78>)
 8001632:	f000 fcaf 	bl	8001f94 <HAL_ADC_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800163c:	f000 f9c6 	bl	80019cc <Error_Handler>

  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001640:	bf00      	nop
 8001642:	3710      	adds	r7, #16
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	200001fc 	.word	0x200001fc
 800164c:	40012000 	.word	0x40012000
 8001650:	0f000001 	.word	0x0f000001

08001654 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800165a:	f107 0308 	add.w	r3, r7, #8
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001668:	463b      	mov	r3, r7
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001670:	4b1e      	ldr	r3, [pc, #120]	; (80016ec <MX_TIM1_Init+0x98>)
 8001672:	4a1f      	ldr	r2, [pc, #124]	; (80016f0 <MX_TIM1_Init+0x9c>)
 8001674:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001676:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <MX_TIM1_Init+0x98>)
 8001678:	2247      	movs	r2, #71	; 0x47
 800167a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167c:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <MX_TIM1_Init+0x98>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4095;
 8001682:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <MX_TIM1_Init+0x98>)
 8001684:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001688:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800168a:	4b18      	ldr	r3, [pc, #96]	; (80016ec <MX_TIM1_Init+0x98>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001690:	4b16      	ldr	r3, [pc, #88]	; (80016ec <MX_TIM1_Init+0x98>)
 8001692:	2200      	movs	r2, #0
 8001694:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001696:	4b15      	ldr	r3, [pc, #84]	; (80016ec <MX_TIM1_Init+0x98>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800169c:	4813      	ldr	r0, [pc, #76]	; (80016ec <MX_TIM1_Init+0x98>)
 800169e:	f002 f877 	bl	8003790 <HAL_TIM_Base_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80016a8:	f000 f990 	bl	80019cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016b2:	f107 0308 	add.w	r3, r7, #8
 80016b6:	4619      	mov	r1, r3
 80016b8:	480c      	ldr	r0, [pc, #48]	; (80016ec <MX_TIM1_Init+0x98>)
 80016ba:	f002 f913 	bl	80038e4 <HAL_TIM_ConfigClockSource>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80016c4:	f000 f982 	bl	80019cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c8:	2300      	movs	r3, #0
 80016ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016d0:	463b      	mov	r3, r7
 80016d2:	4619      	mov	r1, r3
 80016d4:	4805      	ldr	r0, [pc, #20]	; (80016ec <MX_TIM1_Init+0x98>)
 80016d6:	f002 fae7 	bl	8003ca8 <HAL_TIMEx_MasterConfigSynchronization>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80016e0:	f000 f974 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016e4:	bf00      	nop
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000244 	.word	0x20000244
 80016f0:	40010000 	.word	0x40010000

080016f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016f8:	4b11      	ldr	r3, [pc, #68]	; (8001740 <MX_USART1_UART_Init+0x4c>)
 80016fa:	4a12      	ldr	r2, [pc, #72]	; (8001744 <MX_USART1_UART_Init+0x50>)
 80016fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80016fe:	4b10      	ldr	r3, [pc, #64]	; (8001740 <MX_USART1_UART_Init+0x4c>)
 8001700:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001704:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001706:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <MX_USART1_UART_Init+0x4c>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800170c:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <MX_USART1_UART_Init+0x4c>)
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001712:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <MX_USART1_UART_Init+0x4c>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001718:	4b09      	ldr	r3, [pc, #36]	; (8001740 <MX_USART1_UART_Init+0x4c>)
 800171a:	220c      	movs	r2, #12
 800171c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171e:	4b08      	ldr	r3, [pc, #32]	; (8001740 <MX_USART1_UART_Init+0x4c>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <MX_USART1_UART_Init+0x4c>)
 8001726:	2200      	movs	r2, #0
 8001728:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800172a:	4805      	ldr	r0, [pc, #20]	; (8001740 <MX_USART1_UART_Init+0x4c>)
 800172c:	f002 fb2a 	bl	8003d84 <HAL_UART_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001736:	f000 f949 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	2000028c 	.word	0x2000028c
 8001744:	40011000 	.word	0x40011000

08001748 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800174c:	4b11      	ldr	r3, [pc, #68]	; (8001794 <MX_USART2_UART_Init+0x4c>)
 800174e:	4a12      	ldr	r2, [pc, #72]	; (8001798 <MX_USART2_UART_Init+0x50>)
 8001750:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001752:	4b10      	ldr	r3, [pc, #64]	; (8001794 <MX_USART2_UART_Init+0x4c>)
 8001754:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001758:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800175a:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <MX_USART2_UART_Init+0x4c>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001760:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <MX_USART2_UART_Init+0x4c>)
 8001762:	2200      	movs	r2, #0
 8001764:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001766:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <MX_USART2_UART_Init+0x4c>)
 8001768:	2200      	movs	r2, #0
 800176a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800176c:	4b09      	ldr	r3, [pc, #36]	; (8001794 <MX_USART2_UART_Init+0x4c>)
 800176e:	220c      	movs	r2, #12
 8001770:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001772:	4b08      	ldr	r3, [pc, #32]	; (8001794 <MX_USART2_UART_Init+0x4c>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <MX_USART2_UART_Init+0x4c>)
 800177a:	2200      	movs	r2, #0
 800177c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800177e:	4805      	ldr	r0, [pc, #20]	; (8001794 <MX_USART2_UART_Init+0x4c>)
 8001780:	f002 fb00 	bl	8003d84 <HAL_UART_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800178a:	f000 f91f 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	200002d0 	.word	0x200002d0
 8001798:	40004400 	.word	0x40004400

0800179c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	; 0x28
 80017a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a2:	f107 0314 	add.w	r3, r7, #20
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	60da      	str	r2, [r3, #12]
 80017b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
 80017b6:	4b2d      	ldr	r3, [pc, #180]	; (800186c <MX_GPIO_Init+0xd0>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	4a2c      	ldr	r2, [pc, #176]	; (800186c <MX_GPIO_Init+0xd0>)
 80017bc:	f043 0304 	orr.w	r3, r3, #4
 80017c0:	6313      	str	r3, [r2, #48]	; 0x30
 80017c2:	4b2a      	ldr	r3, [pc, #168]	; (800186c <MX_GPIO_Init+0xd0>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f003 0304 	and.w	r3, r3, #4
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	4b26      	ldr	r3, [pc, #152]	; (800186c <MX_GPIO_Init+0xd0>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a25      	ldr	r2, [pc, #148]	; (800186c <MX_GPIO_Init+0xd0>)
 80017d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4b23      	ldr	r3, [pc, #140]	; (800186c <MX_GPIO_Init+0xd0>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	4b1f      	ldr	r3, [pc, #124]	; (800186c <MX_GPIO_Init+0xd0>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a1e      	ldr	r2, [pc, #120]	; (800186c <MX_GPIO_Init+0xd0>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
 80017fa:	4b1c      	ldr	r3, [pc, #112]	; (800186c <MX_GPIO_Init+0xd0>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
 800180a:	4b18      	ldr	r3, [pc, #96]	; (800186c <MX_GPIO_Init+0xd0>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a17      	ldr	r2, [pc, #92]	; (800186c <MX_GPIO_Init+0xd0>)
 8001810:	f043 0302 	orr.w	r3, r3, #2
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <MX_GPIO_Init+0xd0>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001822:	2200      	movs	r2, #0
 8001824:	2120      	movs	r1, #32
 8001826:	4812      	ldr	r0, [pc, #72]	; (8001870 <MX_GPIO_Init+0xd4>)
 8001828:	f001 fae6 	bl	8002df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800182c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001832:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001836:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	4619      	mov	r1, r3
 8001842:	480c      	ldr	r0, [pc, #48]	; (8001874 <MX_GPIO_Init+0xd8>)
 8001844:	f001 f93c 	bl	8002ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001848:	2320      	movs	r3, #32
 800184a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184c:	2301      	movs	r3, #1
 800184e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001854:	2300      	movs	r3, #0
 8001856:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	4619      	mov	r1, r3
 800185e:	4804      	ldr	r0, [pc, #16]	; (8001870 <MX_GPIO_Init+0xd4>)
 8001860:	f001 f92e 	bl	8002ac0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001864:	bf00      	nop
 8001866:	3728      	adds	r7, #40	; 0x28
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40023800 	.word	0x40023800
 8001870:	40020000 	.word	0x40020000
 8001874:	40020800 	.word	0x40020800

08001878 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800187c:	b0a2      	sub	sp, #136	; 0x88
 800187e:	af04      	add	r7, sp, #16
 8001880:	6078      	str	r0, [r7, #4]
//	HAL_UART_Transmit(&huart2, Rx_data, strlen(Rx_data), 100);
	if(Rx_data[0] == '1'){
 8001882:	4b47      	ldr	r3, [pc, #284]	; (80019a0 <HAL_UART_RxCpltCallback+0x128>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b31      	cmp	r3, #49	; 0x31
 8001888:	d142      	bne.n	8001910 <HAL_UART_RxCpltCallback+0x98>
		char out[80] = "";
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	f107 0310 	add.w	r3, r7, #16
 8001892:	224c      	movs	r2, #76	; 0x4c
 8001894:	2100      	movs	r1, #0
 8001896:	4618      	mov	r0, r3
 8001898:	f003 fb16 	bl	8004ec8 <memset>
		sprintf(out, "[%u,%u,%.2f,%.2f]\n\r", tCelsius, RH, SOIL_HUMID, LIGHT);
 800189c:	4b41      	ldr	r3, [pc, #260]	; (80019a4 <HAL_UART_RxCpltCallback+0x12c>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	461e      	mov	r6, r3
 80018a2:	4b41      	ldr	r3, [pc, #260]	; (80019a8 <HAL_UART_RxCpltCallback+0x130>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	4698      	mov	r8, r3
 80018a8:	4b40      	ldr	r3, [pc, #256]	; (80019ac <HAL_UART_RxCpltCallback+0x134>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7fe fe53 	bl	8000558 <__aeabi_f2d>
 80018b2:	4604      	mov	r4, r0
 80018b4:	460d      	mov	r5, r1
 80018b6:	4b3e      	ldr	r3, [pc, #248]	; (80019b0 <HAL_UART_RxCpltCallback+0x138>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7fe fe4c 	bl	8000558 <__aeabi_f2d>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	f107 000c 	add.w	r0, r7, #12
 80018c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80018cc:	e9cd 4500 	strd	r4, r5, [sp]
 80018d0:	4643      	mov	r3, r8
 80018d2:	4632      	mov	r2, r6
 80018d4:	4937      	ldr	r1, [pc, #220]	; (80019b4 <HAL_UART_RxCpltCallback+0x13c>)
 80018d6:	f003 ff69 	bl	80057ac <siprintf>

		HAL_UART_Transmit(&huart1, out, strlen(out), 100);
 80018da:	f107 030c 	add.w	r3, r7, #12
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe fc7e 	bl	80001e0 <strlen>
 80018e4:	4603      	mov	r3, r0
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	f107 010c 	add.w	r1, r7, #12
 80018ec:	2364      	movs	r3, #100	; 0x64
 80018ee:	4832      	ldr	r0, [pc, #200]	; (80019b8 <HAL_UART_RxCpltCallback+0x140>)
 80018f0:	f002 fa95 	bl	8003e1e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, out, strlen(out), 100);
 80018f4:	f107 030c 	add.w	r3, r7, #12
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7fe fc71 	bl	80001e0 <strlen>
 80018fe:	4603      	mov	r3, r0
 8001900:	b29a      	uxth	r2, r3
 8001902:	f107 010c 	add.w	r1, r7, #12
 8001906:	2364      	movs	r3, #100	; 0x64
 8001908:	482c      	ldr	r0, [pc, #176]	; (80019bc <HAL_UART_RxCpltCallback+0x144>)
 800190a:	f002 fa88 	bl	8003e1e <HAL_UART_Transmit>
 800190e:	e03a      	b.n	8001986 <HAL_UART_RxCpltCallback+0x10e>
	}
	else if(Rx_data[0] == '2'){
 8001910:	4b23      	ldr	r3, [pc, #140]	; (80019a0 <HAL_UART_RxCpltCallback+0x128>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b32      	cmp	r3, #50	; 0x32
 8001916:	d136      	bne.n	8001986 <HAL_UART_RxCpltCallback+0x10e>
		char start[] = "Watering\n\r";
 8001918:	4a29      	ldr	r2, [pc, #164]	; (80019c0 <HAL_UART_RxCpltCallback+0x148>)
 800191a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800191e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001920:	c303      	stmia	r3!, {r0, r1}
 8001922:	801a      	strh	r2, [r3, #0]
 8001924:	3302      	adds	r3, #2
 8001926:	0c12      	lsrs	r2, r2, #16
 8001928:	701a      	strb	r2, [r3, #0]
		char finished[] = "Water Success\n\r";
 800192a:	4b26      	ldr	r3, [pc, #152]	; (80019c4 <HAL_UART_RxCpltCallback+0x14c>)
 800192c:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8001930:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001932:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		HAL_UART_Transmit(&huart2, start, strlen(start), 100);
 8001936:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800193a:	4618      	mov	r0, r3
 800193c:	f7fe fc50 	bl	80001e0 <strlen>
 8001940:	4603      	mov	r3, r0
 8001942:	b29a      	uxth	r2, r3
 8001944:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8001948:	2364      	movs	r3, #100	; 0x64
 800194a:	481c      	ldr	r0, [pc, #112]	; (80019bc <HAL_UART_RxCpltCallback+0x144>)
 800194c:	f002 fa67 	bl	8003e1e <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8001950:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001954:	481c      	ldr	r0, [pc, #112]	; (80019c8 <HAL_UART_RxCpltCallback+0x150>)
 8001956:	f001 fa68 	bl	8002e2a <HAL_GPIO_TogglePin>
		milliDelay(3000);
 800195a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800195e:	f7ff fb3b 	bl	8000fd8 <milliDelay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8001962:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001966:	4818      	ldr	r0, [pc, #96]	; (80019c8 <HAL_UART_RxCpltCallback+0x150>)
 8001968:	f001 fa5f 	bl	8002e2a <HAL_GPIO_TogglePin>
		HAL_UART_Transmit(&huart2, finished, strlen(finished), 100);
 800196c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001970:	4618      	mov	r0, r3
 8001972:	f7fe fc35 	bl	80001e0 <strlen>
 8001976:	4603      	mov	r3, r0
 8001978:	b29a      	uxth	r2, r3
 800197a:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800197e:	2364      	movs	r3, #100	; 0x64
 8001980:	480e      	ldr	r0, [pc, #56]	; (80019bc <HAL_UART_RxCpltCallback+0x144>)
 8001982:	f002 fa4c 	bl	8003e1e <HAL_UART_Transmit>
	}
	Rx_data[0] = '0';
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_UART_RxCpltCallback+0x128>)
 8001988:	2230      	movs	r2, #48	; 0x30
 800198a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, Rx_data, sizeof(Rx_data));
 800198c:	2202      	movs	r2, #2
 800198e:	4904      	ldr	r1, [pc, #16]	; (80019a0 <HAL_UART_RxCpltCallback+0x128>)
 8001990:	4809      	ldr	r0, [pc, #36]	; (80019b8 <HAL_UART_RxCpltCallback+0x140>)
 8001992:	f002 fad6 	bl	8003f42 <HAL_UART_Receive_IT>
}
 8001996:	bf00      	nop
 8001998:	3778      	adds	r7, #120	; 0x78
 800199a:	46bd      	mov	sp, r7
 800199c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019a0:	20000000 	.word	0x20000000
 80019a4:	20000334 	.word	0x20000334
 80019a8:	2000033c 	.word	0x2000033c
 80019ac:	20000314 	.word	0x20000314
 80019b0:	20000318 	.word	0x20000318
 80019b4:	08007cb8 	.word	0x08007cb8
 80019b8:	2000028c 	.word	0x2000028c
 80019bc:	200002d0 	.word	0x200002d0
 80019c0:	08007ccc 	.word	0x08007ccc
 80019c4:	08007cd8 	.word	0x08007cd8
 80019c8:	40020000 	.word	0x40020000

080019cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019d0:	b672      	cpsid	i
}
 80019d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80019d4:	e7fe      	b.n	80019d4 <Error_Handler+0x8>
	...

080019d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	607b      	str	r3, [r7, #4]
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <HAL_MspInit+0x4c>)
 80019e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e6:	4a0f      	ldr	r2, [pc, #60]	; (8001a24 <HAL_MspInit+0x4c>)
 80019e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ec:	6453      	str	r3, [r2, #68]	; 0x44
 80019ee:	4b0d      	ldr	r3, [pc, #52]	; (8001a24 <HAL_MspInit+0x4c>)
 80019f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	603b      	str	r3, [r7, #0]
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <HAL_MspInit+0x4c>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	4a08      	ldr	r2, [pc, #32]	; (8001a24 <HAL_MspInit+0x4c>)
 8001a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a08:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0a:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_MspInit+0x4c>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a12:	603b      	str	r3, [r7, #0]
 8001a14:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a16:	2007      	movs	r0, #7
 8001a18:	f000 ff7e 	bl	8002918 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40023800 	.word	0x40023800

08001a28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	; 0x28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a17      	ldr	r2, [pc, #92]	; (8001aa4 <HAL_ADC_MspInit+0x7c>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d127      	bne.n	8001a9a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	4b16      	ldr	r3, [pc, #88]	; (8001aa8 <HAL_ADC_MspInit+0x80>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a52:	4a15      	ldr	r2, [pc, #84]	; (8001aa8 <HAL_ADC_MspInit+0x80>)
 8001a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a58:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5a:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <HAL_ADC_MspInit+0x80>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <HAL_ADC_MspInit+0x80>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	4a0e      	ldr	r2, [pc, #56]	; (8001aa8 <HAL_ADC_MspInit+0x80>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6313      	str	r3, [r2, #48]	; 0x30
 8001a76:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <HAL_ADC_MspInit+0x80>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a82:	2303      	movs	r3, #3
 8001a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a86:	2303      	movs	r3, #3
 8001a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8e:	f107 0314 	add.w	r3, r7, #20
 8001a92:	4619      	mov	r1, r3
 8001a94:	4805      	ldr	r0, [pc, #20]	; (8001aac <HAL_ADC_MspInit+0x84>)
 8001a96:	f001 f813 	bl	8002ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a9a:	bf00      	nop
 8001a9c:	3728      	adds	r7, #40	; 0x28
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40012000 	.word	0x40012000
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40020000 	.word	0x40020000

08001ab0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a0b      	ldr	r2, [pc, #44]	; (8001aec <HAL_TIM_Base_MspInit+0x3c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d10d      	bne.n	8001ade <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <HAL_TIM_Base_MspInit+0x40>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aca:	4a09      	ldr	r2, [pc, #36]	; (8001af0 <HAL_TIM_Base_MspInit+0x40>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ad2:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <HAL_TIM_Base_MspInit+0x40>)
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001ade:	bf00      	nop
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40010000 	.word	0x40010000
 8001af0:	40023800 	.word	0x40023800

08001af4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08c      	sub	sp, #48	; 0x30
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afc:	f107 031c 	add.w	r3, r7, #28
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a36      	ldr	r2, [pc, #216]	; (8001bec <HAL_UART_MspInit+0xf8>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d135      	bne.n	8001b82 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	61bb      	str	r3, [r7, #24]
 8001b1a:	4b35      	ldr	r3, [pc, #212]	; (8001bf0 <HAL_UART_MspInit+0xfc>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1e:	4a34      	ldr	r2, [pc, #208]	; (8001bf0 <HAL_UART_MspInit+0xfc>)
 8001b20:	f043 0310 	orr.w	r3, r3, #16
 8001b24:	6453      	str	r3, [r2, #68]	; 0x44
 8001b26:	4b32      	ldr	r3, [pc, #200]	; (8001bf0 <HAL_UART_MspInit+0xfc>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2a:	f003 0310 	and.w	r3, r3, #16
 8001b2e:	61bb      	str	r3, [r7, #24]
 8001b30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	4b2e      	ldr	r3, [pc, #184]	; (8001bf0 <HAL_UART_MspInit+0xfc>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	4a2d      	ldr	r2, [pc, #180]	; (8001bf0 <HAL_UART_MspInit+0xfc>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6313      	str	r3, [r2, #48]	; 0x30
 8001b42:	4b2b      	ldr	r3, [pc, #172]	; (8001bf0 <HAL_UART_MspInit+0xfc>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	617b      	str	r3, [r7, #20]
 8001b4c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b4e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b54:	2302      	movs	r3, #2
 8001b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b60:	2307      	movs	r3, #7
 8001b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b64:	f107 031c 	add.w	r3, r7, #28
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4822      	ldr	r0, [pc, #136]	; (8001bf4 <HAL_UART_MspInit+0x100>)
 8001b6c:	f000 ffa8 	bl	8002ac0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b70:	2200      	movs	r2, #0
 8001b72:	2100      	movs	r1, #0
 8001b74:	2025      	movs	r0, #37	; 0x25
 8001b76:	f000 feda 	bl	800292e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b7a:	2025      	movs	r0, #37	; 0x25
 8001b7c:	f000 fef3 	bl	8002966 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b80:	e030      	b.n	8001be4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a1c      	ldr	r2, [pc, #112]	; (8001bf8 <HAL_UART_MspInit+0x104>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d12b      	bne.n	8001be4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	4b17      	ldr	r3, [pc, #92]	; (8001bf0 <HAL_UART_MspInit+0xfc>)
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	4a16      	ldr	r2, [pc, #88]	; (8001bf0 <HAL_UART_MspInit+0xfc>)
 8001b96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b9a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9c:	4b14      	ldr	r3, [pc, #80]	; (8001bf0 <HAL_UART_MspInit+0xfc>)
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba4:	613b      	str	r3, [r7, #16]
 8001ba6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <HAL_UART_MspInit+0xfc>)
 8001bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb0:	4a0f      	ldr	r2, [pc, #60]	; (8001bf0 <HAL_UART_MspInit+0xfc>)
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <HAL_UART_MspInit+0xfc>)
 8001bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001bc4:	230c      	movs	r3, #12
 8001bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bd4:	2307      	movs	r3, #7
 8001bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd8:	f107 031c 	add.w	r3, r7, #28
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4805      	ldr	r0, [pc, #20]	; (8001bf4 <HAL_UART_MspInit+0x100>)
 8001be0:	f000 ff6e 	bl	8002ac0 <HAL_GPIO_Init>
}
 8001be4:	bf00      	nop
 8001be6:	3730      	adds	r7, #48	; 0x30
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40011000 	.word	0x40011000
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40020000 	.word	0x40020000
 8001bf8:	40004400 	.word	0x40004400

08001bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c00:	e7fe      	b.n	8001c00 <NMI_Handler+0x4>

08001c02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c06:	e7fe      	b.n	8001c06 <HardFault_Handler+0x4>

08001c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c0c:	e7fe      	b.n	8001c0c <MemManage_Handler+0x4>

08001c0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c12:	e7fe      	b.n	8001c12 <BusFault_Handler+0x4>

08001c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c18:	e7fe      	b.n	8001c18 <UsageFault_Handler+0x4>

08001c1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c48:	f000 f960 	bl	8001f0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c4c:	bf00      	nop
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c54:	4802      	ldr	r0, [pc, #8]	; (8001c60 <USART1_IRQHandler+0x10>)
 8001c56:	f002 f9a5 	bl	8003fa4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	2000028c 	.word	0x2000028c

08001c64 <_getpid>:
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	2301      	movs	r3, #1
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <_kill>:
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
 8001c7e:	f003 f8f9 	bl	8004e74 <__errno>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2216      	movs	r2, #22
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <_exit>:
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ffe7 	bl	8001c74 <_kill>
 8001ca6:	e7fe      	b.n	8001ca6 <_exit+0x12>

08001ca8 <_read>:
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
 8001cb8:	e00a      	b.n	8001cd0 <_read+0x28>
 8001cba:	f3af 8000 	nop.w
 8001cbe:	4601      	mov	r1, r0
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	1c5a      	adds	r2, r3, #1
 8001cc4:	60ba      	str	r2, [r7, #8]
 8001cc6:	b2ca      	uxtb	r2, r1
 8001cc8:	701a      	strb	r2, [r3, #0]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	dbf0      	blt.n	8001cba <_read+0x12>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <_write>:
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b086      	sub	sp, #24
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	60f8      	str	r0, [r7, #12]
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	607a      	str	r2, [r7, #4]
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
 8001cf2:	e009      	b.n	8001d08 <_write+0x26>
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	1c5a      	adds	r2, r3, #1
 8001cf8:	60ba      	str	r2, [r7, #8]
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f3af 8000 	nop.w
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	3301      	adds	r3, #1
 8001d06:	617b      	str	r3, [r7, #20]
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	dbf1      	blt.n	8001cf4 <_write+0x12>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4618      	mov	r0, r3
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <_close>:
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
 8001d22:	f04f 33ff 	mov.w	r3, #4294967295
 8001d26:	4618      	mov	r0, r3
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <_fstat>:
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
 8001d3a:	6039      	str	r1, [r7, #0]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d42:	605a      	str	r2, [r3, #4]
 8001d44:	2300      	movs	r3, #0
 8001d46:	4618      	mov	r0, r3
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <_isatty>:
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <_lseek>:
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
 8001d74:	2300      	movs	r3, #0
 8001d76:	4618      	mov	r0, r3
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
	...

08001d84 <_sbrk>:
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	4a14      	ldr	r2, [pc, #80]	; (8001de0 <_sbrk+0x5c>)
 8001d8e:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <_sbrk+0x60>)
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	4b13      	ldr	r3, [pc, #76]	; (8001de8 <_sbrk+0x64>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d102      	bne.n	8001da6 <_sbrk+0x22>
 8001da0:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <_sbrk+0x64>)
 8001da2:	4a12      	ldr	r2, [pc, #72]	; (8001dec <_sbrk+0x68>)
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <_sbrk+0x64>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d207      	bcs.n	8001dc4 <_sbrk+0x40>
 8001db4:	f003 f85e 	bl	8004e74 <__errno>
 8001db8:	4603      	mov	r3, r0
 8001dba:	220c      	movs	r2, #12
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc2:	e009      	b.n	8001dd8 <_sbrk+0x54>
 8001dc4:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <_sbrk+0x64>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <_sbrk+0x64>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	4a05      	ldr	r2, [pc, #20]	; (8001de8 <_sbrk+0x64>)
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20020000 	.word	0x20020000
 8001de4:	00000400 	.word	0x00000400
 8001de8:	20000340 	.word	0x20000340
 8001dec:	20000358 	.word	0x20000358

08001df0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <SystemInit+0x20>)
 8001df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dfa:	4a05      	ldr	r2, [pc, #20]	; (8001e10 <SystemInit+0x20>)
 8001dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <Reset_Handler>:
 8001e14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e4c <LoopFillZerobss+0x12>
 8001e18:	480d      	ldr	r0, [pc, #52]	; (8001e50 <LoopFillZerobss+0x16>)
 8001e1a:	490e      	ldr	r1, [pc, #56]	; (8001e54 <LoopFillZerobss+0x1a>)
 8001e1c:	4a0e      	ldr	r2, [pc, #56]	; (8001e58 <LoopFillZerobss+0x1e>)
 8001e1e:	2300      	movs	r3, #0
 8001e20:	e002      	b.n	8001e28 <LoopCopyDataInit>

08001e22 <CopyDataInit>:
 8001e22:	58d4      	ldr	r4, [r2, r3]
 8001e24:	50c4      	str	r4, [r0, r3]
 8001e26:	3304      	adds	r3, #4

08001e28 <LoopCopyDataInit>:
 8001e28:	18c4      	adds	r4, r0, r3
 8001e2a:	428c      	cmp	r4, r1
 8001e2c:	d3f9      	bcc.n	8001e22 <CopyDataInit>
 8001e2e:	4a0b      	ldr	r2, [pc, #44]	; (8001e5c <LoopFillZerobss+0x22>)
 8001e30:	4c0b      	ldr	r4, [pc, #44]	; (8001e60 <LoopFillZerobss+0x26>)
 8001e32:	2300      	movs	r3, #0
 8001e34:	e001      	b.n	8001e3a <LoopFillZerobss>

08001e36 <FillZerobss>:
 8001e36:	6013      	str	r3, [r2, #0]
 8001e38:	3204      	adds	r2, #4

08001e3a <LoopFillZerobss>:
 8001e3a:	42a2      	cmp	r2, r4
 8001e3c:	d3fb      	bcc.n	8001e36 <FillZerobss>
 8001e3e:	f7ff ffd7 	bl	8001df0 <SystemInit>
 8001e42:	f003 f81d 	bl	8004e80 <__libc_init_array>
 8001e46:	f7ff fa0b 	bl	8001260 <main>
 8001e4a:	4770      	bx	lr
 8001e4c:	20020000 	.word	0x20020000
 8001e50:	20000000 	.word	0x20000000
 8001e54:	200001e0 	.word	0x200001e0
 8001e58:	080080ec 	.word	0x080080ec
 8001e5c:	200001e0 	.word	0x200001e0
 8001e60:	20000358 	.word	0x20000358

08001e64 <ADC_IRQHandler>:
 8001e64:	e7fe      	b.n	8001e64 <ADC_IRQHandler>
	...

08001e68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <HAL_Init+0x40>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a0d      	ldr	r2, [pc, #52]	; (8001ea8 <HAL_Init+0x40>)
 8001e72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e78:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <HAL_Init+0x40>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ea8 <HAL_Init+0x40>)
 8001e7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e84:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <HAL_Init+0x40>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a07      	ldr	r2, [pc, #28]	; (8001ea8 <HAL_Init+0x40>)
 8001e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e90:	2003      	movs	r0, #3
 8001e92:	f000 fd41 	bl	8002918 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e96:	2000      	movs	r0, #0
 8001e98:	f000 f808 	bl	8001eac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e9c:	f7ff fd9c 	bl	80019d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40023c00 	.word	0x40023c00

08001eac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eb4:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <HAL_InitTick+0x54>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <HAL_InitTick+0x58>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ec2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 fd59 	bl	8002982 <HAL_SYSTICK_Config>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e00e      	b.n	8001ef8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b0f      	cmp	r3, #15
 8001ede:	d80a      	bhi.n	8001ef6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee8:	f000 fd21 	bl	800292e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eec:	4a06      	ldr	r2, [pc, #24]	; (8001f08 <HAL_InitTick+0x5c>)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	e000      	b.n	8001ef8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000004 	.word	0x20000004
 8001f04:	2000000c 	.word	0x2000000c
 8001f08:	20000008 	.word	0x20000008

08001f0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_IncTick+0x20>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	461a      	mov	r2, r3
 8001f16:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_IncTick+0x24>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	4a04      	ldr	r2, [pc, #16]	; (8001f30 <HAL_IncTick+0x24>)
 8001f1e:	6013      	str	r3, [r2, #0]
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	2000000c 	.word	0x2000000c
 8001f30:	20000344 	.word	0x20000344

08001f34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return uwTick;
 8001f38:	4b03      	ldr	r3, [pc, #12]	; (8001f48 <HAL_GetTick+0x14>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	20000344 	.word	0x20000344

08001f4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f54:	f7ff ffee 	bl	8001f34 <HAL_GetTick>
 8001f58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f64:	d005      	beq.n	8001f72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f66:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <HAL_Delay+0x44>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4413      	add	r3, r2
 8001f70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f72:	bf00      	nop
 8001f74:	f7ff ffde 	bl	8001f34 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d8f7      	bhi.n	8001f74 <HAL_Delay+0x28>
  {
  }
}
 8001f84:	bf00      	nop
 8001f86:	bf00      	nop
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	2000000c 	.word	0x2000000c

08001f94 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e033      	b.n	8002012 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d109      	bne.n	8001fc6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff fd38 	bl	8001a28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	f003 0310 	and.w	r3, r3, #16
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d118      	bne.n	8002004 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fda:	f023 0302 	bic.w	r3, r3, #2
 8001fde:	f043 0202 	orr.w	r2, r3, #2
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 faca 	bl	8002580 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	f023 0303 	bic.w	r3, r3, #3
 8001ffa:	f043 0201 	orr.w	r2, r3, #1
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	641a      	str	r2, [r3, #64]	; 0x40
 8002002:	e001      	b.n	8002008 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002010:	7bfb      	ldrb	r3, [r7, #15]
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
	...

0800201c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002024:	2300      	movs	r3, #0
 8002026:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800202e:	2b01      	cmp	r3, #1
 8002030:	d101      	bne.n	8002036 <HAL_ADC_Start+0x1a>
 8002032:	2302      	movs	r3, #2
 8002034:	e097      	b.n	8002166 <HAL_ADC_Start+0x14a>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	2b01      	cmp	r3, #1
 800204a:	d018      	beq.n	800207e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	689a      	ldr	r2, [r3, #8]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f042 0201 	orr.w	r2, r2, #1
 800205a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800205c:	4b45      	ldr	r3, [pc, #276]	; (8002174 <HAL_ADC_Start+0x158>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a45      	ldr	r2, [pc, #276]	; (8002178 <HAL_ADC_Start+0x15c>)
 8002062:	fba2 2303 	umull	r2, r3, r2, r3
 8002066:	0c9a      	lsrs	r2, r3, #18
 8002068:	4613      	mov	r3, r2
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	4413      	add	r3, r2
 800206e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002070:	e002      	b.n	8002078 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	3b01      	subs	r3, #1
 8002076:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f9      	bne.n	8002072 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b01      	cmp	r3, #1
 800208a:	d15f      	bne.n	800214c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002090:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002094:	f023 0301 	bic.w	r3, r3, #1
 8002098:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d007      	beq.n	80020be <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020ca:	d106      	bne.n	80020da <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d0:	f023 0206 	bic.w	r2, r3, #6
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	645a      	str	r2, [r3, #68]	; 0x44
 80020d8:	e002      	b.n	80020e0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020e8:	4b24      	ldr	r3, [pc, #144]	; (800217c <HAL_ADC_Start+0x160>)
 80020ea:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80020f4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f003 031f 	and.w	r3, r3, #31
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10f      	bne.n	8002122 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d129      	bne.n	8002164 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	e020      	b.n	8002164 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a16      	ldr	r2, [pc, #88]	; (8002180 <HAL_ADC_Start+0x164>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d11b      	bne.n	8002164 <HAL_ADC_Start+0x148>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d114      	bne.n	8002164 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002148:	609a      	str	r2, [r3, #8]
 800214a:	e00b      	b.n	8002164 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	f043 0210 	orr.w	r2, r3, #16
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215c:	f043 0201 	orr.w	r2, r3, #1
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	20000004 	.word	0x20000004
 8002178:	431bde83 	.word	0x431bde83
 800217c:	40012300 	.word	0x40012300
 8002180:	40012000 	.word	0x40012000

08002184 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002192:	2b01      	cmp	r3, #1
 8002194:	d101      	bne.n	800219a <HAL_ADC_Stop+0x16>
 8002196:	2302      	movs	r3, #2
 8002198:	e021      	b.n	80021de <HAL_ADC_Stop+0x5a>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0201 	bic.w	r2, r2, #1
 80021b0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d109      	bne.n	80021d4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021c8:	f023 0301 	bic.w	r3, r3, #1
 80021cc:	f043 0201 	orr.w	r2, r3, #1
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b084      	sub	sp, #16
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002206:	d113      	bne.n	8002230 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002216:	d10b      	bne.n	8002230 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	f043 0220 	orr.w	r2, r3, #32
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e063      	b.n	80022f8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002230:	f7ff fe80 	bl	8001f34 <HAL_GetTick>
 8002234:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002236:	e021      	b.n	800227c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800223e:	d01d      	beq.n	800227c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d007      	beq.n	8002256 <HAL_ADC_PollForConversion+0x6c>
 8002246:	f7ff fe75 	bl	8001f34 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	429a      	cmp	r2, r3
 8002254:	d212      	bcs.n	800227c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b02      	cmp	r3, #2
 8002262:	d00b      	beq.n	800227c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	f043 0204 	orr.w	r2, r3, #4
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e03d      	b.n	80022f8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b02      	cmp	r3, #2
 8002288:	d1d6      	bne.n	8002238 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f06f 0212 	mvn.w	r2, #18
 8002292:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d123      	bne.n	80022f6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d11f      	bne.n	80022f6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022bc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d006      	beq.n	80022d2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d111      	bne.n	80022f6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d105      	bne.n	80022f6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f043 0201 	orr.w	r2, r3, #1
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800230e:	4618      	mov	r0, r3
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
	...

0800231c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002326:	2300      	movs	r3, #0
 8002328:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002330:	2b01      	cmp	r3, #1
 8002332:	d101      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x1c>
 8002334:	2302      	movs	r3, #2
 8002336:	e113      	b.n	8002560 <HAL_ADC_ConfigChannel+0x244>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b09      	cmp	r3, #9
 8002346:	d925      	bls.n	8002394 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68d9      	ldr	r1, [r3, #12]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	b29b      	uxth	r3, r3
 8002354:	461a      	mov	r2, r3
 8002356:	4613      	mov	r3, r2
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	4413      	add	r3, r2
 800235c:	3b1e      	subs	r3, #30
 800235e:	2207      	movs	r2, #7
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	43da      	mvns	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	400a      	ands	r2, r1
 800236c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68d9      	ldr	r1, [r3, #12]
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	b29b      	uxth	r3, r3
 800237e:	4618      	mov	r0, r3
 8002380:	4603      	mov	r3, r0
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	4403      	add	r3, r0
 8002386:	3b1e      	subs	r3, #30
 8002388:	409a      	lsls	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	430a      	orrs	r2, r1
 8002390:	60da      	str	r2, [r3, #12]
 8002392:	e022      	b.n	80023da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6919      	ldr	r1, [r3, #16]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	b29b      	uxth	r3, r3
 80023a0:	461a      	mov	r2, r3
 80023a2:	4613      	mov	r3, r2
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	4413      	add	r3, r2
 80023a8:	2207      	movs	r2, #7
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43da      	mvns	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	400a      	ands	r2, r1
 80023b6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6919      	ldr	r1, [r3, #16]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	4618      	mov	r0, r3
 80023ca:	4603      	mov	r3, r0
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	4403      	add	r3, r0
 80023d0:	409a      	lsls	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b06      	cmp	r3, #6
 80023e0:	d824      	bhi.n	800242c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	4613      	mov	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	3b05      	subs	r3, #5
 80023f4:	221f      	movs	r2, #31
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43da      	mvns	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	400a      	ands	r2, r1
 8002402:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	b29b      	uxth	r3, r3
 8002410:	4618      	mov	r0, r3
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	4613      	mov	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	3b05      	subs	r3, #5
 800241e:	fa00 f203 	lsl.w	r2, r0, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	635a      	str	r2, [r3, #52]	; 0x34
 800242a:	e04c      	b.n	80024c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2b0c      	cmp	r3, #12
 8002432:	d824      	bhi.n	800247e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4413      	add	r3, r2
 8002444:	3b23      	subs	r3, #35	; 0x23
 8002446:	221f      	movs	r2, #31
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43da      	mvns	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	400a      	ands	r2, r1
 8002454:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	b29b      	uxth	r3, r3
 8002462:	4618      	mov	r0, r3
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	3b23      	subs	r3, #35	; 0x23
 8002470:	fa00 f203 	lsl.w	r2, r0, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	631a      	str	r2, [r3, #48]	; 0x30
 800247c:	e023      	b.n	80024c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	3b41      	subs	r3, #65	; 0x41
 8002490:	221f      	movs	r2, #31
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43da      	mvns	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	400a      	ands	r2, r1
 800249e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	4618      	mov	r0, r3
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	4613      	mov	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	3b41      	subs	r3, #65	; 0x41
 80024ba:	fa00 f203 	lsl.w	r2, r0, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024c6:	4b29      	ldr	r3, [pc, #164]	; (800256c <HAL_ADC_ConfigChannel+0x250>)
 80024c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a28      	ldr	r2, [pc, #160]	; (8002570 <HAL_ADC_ConfigChannel+0x254>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d10f      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x1d8>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2b12      	cmp	r3, #18
 80024da:	d10b      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a1d      	ldr	r2, [pc, #116]	; (8002570 <HAL_ADC_ConfigChannel+0x254>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d12b      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x23a>
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a1c      	ldr	r2, [pc, #112]	; (8002574 <HAL_ADC_ConfigChannel+0x258>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d003      	beq.n	8002510 <HAL_ADC_ConfigChannel+0x1f4>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2b11      	cmp	r3, #17
 800250e:	d122      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a11      	ldr	r2, [pc, #68]	; (8002574 <HAL_ADC_ConfigChannel+0x258>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d111      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002532:	4b11      	ldr	r3, [pc, #68]	; (8002578 <HAL_ADC_ConfigChannel+0x25c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a11      	ldr	r2, [pc, #68]	; (800257c <HAL_ADC_ConfigChannel+0x260>)
 8002538:	fba2 2303 	umull	r2, r3, r2, r3
 800253c:	0c9a      	lsrs	r2, r3, #18
 800253e:	4613      	mov	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002548:	e002      	b.n	8002550 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	3b01      	subs	r3, #1
 800254e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f9      	bne.n	800254a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	40012300 	.word	0x40012300
 8002570:	40012000 	.word	0x40012000
 8002574:	10000012 	.word	0x10000012
 8002578:	20000004 	.word	0x20000004
 800257c:	431bde83 	.word	0x431bde83

08002580 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002588:	4b79      	ldr	r3, [pc, #484]	; (8002770 <ADC_Init+0x1f0>)
 800258a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	431a      	orrs	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6859      	ldr	r1, [r3, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	021a      	lsls	r2, r3, #8
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80025d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6859      	ldr	r1, [r3, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689a      	ldr	r2, [r3, #8]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6899      	ldr	r1, [r3, #8]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68da      	ldr	r2, [r3, #12]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	430a      	orrs	r2, r1
 800260c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002612:	4a58      	ldr	r2, [pc, #352]	; (8002774 <ADC_Init+0x1f4>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d022      	beq.n	800265e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002626:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6899      	ldr	r1, [r3, #8]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002648:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6899      	ldr	r1, [r3, #8]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	430a      	orrs	r2, r1
 800265a:	609a      	str	r2, [r3, #8]
 800265c:	e00f      	b.n	800267e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800266c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800267c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 0202 	bic.w	r2, r2, #2
 800268c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6899      	ldr	r1, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	7e1b      	ldrb	r3, [r3, #24]
 8002698:	005a      	lsls	r2, r3, #1
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	430a      	orrs	r2, r1
 80026a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d01b      	beq.n	80026e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80026ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6859      	ldr	r1, [r3, #4]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	3b01      	subs	r3, #1
 80026d8:	035a      	lsls	r2, r3, #13
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	430a      	orrs	r2, r1
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	e007      	b.n	80026f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002702:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	3b01      	subs	r3, #1
 8002710:	051a      	lsls	r2, r3, #20
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002728:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6899      	ldr	r1, [r3, #8]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002736:	025a      	lsls	r2, r3, #9
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	430a      	orrs	r2, r1
 800273e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800274e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6899      	ldr	r1, [r3, #8]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	029a      	lsls	r2, r3, #10
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	609a      	str	r2, [r3, #8]
}
 8002764:	bf00      	nop
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	40012300 	.word	0x40012300
 8002774:	0f000001 	.word	0x0f000001

08002778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002788:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <__NVIC_SetPriorityGrouping+0x44>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800278e:	68ba      	ldr	r2, [r7, #8]
 8002790:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002794:	4013      	ands	r3, r2
 8002796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027aa:	4a04      	ldr	r2, [pc, #16]	; (80027bc <__NVIC_SetPriorityGrouping+0x44>)
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	60d3      	str	r3, [r2, #12]
}
 80027b0:	bf00      	nop
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	e000ed00 	.word	0xe000ed00

080027c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027c4:	4b04      	ldr	r3, [pc, #16]	; (80027d8 <__NVIC_GetPriorityGrouping+0x18>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	0a1b      	lsrs	r3, r3, #8
 80027ca:	f003 0307 	and.w	r3, r3, #7
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	e000ed00 	.word	0xe000ed00

080027dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	db0b      	blt.n	8002806 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	f003 021f 	and.w	r2, r3, #31
 80027f4:	4907      	ldr	r1, [pc, #28]	; (8002814 <__NVIC_EnableIRQ+0x38>)
 80027f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fa:	095b      	lsrs	r3, r3, #5
 80027fc:	2001      	movs	r0, #1
 80027fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	e000e100 	.word	0xe000e100

08002818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	6039      	str	r1, [r7, #0]
 8002822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002828:	2b00      	cmp	r3, #0
 800282a:	db0a      	blt.n	8002842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	b2da      	uxtb	r2, r3
 8002830:	490c      	ldr	r1, [pc, #48]	; (8002864 <__NVIC_SetPriority+0x4c>)
 8002832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002836:	0112      	lsls	r2, r2, #4
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	440b      	add	r3, r1
 800283c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002840:	e00a      	b.n	8002858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	b2da      	uxtb	r2, r3
 8002846:	4908      	ldr	r1, [pc, #32]	; (8002868 <__NVIC_SetPriority+0x50>)
 8002848:	79fb      	ldrb	r3, [r7, #7]
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	3b04      	subs	r3, #4
 8002850:	0112      	lsls	r2, r2, #4
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	440b      	add	r3, r1
 8002856:	761a      	strb	r2, [r3, #24]
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	e000e100 	.word	0xe000e100
 8002868:	e000ed00 	.word	0xe000ed00

0800286c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800286c:	b480      	push	{r7}
 800286e:	b089      	sub	sp, #36	; 0x24
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	f1c3 0307 	rsb	r3, r3, #7
 8002886:	2b04      	cmp	r3, #4
 8002888:	bf28      	it	cs
 800288a:	2304      	movcs	r3, #4
 800288c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	3304      	adds	r3, #4
 8002892:	2b06      	cmp	r3, #6
 8002894:	d902      	bls.n	800289c <NVIC_EncodePriority+0x30>
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	3b03      	subs	r3, #3
 800289a:	e000      	b.n	800289e <NVIC_EncodePriority+0x32>
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a0:	f04f 32ff 	mov.w	r2, #4294967295
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	43da      	mvns	r2, r3
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	401a      	ands	r2, r3
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028b4:	f04f 31ff 	mov.w	r1, #4294967295
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	fa01 f303 	lsl.w	r3, r1, r3
 80028be:	43d9      	mvns	r1, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c4:	4313      	orrs	r3, r2
         );
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3724      	adds	r7, #36	; 0x24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
	...

080028d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3b01      	subs	r3, #1
 80028e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028e4:	d301      	bcc.n	80028ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028e6:	2301      	movs	r3, #1
 80028e8:	e00f      	b.n	800290a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ea:	4a0a      	ldr	r2, [pc, #40]	; (8002914 <SysTick_Config+0x40>)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028f2:	210f      	movs	r1, #15
 80028f4:	f04f 30ff 	mov.w	r0, #4294967295
 80028f8:	f7ff ff8e 	bl	8002818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028fc:	4b05      	ldr	r3, [pc, #20]	; (8002914 <SysTick_Config+0x40>)
 80028fe:	2200      	movs	r2, #0
 8002900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002902:	4b04      	ldr	r3, [pc, #16]	; (8002914 <SysTick_Config+0x40>)
 8002904:	2207      	movs	r2, #7
 8002906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	e000e010 	.word	0xe000e010

08002918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7ff ff29 	bl	8002778 <__NVIC_SetPriorityGrouping>
}
 8002926:	bf00      	nop
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800292e:	b580      	push	{r7, lr}
 8002930:	b086      	sub	sp, #24
 8002932:	af00      	add	r7, sp, #0
 8002934:	4603      	mov	r3, r0
 8002936:	60b9      	str	r1, [r7, #8]
 8002938:	607a      	str	r2, [r7, #4]
 800293a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002940:	f7ff ff3e 	bl	80027c0 <__NVIC_GetPriorityGrouping>
 8002944:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	68b9      	ldr	r1, [r7, #8]
 800294a:	6978      	ldr	r0, [r7, #20]
 800294c:	f7ff ff8e 	bl	800286c <NVIC_EncodePriority>
 8002950:	4602      	mov	r2, r0
 8002952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002956:	4611      	mov	r1, r2
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff ff5d 	bl	8002818 <__NVIC_SetPriority>
}
 800295e:	bf00      	nop
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b082      	sub	sp, #8
 800296a:	af00      	add	r7, sp, #0
 800296c:	4603      	mov	r3, r0
 800296e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff ff31 	bl	80027dc <__NVIC_EnableIRQ>
}
 800297a:	bf00      	nop
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b082      	sub	sp, #8
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7ff ffa2 	bl	80028d4 <SysTick_Config>
 8002990:	4603      	mov	r3, r0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b084      	sub	sp, #16
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029a8:	f7ff fac4 	bl	8001f34 <HAL_GetTick>
 80029ac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d008      	beq.n	80029cc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2280      	movs	r2, #128	; 0x80
 80029be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e052      	b.n	8002a72 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0216 	bic.w	r2, r2, #22
 80029da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695a      	ldr	r2, [r3, #20]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029ea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d103      	bne.n	80029fc <HAL_DMA_Abort+0x62>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d007      	beq.n	8002a0c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 0208 	bic.w	r2, r2, #8
 8002a0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0201 	bic.w	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a1c:	e013      	b.n	8002a46 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a1e:	f7ff fa89 	bl	8001f34 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b05      	cmp	r3, #5
 8002a2a:	d90c      	bls.n	8002a46 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2203      	movs	r2, #3
 8002a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e015      	b.n	8002a72 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1e4      	bne.n	8002a1e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a58:	223f      	movs	r2, #63	; 0x3f
 8002a5a:	409a      	lsls	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d004      	beq.n	8002a98 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2280      	movs	r2, #128	; 0x80
 8002a92:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e00c      	b.n	8002ab2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2205      	movs	r2, #5
 8002a9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 0201 	bic.w	r2, r2, #1
 8002aae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
	...

08002ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b089      	sub	sp, #36	; 0x24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61fb      	str	r3, [r7, #28]
 8002ada:	e159      	b.n	8002d90 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002adc:	2201      	movs	r2, #1
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	4013      	ands	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	f040 8148 	bne.w	8002d8a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d005      	beq.n	8002b12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d130      	bne.n	8002b74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	2203      	movs	r2, #3
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	43db      	mvns	r3, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4013      	ands	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b48:	2201      	movs	r2, #1
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4013      	ands	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	091b      	lsrs	r3, r3, #4
 8002b5e:	f003 0201 	and.w	r2, r3, #1
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 0303 	and.w	r3, r3, #3
 8002b7c:	2b03      	cmp	r3, #3
 8002b7e:	d017      	beq.n	8002bb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	2203      	movs	r2, #3
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4013      	ands	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f003 0303 	and.w	r3, r3, #3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d123      	bne.n	8002c04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	08da      	lsrs	r2, r3, #3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3208      	adds	r2, #8
 8002bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	220f      	movs	r2, #15
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	691a      	ldr	r2, [r3, #16]
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	08da      	lsrs	r2, r3, #3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	3208      	adds	r2, #8
 8002bfe:	69b9      	ldr	r1, [r7, #24]
 8002c00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	2203      	movs	r2, #3
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	43db      	mvns	r3, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 0203 	and.w	r2, r3, #3
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 80a2 	beq.w	8002d8a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	4b57      	ldr	r3, [pc, #348]	; (8002da8 <HAL_GPIO_Init+0x2e8>)
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4e:	4a56      	ldr	r2, [pc, #344]	; (8002da8 <HAL_GPIO_Init+0x2e8>)
 8002c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c54:	6453      	str	r3, [r2, #68]	; 0x44
 8002c56:	4b54      	ldr	r3, [pc, #336]	; (8002da8 <HAL_GPIO_Init+0x2e8>)
 8002c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c62:	4a52      	ldr	r2, [pc, #328]	; (8002dac <HAL_GPIO_Init+0x2ec>)
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	089b      	lsrs	r3, r3, #2
 8002c68:	3302      	adds	r3, #2
 8002c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	220f      	movs	r2, #15
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4013      	ands	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a49      	ldr	r2, [pc, #292]	; (8002db0 <HAL_GPIO_Init+0x2f0>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d019      	beq.n	8002cc2 <HAL_GPIO_Init+0x202>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a48      	ldr	r2, [pc, #288]	; (8002db4 <HAL_GPIO_Init+0x2f4>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d013      	beq.n	8002cbe <HAL_GPIO_Init+0x1fe>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a47      	ldr	r2, [pc, #284]	; (8002db8 <HAL_GPIO_Init+0x2f8>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d00d      	beq.n	8002cba <HAL_GPIO_Init+0x1fa>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a46      	ldr	r2, [pc, #280]	; (8002dbc <HAL_GPIO_Init+0x2fc>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d007      	beq.n	8002cb6 <HAL_GPIO_Init+0x1f6>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a45      	ldr	r2, [pc, #276]	; (8002dc0 <HAL_GPIO_Init+0x300>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d101      	bne.n	8002cb2 <HAL_GPIO_Init+0x1f2>
 8002cae:	2304      	movs	r3, #4
 8002cb0:	e008      	b.n	8002cc4 <HAL_GPIO_Init+0x204>
 8002cb2:	2307      	movs	r3, #7
 8002cb4:	e006      	b.n	8002cc4 <HAL_GPIO_Init+0x204>
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e004      	b.n	8002cc4 <HAL_GPIO_Init+0x204>
 8002cba:	2302      	movs	r3, #2
 8002cbc:	e002      	b.n	8002cc4 <HAL_GPIO_Init+0x204>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <HAL_GPIO_Init+0x204>
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	69fa      	ldr	r2, [r7, #28]
 8002cc6:	f002 0203 	and.w	r2, r2, #3
 8002cca:	0092      	lsls	r2, r2, #2
 8002ccc:	4093      	lsls	r3, r2
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cd4:	4935      	ldr	r1, [pc, #212]	; (8002dac <HAL_GPIO_Init+0x2ec>)
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	089b      	lsrs	r3, r3, #2
 8002cda:	3302      	adds	r3, #2
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ce2:	4b38      	ldr	r3, [pc, #224]	; (8002dc4 <HAL_GPIO_Init+0x304>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	43db      	mvns	r3, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d06:	4a2f      	ldr	r2, [pc, #188]	; (8002dc4 <HAL_GPIO_Init+0x304>)
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d0c:	4b2d      	ldr	r3, [pc, #180]	; (8002dc4 <HAL_GPIO_Init+0x304>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	43db      	mvns	r3, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d30:	4a24      	ldr	r2, [pc, #144]	; (8002dc4 <HAL_GPIO_Init+0x304>)
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d36:	4b23      	ldr	r3, [pc, #140]	; (8002dc4 <HAL_GPIO_Init+0x304>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4013      	ands	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d5a:	4a1a      	ldr	r2, [pc, #104]	; (8002dc4 <HAL_GPIO_Init+0x304>)
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d60:	4b18      	ldr	r3, [pc, #96]	; (8002dc4 <HAL_GPIO_Init+0x304>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d84:	4a0f      	ldr	r2, [pc, #60]	; (8002dc4 <HAL_GPIO_Init+0x304>)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	61fb      	str	r3, [r7, #28]
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	2b0f      	cmp	r3, #15
 8002d94:	f67f aea2 	bls.w	8002adc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d98:	bf00      	nop
 8002d9a:	bf00      	nop
 8002d9c:	3724      	adds	r7, #36	; 0x24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	40023800 	.word	0x40023800
 8002dac:	40013800 	.word	0x40013800
 8002db0:	40020000 	.word	0x40020000
 8002db4:	40020400 	.word	0x40020400
 8002db8:	40020800 	.word	0x40020800
 8002dbc:	40020c00 	.word	0x40020c00
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	40013c00 	.word	0x40013c00

08002dc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	691a      	ldr	r2, [r3, #16]
 8002dd8:	887b      	ldrh	r3, [r7, #2]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d002      	beq.n	8002de6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002de0:	2301      	movs	r3, #1
 8002de2:	73fb      	strb	r3, [r7, #15]
 8002de4:	e001      	b.n	8002dea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002de6:	2300      	movs	r3, #0
 8002de8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	460b      	mov	r3, r1
 8002e02:	807b      	strh	r3, [r7, #2]
 8002e04:	4613      	mov	r3, r2
 8002e06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e08:	787b      	ldrb	r3, [r7, #1]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e0e:	887a      	ldrh	r2, [r7, #2]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e14:	e003      	b.n	8002e1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e16:	887b      	ldrh	r3, [r7, #2]
 8002e18:	041a      	lsls	r2, r3, #16
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	619a      	str	r2, [r3, #24]
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b085      	sub	sp, #20
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
 8002e32:	460b      	mov	r3, r1
 8002e34:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e3c:	887a      	ldrh	r2, [r7, #2]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	4013      	ands	r3, r2
 8002e42:	041a      	lsls	r2, r3, #16
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	43d9      	mvns	r1, r3
 8002e48:	887b      	ldrh	r3, [r7, #2]
 8002e4a:	400b      	ands	r3, r1
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	619a      	str	r2, [r3, #24]
}
 8002e52:	bf00      	nop
 8002e54:	3714      	adds	r7, #20
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
	...

08002e60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e267      	b.n	8003342 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d075      	beq.n	8002f6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e7e:	4b88      	ldr	r3, [pc, #544]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 030c 	and.w	r3, r3, #12
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	d00c      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e8a:	4b85      	ldr	r3, [pc, #532]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e92:	2b08      	cmp	r3, #8
 8002e94:	d112      	bne.n	8002ebc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e96:	4b82      	ldr	r3, [pc, #520]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ea2:	d10b      	bne.n	8002ebc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea4:	4b7e      	ldr	r3, [pc, #504]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d05b      	beq.n	8002f68 <HAL_RCC_OscConfig+0x108>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d157      	bne.n	8002f68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e242      	b.n	8003342 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ec4:	d106      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x74>
 8002ec6:	4b76      	ldr	r3, [pc, #472]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a75      	ldr	r2, [pc, #468]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	e01d      	b.n	8002f10 <HAL_RCC_OscConfig+0xb0>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002edc:	d10c      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x98>
 8002ede:	4b70      	ldr	r3, [pc, #448]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a6f      	ldr	r2, [pc, #444]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	4b6d      	ldr	r3, [pc, #436]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a6c      	ldr	r2, [pc, #432]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	e00b      	b.n	8002f10 <HAL_RCC_OscConfig+0xb0>
 8002ef8:	4b69      	ldr	r3, [pc, #420]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a68      	ldr	r2, [pc, #416]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f02:	6013      	str	r3, [r2, #0]
 8002f04:	4b66      	ldr	r3, [pc, #408]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a65      	ldr	r2, [pc, #404]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d013      	beq.n	8002f40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f18:	f7ff f80c 	bl	8001f34 <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f20:	f7ff f808 	bl	8001f34 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b64      	cmp	r3, #100	; 0x64
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e207      	b.n	8003342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f32:	4b5b      	ldr	r3, [pc, #364]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d0f0      	beq.n	8002f20 <HAL_RCC_OscConfig+0xc0>
 8002f3e:	e014      	b.n	8002f6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f40:	f7fe fff8 	bl	8001f34 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f48:	f7fe fff4 	bl	8001f34 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b64      	cmp	r3, #100	; 0x64
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e1f3      	b.n	8003342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f5a:	4b51      	ldr	r3, [pc, #324]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f0      	bne.n	8002f48 <HAL_RCC_OscConfig+0xe8>
 8002f66:	e000      	b.n	8002f6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d063      	beq.n	800303e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f76:	4b4a      	ldr	r3, [pc, #296]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 030c 	and.w	r3, r3, #12
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00b      	beq.n	8002f9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f82:	4b47      	ldr	r3, [pc, #284]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f8a:	2b08      	cmp	r3, #8
 8002f8c:	d11c      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f8e:	4b44      	ldr	r3, [pc, #272]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d116      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f9a:	4b41      	ldr	r3, [pc, #260]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d005      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x152>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d001      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e1c7      	b.n	8003342 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb2:	4b3b      	ldr	r3, [pc, #236]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	4937      	ldr	r1, [pc, #220]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fc6:	e03a      	b.n	800303e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d020      	beq.n	8003012 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fd0:	4b34      	ldr	r3, [pc, #208]	; (80030a4 <HAL_RCC_OscConfig+0x244>)
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd6:	f7fe ffad 	bl	8001f34 <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fde:	f7fe ffa9 	bl	8001f34 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e1a8      	b.n	8003342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff0:	4b2b      	ldr	r3, [pc, #172]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d0f0      	beq.n	8002fde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ffc:	4b28      	ldr	r3, [pc, #160]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	4925      	ldr	r1, [pc, #148]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 800300c:	4313      	orrs	r3, r2
 800300e:	600b      	str	r3, [r1, #0]
 8003010:	e015      	b.n	800303e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003012:	4b24      	ldr	r3, [pc, #144]	; (80030a4 <HAL_RCC_OscConfig+0x244>)
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003018:	f7fe ff8c 	bl	8001f34 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003020:	f7fe ff88 	bl	8001f34 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e187      	b.n	8003342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003032:	4b1b      	ldr	r3, [pc, #108]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1f0      	bne.n	8003020 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0308 	and.w	r3, r3, #8
 8003046:	2b00      	cmp	r3, #0
 8003048:	d036      	beq.n	80030b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d016      	beq.n	8003080 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003052:	4b15      	ldr	r3, [pc, #84]	; (80030a8 <HAL_RCC_OscConfig+0x248>)
 8003054:	2201      	movs	r2, #1
 8003056:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003058:	f7fe ff6c 	bl	8001f34 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003060:	f7fe ff68 	bl	8001f34 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e167      	b.n	8003342 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003072:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8003074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d0f0      	beq.n	8003060 <HAL_RCC_OscConfig+0x200>
 800307e:	e01b      	b.n	80030b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003080:	4b09      	ldr	r3, [pc, #36]	; (80030a8 <HAL_RCC_OscConfig+0x248>)
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003086:	f7fe ff55 	bl	8001f34 <HAL_GetTick>
 800308a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800308c:	e00e      	b.n	80030ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800308e:	f7fe ff51 	bl	8001f34 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d907      	bls.n	80030ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e150      	b.n	8003342 <HAL_RCC_OscConfig+0x4e2>
 80030a0:	40023800 	.word	0x40023800
 80030a4:	42470000 	.word	0x42470000
 80030a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ac:	4b88      	ldr	r3, [pc, #544]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 80030ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1ea      	bne.n	800308e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 8097 	beq.w	80031f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030c6:	2300      	movs	r3, #0
 80030c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ca:	4b81      	ldr	r3, [pc, #516]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10f      	bne.n	80030f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030d6:	2300      	movs	r3, #0
 80030d8:	60bb      	str	r3, [r7, #8]
 80030da:	4b7d      	ldr	r3, [pc, #500]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	4a7c      	ldr	r2, [pc, #496]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 80030e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e4:	6413      	str	r3, [r2, #64]	; 0x40
 80030e6:	4b7a      	ldr	r3, [pc, #488]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ee:	60bb      	str	r3, [r7, #8]
 80030f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030f2:	2301      	movs	r3, #1
 80030f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f6:	4b77      	ldr	r3, [pc, #476]	; (80032d4 <HAL_RCC_OscConfig+0x474>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d118      	bne.n	8003134 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003102:	4b74      	ldr	r3, [pc, #464]	; (80032d4 <HAL_RCC_OscConfig+0x474>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a73      	ldr	r2, [pc, #460]	; (80032d4 <HAL_RCC_OscConfig+0x474>)
 8003108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800310c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800310e:	f7fe ff11 	bl	8001f34 <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003114:	e008      	b.n	8003128 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003116:	f7fe ff0d 	bl	8001f34 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e10c      	b.n	8003342 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003128:	4b6a      	ldr	r3, [pc, #424]	; (80032d4 <HAL_RCC_OscConfig+0x474>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003130:	2b00      	cmp	r3, #0
 8003132:	d0f0      	beq.n	8003116 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d106      	bne.n	800314a <HAL_RCC_OscConfig+0x2ea>
 800313c:	4b64      	ldr	r3, [pc, #400]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 800313e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003140:	4a63      	ldr	r2, [pc, #396]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 8003142:	f043 0301 	orr.w	r3, r3, #1
 8003146:	6713      	str	r3, [r2, #112]	; 0x70
 8003148:	e01c      	b.n	8003184 <HAL_RCC_OscConfig+0x324>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	2b05      	cmp	r3, #5
 8003150:	d10c      	bne.n	800316c <HAL_RCC_OscConfig+0x30c>
 8003152:	4b5f      	ldr	r3, [pc, #380]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 8003154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003156:	4a5e      	ldr	r2, [pc, #376]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 8003158:	f043 0304 	orr.w	r3, r3, #4
 800315c:	6713      	str	r3, [r2, #112]	; 0x70
 800315e:	4b5c      	ldr	r3, [pc, #368]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 8003160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003162:	4a5b      	ldr	r2, [pc, #364]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 8003164:	f043 0301 	orr.w	r3, r3, #1
 8003168:	6713      	str	r3, [r2, #112]	; 0x70
 800316a:	e00b      	b.n	8003184 <HAL_RCC_OscConfig+0x324>
 800316c:	4b58      	ldr	r3, [pc, #352]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 800316e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003170:	4a57      	ldr	r2, [pc, #348]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 8003172:	f023 0301 	bic.w	r3, r3, #1
 8003176:	6713      	str	r3, [r2, #112]	; 0x70
 8003178:	4b55      	ldr	r3, [pc, #340]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 800317a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317c:	4a54      	ldr	r2, [pc, #336]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 800317e:	f023 0304 	bic.w	r3, r3, #4
 8003182:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d015      	beq.n	80031b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800318c:	f7fe fed2 	bl	8001f34 <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003192:	e00a      	b.n	80031aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003194:	f7fe fece 	bl	8001f34 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e0cb      	b.n	8003342 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031aa:	4b49      	ldr	r3, [pc, #292]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 80031ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0ee      	beq.n	8003194 <HAL_RCC_OscConfig+0x334>
 80031b6:	e014      	b.n	80031e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b8:	f7fe febc 	bl	8001f34 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031be:	e00a      	b.n	80031d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031c0:	f7fe feb8 	bl	8001f34 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e0b5      	b.n	8003342 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031d6:	4b3e      	ldr	r3, [pc, #248]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 80031d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1ee      	bne.n	80031c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031e2:	7dfb      	ldrb	r3, [r7, #23]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d105      	bne.n	80031f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031e8:	4b39      	ldr	r3, [pc, #228]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 80031ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ec:	4a38      	ldr	r2, [pc, #224]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 80031ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 80a1 	beq.w	8003340 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031fe:	4b34      	ldr	r3, [pc, #208]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 030c 	and.w	r3, r3, #12
 8003206:	2b08      	cmp	r3, #8
 8003208:	d05c      	beq.n	80032c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	2b02      	cmp	r3, #2
 8003210:	d141      	bne.n	8003296 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003212:	4b31      	ldr	r3, [pc, #196]	; (80032d8 <HAL_RCC_OscConfig+0x478>)
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003218:	f7fe fe8c 	bl	8001f34 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003220:	f7fe fe88 	bl	8001f34 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e087      	b.n	8003342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003232:	4b27      	ldr	r3, [pc, #156]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f0      	bne.n	8003220 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69da      	ldr	r2, [r3, #28]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	019b      	lsls	r3, r3, #6
 800324e:	431a      	orrs	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003254:	085b      	lsrs	r3, r3, #1
 8003256:	3b01      	subs	r3, #1
 8003258:	041b      	lsls	r3, r3, #16
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003260:	061b      	lsls	r3, r3, #24
 8003262:	491b      	ldr	r1, [pc, #108]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 8003264:	4313      	orrs	r3, r2
 8003266:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003268:	4b1b      	ldr	r3, [pc, #108]	; (80032d8 <HAL_RCC_OscConfig+0x478>)
 800326a:	2201      	movs	r2, #1
 800326c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326e:	f7fe fe61 	bl	8001f34 <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003274:	e008      	b.n	8003288 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003276:	f7fe fe5d 	bl	8001f34 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e05c      	b.n	8003342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003288:	4b11      	ldr	r3, [pc, #68]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0f0      	beq.n	8003276 <HAL_RCC_OscConfig+0x416>
 8003294:	e054      	b.n	8003340 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003296:	4b10      	ldr	r3, [pc, #64]	; (80032d8 <HAL_RCC_OscConfig+0x478>)
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329c:	f7fe fe4a 	bl	8001f34 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a4:	f7fe fe46 	bl	8001f34 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e045      	b.n	8003342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b6:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f0      	bne.n	80032a4 <HAL_RCC_OscConfig+0x444>
 80032c2:	e03d      	b.n	8003340 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d107      	bne.n	80032dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e038      	b.n	8003342 <HAL_RCC_OscConfig+0x4e2>
 80032d0:	40023800 	.word	0x40023800
 80032d4:	40007000 	.word	0x40007000
 80032d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032dc:	4b1b      	ldr	r3, [pc, #108]	; (800334c <HAL_RCC_OscConfig+0x4ec>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d028      	beq.n	800333c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d121      	bne.n	800333c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003302:	429a      	cmp	r2, r3
 8003304:	d11a      	bne.n	800333c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800330c:	4013      	ands	r3, r2
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003312:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003314:	4293      	cmp	r3, r2
 8003316:	d111      	bne.n	800333c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003322:	085b      	lsrs	r3, r3, #1
 8003324:	3b01      	subs	r3, #1
 8003326:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003328:	429a      	cmp	r2, r3
 800332a:	d107      	bne.n	800333c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003336:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003338:	429a      	cmp	r2, r3
 800333a:	d001      	beq.n	8003340 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e000      	b.n	8003342 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3718      	adds	r7, #24
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40023800 	.word	0x40023800

08003350 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d101      	bne.n	8003364 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e0cc      	b.n	80034fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003364:	4b68      	ldr	r3, [pc, #416]	; (8003508 <HAL_RCC_ClockConfig+0x1b8>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	429a      	cmp	r2, r3
 8003370:	d90c      	bls.n	800338c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003372:	4b65      	ldr	r3, [pc, #404]	; (8003508 <HAL_RCC_ClockConfig+0x1b8>)
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800337a:	4b63      	ldr	r3, [pc, #396]	; (8003508 <HAL_RCC_ClockConfig+0x1b8>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	429a      	cmp	r2, r3
 8003386:	d001      	beq.n	800338c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e0b8      	b.n	80034fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d020      	beq.n	80033da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d005      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033a4:	4b59      	ldr	r3, [pc, #356]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	4a58      	ldr	r2, [pc, #352]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0308 	and.w	r3, r3, #8
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d005      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033bc:	4b53      	ldr	r3, [pc, #332]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	4a52      	ldr	r2, [pc, #328]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80033c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033c8:	4b50      	ldr	r3, [pc, #320]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	494d      	ldr	r1, [pc, #308]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d044      	beq.n	8003470 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d107      	bne.n	80033fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ee:	4b47      	ldr	r3, [pc, #284]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d119      	bne.n	800342e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e07f      	b.n	80034fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b02      	cmp	r3, #2
 8003404:	d003      	beq.n	800340e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800340a:	2b03      	cmp	r3, #3
 800340c:	d107      	bne.n	800341e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800340e:	4b3f      	ldr	r3, [pc, #252]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d109      	bne.n	800342e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e06f      	b.n	80034fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800341e:	4b3b      	ldr	r3, [pc, #236]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e067      	b.n	80034fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800342e:	4b37      	ldr	r3, [pc, #220]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f023 0203 	bic.w	r2, r3, #3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	4934      	ldr	r1, [pc, #208]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 800343c:	4313      	orrs	r3, r2
 800343e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003440:	f7fe fd78 	bl	8001f34 <HAL_GetTick>
 8003444:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003446:	e00a      	b.n	800345e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003448:	f7fe fd74 	bl	8001f34 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	f241 3288 	movw	r2, #5000	; 0x1388
 8003456:	4293      	cmp	r3, r2
 8003458:	d901      	bls.n	800345e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e04f      	b.n	80034fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800345e:	4b2b      	ldr	r3, [pc, #172]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 020c 	and.w	r2, r3, #12
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	429a      	cmp	r2, r3
 800346e:	d1eb      	bne.n	8003448 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003470:	4b25      	ldr	r3, [pc, #148]	; (8003508 <HAL_RCC_ClockConfig+0x1b8>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	429a      	cmp	r2, r3
 800347c:	d20c      	bcs.n	8003498 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347e:	4b22      	ldr	r3, [pc, #136]	; (8003508 <HAL_RCC_ClockConfig+0x1b8>)
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003486:	4b20      	ldr	r3, [pc, #128]	; (8003508 <HAL_RCC_ClockConfig+0x1b8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0307 	and.w	r3, r3, #7
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	429a      	cmp	r2, r3
 8003492:	d001      	beq.n	8003498 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e032      	b.n	80034fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d008      	beq.n	80034b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034a4:	4b19      	ldr	r3, [pc, #100]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	4916      	ldr	r1, [pc, #88]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d009      	beq.n	80034d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034c2:	4b12      	ldr	r3, [pc, #72]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	490e      	ldr	r1, [pc, #56]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034d6:	f000 f821 	bl	800351c <HAL_RCC_GetSysClockFreq>
 80034da:	4602      	mov	r2, r0
 80034dc:	4b0b      	ldr	r3, [pc, #44]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	091b      	lsrs	r3, r3, #4
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	490a      	ldr	r1, [pc, #40]	; (8003510 <HAL_RCC_ClockConfig+0x1c0>)
 80034e8:	5ccb      	ldrb	r3, [r1, r3]
 80034ea:	fa22 f303 	lsr.w	r3, r2, r3
 80034ee:	4a09      	ldr	r2, [pc, #36]	; (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 80034f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034f2:	4b09      	ldr	r3, [pc, #36]	; (8003518 <HAL_RCC_ClockConfig+0x1c8>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fe fcd8 	bl	8001eac <HAL_InitTick>

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	40023c00 	.word	0x40023c00
 800350c:	40023800 	.word	0x40023800
 8003510:	08007ce8 	.word	0x08007ce8
 8003514:	20000004 	.word	0x20000004
 8003518:	20000008 	.word	0x20000008

0800351c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800351c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003520:	b094      	sub	sp, #80	; 0x50
 8003522:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	647b      	str	r3, [r7, #68]	; 0x44
 8003528:	2300      	movs	r3, #0
 800352a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800352c:	2300      	movs	r3, #0
 800352e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003530:	2300      	movs	r3, #0
 8003532:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003534:	4b79      	ldr	r3, [pc, #484]	; (800371c <HAL_RCC_GetSysClockFreq+0x200>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 030c 	and.w	r3, r3, #12
 800353c:	2b08      	cmp	r3, #8
 800353e:	d00d      	beq.n	800355c <HAL_RCC_GetSysClockFreq+0x40>
 8003540:	2b08      	cmp	r3, #8
 8003542:	f200 80e1 	bhi.w	8003708 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003546:	2b00      	cmp	r3, #0
 8003548:	d002      	beq.n	8003550 <HAL_RCC_GetSysClockFreq+0x34>
 800354a:	2b04      	cmp	r3, #4
 800354c:	d003      	beq.n	8003556 <HAL_RCC_GetSysClockFreq+0x3a>
 800354e:	e0db      	b.n	8003708 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003550:	4b73      	ldr	r3, [pc, #460]	; (8003720 <HAL_RCC_GetSysClockFreq+0x204>)
 8003552:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003554:	e0db      	b.n	800370e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003556:	4b73      	ldr	r3, [pc, #460]	; (8003724 <HAL_RCC_GetSysClockFreq+0x208>)
 8003558:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800355a:	e0d8      	b.n	800370e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800355c:	4b6f      	ldr	r3, [pc, #444]	; (800371c <HAL_RCC_GetSysClockFreq+0x200>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003564:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003566:	4b6d      	ldr	r3, [pc, #436]	; (800371c <HAL_RCC_GetSysClockFreq+0x200>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d063      	beq.n	800363a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003572:	4b6a      	ldr	r3, [pc, #424]	; (800371c <HAL_RCC_GetSysClockFreq+0x200>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	099b      	lsrs	r3, r3, #6
 8003578:	2200      	movs	r2, #0
 800357a:	63bb      	str	r3, [r7, #56]	; 0x38
 800357c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800357e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003584:	633b      	str	r3, [r7, #48]	; 0x30
 8003586:	2300      	movs	r3, #0
 8003588:	637b      	str	r3, [r7, #52]	; 0x34
 800358a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800358e:	4622      	mov	r2, r4
 8003590:	462b      	mov	r3, r5
 8003592:	f04f 0000 	mov.w	r0, #0
 8003596:	f04f 0100 	mov.w	r1, #0
 800359a:	0159      	lsls	r1, r3, #5
 800359c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035a0:	0150      	lsls	r0, r2, #5
 80035a2:	4602      	mov	r2, r0
 80035a4:	460b      	mov	r3, r1
 80035a6:	4621      	mov	r1, r4
 80035a8:	1a51      	subs	r1, r2, r1
 80035aa:	6139      	str	r1, [r7, #16]
 80035ac:	4629      	mov	r1, r5
 80035ae:	eb63 0301 	sbc.w	r3, r3, r1
 80035b2:	617b      	str	r3, [r7, #20]
 80035b4:	f04f 0200 	mov.w	r2, #0
 80035b8:	f04f 0300 	mov.w	r3, #0
 80035bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035c0:	4659      	mov	r1, fp
 80035c2:	018b      	lsls	r3, r1, #6
 80035c4:	4651      	mov	r1, sl
 80035c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035ca:	4651      	mov	r1, sl
 80035cc:	018a      	lsls	r2, r1, #6
 80035ce:	4651      	mov	r1, sl
 80035d0:	ebb2 0801 	subs.w	r8, r2, r1
 80035d4:	4659      	mov	r1, fp
 80035d6:	eb63 0901 	sbc.w	r9, r3, r1
 80035da:	f04f 0200 	mov.w	r2, #0
 80035de:	f04f 0300 	mov.w	r3, #0
 80035e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035ee:	4690      	mov	r8, r2
 80035f0:	4699      	mov	r9, r3
 80035f2:	4623      	mov	r3, r4
 80035f4:	eb18 0303 	adds.w	r3, r8, r3
 80035f8:	60bb      	str	r3, [r7, #8]
 80035fa:	462b      	mov	r3, r5
 80035fc:	eb49 0303 	adc.w	r3, r9, r3
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	f04f 0200 	mov.w	r2, #0
 8003606:	f04f 0300 	mov.w	r3, #0
 800360a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800360e:	4629      	mov	r1, r5
 8003610:	024b      	lsls	r3, r1, #9
 8003612:	4621      	mov	r1, r4
 8003614:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003618:	4621      	mov	r1, r4
 800361a:	024a      	lsls	r2, r1, #9
 800361c:	4610      	mov	r0, r2
 800361e:	4619      	mov	r1, r3
 8003620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003622:	2200      	movs	r2, #0
 8003624:	62bb      	str	r3, [r7, #40]	; 0x28
 8003626:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003628:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800362c:	f7fd fb34 	bl	8000c98 <__aeabi_uldivmod>
 8003630:	4602      	mov	r2, r0
 8003632:	460b      	mov	r3, r1
 8003634:	4613      	mov	r3, r2
 8003636:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003638:	e058      	b.n	80036ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800363a:	4b38      	ldr	r3, [pc, #224]	; (800371c <HAL_RCC_GetSysClockFreq+0x200>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	099b      	lsrs	r3, r3, #6
 8003640:	2200      	movs	r2, #0
 8003642:	4618      	mov	r0, r3
 8003644:	4611      	mov	r1, r2
 8003646:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800364a:	623b      	str	r3, [r7, #32]
 800364c:	2300      	movs	r3, #0
 800364e:	627b      	str	r3, [r7, #36]	; 0x24
 8003650:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003654:	4642      	mov	r2, r8
 8003656:	464b      	mov	r3, r9
 8003658:	f04f 0000 	mov.w	r0, #0
 800365c:	f04f 0100 	mov.w	r1, #0
 8003660:	0159      	lsls	r1, r3, #5
 8003662:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003666:	0150      	lsls	r0, r2, #5
 8003668:	4602      	mov	r2, r0
 800366a:	460b      	mov	r3, r1
 800366c:	4641      	mov	r1, r8
 800366e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003672:	4649      	mov	r1, r9
 8003674:	eb63 0b01 	sbc.w	fp, r3, r1
 8003678:	f04f 0200 	mov.w	r2, #0
 800367c:	f04f 0300 	mov.w	r3, #0
 8003680:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003684:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003688:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800368c:	ebb2 040a 	subs.w	r4, r2, sl
 8003690:	eb63 050b 	sbc.w	r5, r3, fp
 8003694:	f04f 0200 	mov.w	r2, #0
 8003698:	f04f 0300 	mov.w	r3, #0
 800369c:	00eb      	lsls	r3, r5, #3
 800369e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036a2:	00e2      	lsls	r2, r4, #3
 80036a4:	4614      	mov	r4, r2
 80036a6:	461d      	mov	r5, r3
 80036a8:	4643      	mov	r3, r8
 80036aa:	18e3      	adds	r3, r4, r3
 80036ac:	603b      	str	r3, [r7, #0]
 80036ae:	464b      	mov	r3, r9
 80036b0:	eb45 0303 	adc.w	r3, r5, r3
 80036b4:	607b      	str	r3, [r7, #4]
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	f04f 0300 	mov.w	r3, #0
 80036be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036c2:	4629      	mov	r1, r5
 80036c4:	028b      	lsls	r3, r1, #10
 80036c6:	4621      	mov	r1, r4
 80036c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036cc:	4621      	mov	r1, r4
 80036ce:	028a      	lsls	r2, r1, #10
 80036d0:	4610      	mov	r0, r2
 80036d2:	4619      	mov	r1, r3
 80036d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036d6:	2200      	movs	r2, #0
 80036d8:	61bb      	str	r3, [r7, #24]
 80036da:	61fa      	str	r2, [r7, #28]
 80036dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036e0:	f7fd fada 	bl	8000c98 <__aeabi_uldivmod>
 80036e4:	4602      	mov	r2, r0
 80036e6:	460b      	mov	r3, r1
 80036e8:	4613      	mov	r3, r2
 80036ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036ec:	4b0b      	ldr	r3, [pc, #44]	; (800371c <HAL_RCC_GetSysClockFreq+0x200>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	0c1b      	lsrs	r3, r3, #16
 80036f2:	f003 0303 	and.w	r3, r3, #3
 80036f6:	3301      	adds	r3, #1
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80036fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003700:	fbb2 f3f3 	udiv	r3, r2, r3
 8003704:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003706:	e002      	b.n	800370e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003708:	4b05      	ldr	r3, [pc, #20]	; (8003720 <HAL_RCC_GetSysClockFreq+0x204>)
 800370a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800370c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800370e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003710:	4618      	mov	r0, r3
 8003712:	3750      	adds	r7, #80	; 0x50
 8003714:	46bd      	mov	sp, r7
 8003716:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800371a:	bf00      	nop
 800371c:	40023800 	.word	0x40023800
 8003720:	00f42400 	.word	0x00f42400
 8003724:	007a1200 	.word	0x007a1200

08003728 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800372c:	4b03      	ldr	r3, [pc, #12]	; (800373c <HAL_RCC_GetHCLKFreq+0x14>)
 800372e:	681b      	ldr	r3, [r3, #0]
}
 8003730:	4618      	mov	r0, r3
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	20000004 	.word	0x20000004

08003740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003744:	f7ff fff0 	bl	8003728 <HAL_RCC_GetHCLKFreq>
 8003748:	4602      	mov	r2, r0
 800374a:	4b05      	ldr	r3, [pc, #20]	; (8003760 <HAL_RCC_GetPCLK1Freq+0x20>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	0a9b      	lsrs	r3, r3, #10
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	4903      	ldr	r1, [pc, #12]	; (8003764 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003756:	5ccb      	ldrb	r3, [r1, r3]
 8003758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800375c:	4618      	mov	r0, r3
 800375e:	bd80      	pop	{r7, pc}
 8003760:	40023800 	.word	0x40023800
 8003764:	08007cf8 	.word	0x08007cf8

08003768 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800376c:	f7ff ffdc 	bl	8003728 <HAL_RCC_GetHCLKFreq>
 8003770:	4602      	mov	r2, r0
 8003772:	4b05      	ldr	r3, [pc, #20]	; (8003788 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	0b5b      	lsrs	r3, r3, #13
 8003778:	f003 0307 	and.w	r3, r3, #7
 800377c:	4903      	ldr	r1, [pc, #12]	; (800378c <HAL_RCC_GetPCLK2Freq+0x24>)
 800377e:	5ccb      	ldrb	r3, [r1, r3]
 8003780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003784:	4618      	mov	r0, r3
 8003786:	bd80      	pop	{r7, pc}
 8003788:	40023800 	.word	0x40023800
 800378c:	08007cf8 	.word	0x08007cf8

08003790 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e041      	b.n	8003826 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d106      	bne.n	80037bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7fe f97a 	bl	8001ab0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2202      	movs	r2, #2
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3304      	adds	r3, #4
 80037cc:	4619      	mov	r1, r3
 80037ce:	4610      	mov	r0, r2
 80037d0:	f000 f950 	bl	8003a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
	...

08003830 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b01      	cmp	r3, #1
 8003842:	d001      	beq.n	8003848 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e03c      	b.n	80038c2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2202      	movs	r2, #2
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a1e      	ldr	r2, [pc, #120]	; (80038d0 <HAL_TIM_Base_Start+0xa0>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d018      	beq.n	800388c <HAL_TIM_Base_Start+0x5c>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003862:	d013      	beq.n	800388c <HAL_TIM_Base_Start+0x5c>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a1a      	ldr	r2, [pc, #104]	; (80038d4 <HAL_TIM_Base_Start+0xa4>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d00e      	beq.n	800388c <HAL_TIM_Base_Start+0x5c>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a19      	ldr	r2, [pc, #100]	; (80038d8 <HAL_TIM_Base_Start+0xa8>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d009      	beq.n	800388c <HAL_TIM_Base_Start+0x5c>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a17      	ldr	r2, [pc, #92]	; (80038dc <HAL_TIM_Base_Start+0xac>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d004      	beq.n	800388c <HAL_TIM_Base_Start+0x5c>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a16      	ldr	r2, [pc, #88]	; (80038e0 <HAL_TIM_Base_Start+0xb0>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d111      	bne.n	80038b0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2b06      	cmp	r3, #6
 800389c:	d010      	beq.n	80038c0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f042 0201 	orr.w	r2, r2, #1
 80038ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ae:	e007      	b.n	80038c0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0201 	orr.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3714      	adds	r7, #20
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	40010000 	.word	0x40010000
 80038d4:	40000400 	.word	0x40000400
 80038d8:	40000800 	.word	0x40000800
 80038dc:	40000c00 	.word	0x40000c00
 80038e0:	40014000 	.word	0x40014000

080038e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ee:	2300      	movs	r3, #0
 80038f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d101      	bne.n	8003900 <HAL_TIM_ConfigClockSource+0x1c>
 80038fc:	2302      	movs	r3, #2
 80038fe:	e0b4      	b.n	8003a6a <HAL_TIM_ConfigClockSource+0x186>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2202      	movs	r2, #2
 800390c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800391e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003926:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003938:	d03e      	beq.n	80039b8 <HAL_TIM_ConfigClockSource+0xd4>
 800393a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800393e:	f200 8087 	bhi.w	8003a50 <HAL_TIM_ConfigClockSource+0x16c>
 8003942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003946:	f000 8086 	beq.w	8003a56 <HAL_TIM_ConfigClockSource+0x172>
 800394a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800394e:	d87f      	bhi.n	8003a50 <HAL_TIM_ConfigClockSource+0x16c>
 8003950:	2b70      	cmp	r3, #112	; 0x70
 8003952:	d01a      	beq.n	800398a <HAL_TIM_ConfigClockSource+0xa6>
 8003954:	2b70      	cmp	r3, #112	; 0x70
 8003956:	d87b      	bhi.n	8003a50 <HAL_TIM_ConfigClockSource+0x16c>
 8003958:	2b60      	cmp	r3, #96	; 0x60
 800395a:	d050      	beq.n	80039fe <HAL_TIM_ConfigClockSource+0x11a>
 800395c:	2b60      	cmp	r3, #96	; 0x60
 800395e:	d877      	bhi.n	8003a50 <HAL_TIM_ConfigClockSource+0x16c>
 8003960:	2b50      	cmp	r3, #80	; 0x50
 8003962:	d03c      	beq.n	80039de <HAL_TIM_ConfigClockSource+0xfa>
 8003964:	2b50      	cmp	r3, #80	; 0x50
 8003966:	d873      	bhi.n	8003a50 <HAL_TIM_ConfigClockSource+0x16c>
 8003968:	2b40      	cmp	r3, #64	; 0x40
 800396a:	d058      	beq.n	8003a1e <HAL_TIM_ConfigClockSource+0x13a>
 800396c:	2b40      	cmp	r3, #64	; 0x40
 800396e:	d86f      	bhi.n	8003a50 <HAL_TIM_ConfigClockSource+0x16c>
 8003970:	2b30      	cmp	r3, #48	; 0x30
 8003972:	d064      	beq.n	8003a3e <HAL_TIM_ConfigClockSource+0x15a>
 8003974:	2b30      	cmp	r3, #48	; 0x30
 8003976:	d86b      	bhi.n	8003a50 <HAL_TIM_ConfigClockSource+0x16c>
 8003978:	2b20      	cmp	r3, #32
 800397a:	d060      	beq.n	8003a3e <HAL_TIM_ConfigClockSource+0x15a>
 800397c:	2b20      	cmp	r3, #32
 800397e:	d867      	bhi.n	8003a50 <HAL_TIM_ConfigClockSource+0x16c>
 8003980:	2b00      	cmp	r3, #0
 8003982:	d05c      	beq.n	8003a3e <HAL_TIM_ConfigClockSource+0x15a>
 8003984:	2b10      	cmp	r3, #16
 8003986:	d05a      	beq.n	8003a3e <HAL_TIM_ConfigClockSource+0x15a>
 8003988:	e062      	b.n	8003a50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6818      	ldr	r0, [r3, #0]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	6899      	ldr	r1, [r3, #8]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f000 f965 	bl	8003c68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	609a      	str	r2, [r3, #8]
      break;
 80039b6:	e04f      	b.n	8003a58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6818      	ldr	r0, [r3, #0]
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	6899      	ldr	r1, [r3, #8]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	f000 f94e 	bl	8003c68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689a      	ldr	r2, [r3, #8]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039da:	609a      	str	r2, [r3, #8]
      break;
 80039dc:	e03c      	b.n	8003a58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6818      	ldr	r0, [r3, #0]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	6859      	ldr	r1, [r3, #4]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	461a      	mov	r2, r3
 80039ec:	f000 f8c2 	bl	8003b74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2150      	movs	r1, #80	; 0x50
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 f91b 	bl	8003c32 <TIM_ITRx_SetConfig>
      break;
 80039fc:	e02c      	b.n	8003a58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6818      	ldr	r0, [r3, #0]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	6859      	ldr	r1, [r3, #4]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	f000 f8e1 	bl	8003bd2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2160      	movs	r1, #96	; 0x60
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 f90b 	bl	8003c32 <TIM_ITRx_SetConfig>
      break;
 8003a1c:	e01c      	b.n	8003a58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6818      	ldr	r0, [r3, #0]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	6859      	ldr	r1, [r3, #4]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	f000 f8a2 	bl	8003b74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2140      	movs	r1, #64	; 0x40
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 f8fb 	bl	8003c32 <TIM_ITRx_SetConfig>
      break;
 8003a3c:	e00c      	b.n	8003a58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4619      	mov	r1, r3
 8003a48:	4610      	mov	r0, r2
 8003a4a:	f000 f8f2 	bl	8003c32 <TIM_ITRx_SetConfig>
      break;
 8003a4e:	e003      	b.n	8003a58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	73fb      	strb	r3, [r7, #15]
      break;
 8003a54:	e000      	b.n	8003a58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
	...

08003a74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a34      	ldr	r2, [pc, #208]	; (8003b58 <TIM_Base_SetConfig+0xe4>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d00f      	beq.n	8003aac <TIM_Base_SetConfig+0x38>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a92:	d00b      	beq.n	8003aac <TIM_Base_SetConfig+0x38>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a31      	ldr	r2, [pc, #196]	; (8003b5c <TIM_Base_SetConfig+0xe8>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d007      	beq.n	8003aac <TIM_Base_SetConfig+0x38>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a30      	ldr	r2, [pc, #192]	; (8003b60 <TIM_Base_SetConfig+0xec>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d003      	beq.n	8003aac <TIM_Base_SetConfig+0x38>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a2f      	ldr	r2, [pc, #188]	; (8003b64 <TIM_Base_SetConfig+0xf0>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d108      	bne.n	8003abe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a25      	ldr	r2, [pc, #148]	; (8003b58 <TIM_Base_SetConfig+0xe4>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d01b      	beq.n	8003afe <TIM_Base_SetConfig+0x8a>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003acc:	d017      	beq.n	8003afe <TIM_Base_SetConfig+0x8a>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a22      	ldr	r2, [pc, #136]	; (8003b5c <TIM_Base_SetConfig+0xe8>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d013      	beq.n	8003afe <TIM_Base_SetConfig+0x8a>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a21      	ldr	r2, [pc, #132]	; (8003b60 <TIM_Base_SetConfig+0xec>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d00f      	beq.n	8003afe <TIM_Base_SetConfig+0x8a>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a20      	ldr	r2, [pc, #128]	; (8003b64 <TIM_Base_SetConfig+0xf0>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d00b      	beq.n	8003afe <TIM_Base_SetConfig+0x8a>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a1f      	ldr	r2, [pc, #124]	; (8003b68 <TIM_Base_SetConfig+0xf4>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d007      	beq.n	8003afe <TIM_Base_SetConfig+0x8a>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a1e      	ldr	r2, [pc, #120]	; (8003b6c <TIM_Base_SetConfig+0xf8>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d003      	beq.n	8003afe <TIM_Base_SetConfig+0x8a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a1d      	ldr	r2, [pc, #116]	; (8003b70 <TIM_Base_SetConfig+0xfc>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d108      	bne.n	8003b10 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a08      	ldr	r2, [pc, #32]	; (8003b58 <TIM_Base_SetConfig+0xe4>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d103      	bne.n	8003b44 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	691a      	ldr	r2, [r3, #16]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	615a      	str	r2, [r3, #20]
}
 8003b4a:	bf00      	nop
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	40010000 	.word	0x40010000
 8003b5c:	40000400 	.word	0x40000400
 8003b60:	40000800 	.word	0x40000800
 8003b64:	40000c00 	.word	0x40000c00
 8003b68:	40014000 	.word	0x40014000
 8003b6c:	40014400 	.word	0x40014400
 8003b70:	40014800 	.word	0x40014800

08003b74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b087      	sub	sp, #28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	f023 0201 	bic.w	r2, r3, #1
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	011b      	lsls	r3, r3, #4
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f023 030a 	bic.w	r3, r3, #10
 8003bb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	621a      	str	r2, [r3, #32]
}
 8003bc6:	bf00      	nop
 8003bc8:	371c      	adds	r7, #28
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b087      	sub	sp, #28
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	60f8      	str	r0, [r7, #12]
 8003bda:	60b9      	str	r1, [r7, #8]
 8003bdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	f023 0210 	bic.w	r2, r3, #16
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bfc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	031b      	lsls	r3, r3, #12
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	011b      	lsls	r3, r3, #4
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	621a      	str	r2, [r3, #32]
}
 8003c26:	bf00      	nop
 8003c28:	371c      	adds	r7, #28
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b085      	sub	sp, #20
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
 8003c3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	f043 0307 	orr.w	r3, r3, #7
 8003c54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	609a      	str	r2, [r3, #8]
}
 8003c5c:	bf00      	nop
 8003c5e:	3714      	adds	r7, #20
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
 8003c74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	021a      	lsls	r2, r3, #8
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	609a      	str	r2, [r3, #8]
}
 8003c9c:	bf00      	nop
 8003c9e:	371c      	adds	r7, #28
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d101      	bne.n	8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	e050      	b.n	8003d62 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ce6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a1c      	ldr	r2, [pc, #112]	; (8003d70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d018      	beq.n	8003d36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d0c:	d013      	beq.n	8003d36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a18      	ldr	r2, [pc, #96]	; (8003d74 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d00e      	beq.n	8003d36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a16      	ldr	r2, [pc, #88]	; (8003d78 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d009      	beq.n	8003d36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a15      	ldr	r2, [pc, #84]	; (8003d7c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d004      	beq.n	8003d36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a13      	ldr	r2, [pc, #76]	; (8003d80 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d10c      	bne.n	8003d50 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3714      	adds	r7, #20
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	40010000 	.word	0x40010000
 8003d74:	40000400 	.word	0x40000400
 8003d78:	40000800 	.word	0x40000800
 8003d7c:	40000c00 	.word	0x40000c00
 8003d80:	40014000 	.word	0x40014000

08003d84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e03f      	b.n	8003e16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d106      	bne.n	8003db0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7fd fea2 	bl	8001af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2224      	movs	r2, #36	; 0x24
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 fddf 	bl	800498c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	691a      	ldr	r2, [r3, #16]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ddc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695a      	ldr	r2, [r3, #20]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68da      	ldr	r2, [r3, #12]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b08a      	sub	sp, #40	; 0x28
 8003e22:	af02      	add	r7, sp, #8
 8003e24:	60f8      	str	r0, [r7, #12]
 8003e26:	60b9      	str	r1, [r7, #8]
 8003e28:	603b      	str	r3, [r7, #0]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b20      	cmp	r3, #32
 8003e3c:	d17c      	bne.n	8003f38 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d002      	beq.n	8003e4a <HAL_UART_Transmit+0x2c>
 8003e44:	88fb      	ldrh	r3, [r7, #6]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e075      	b.n	8003f3a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d101      	bne.n	8003e5c <HAL_UART_Transmit+0x3e>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e06e      	b.n	8003f3a <HAL_UART_Transmit+0x11c>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2221      	movs	r2, #33	; 0x21
 8003e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e72:	f7fe f85f 	bl	8001f34 <HAL_GetTick>
 8003e76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	88fa      	ldrh	r2, [r7, #6]
 8003e7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	88fa      	ldrh	r2, [r7, #6]
 8003e82:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e8c:	d108      	bne.n	8003ea0 <HAL_UART_Transmit+0x82>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d104      	bne.n	8003ea0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003e96:	2300      	movs	r3, #0
 8003e98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	61bb      	str	r3, [r7, #24]
 8003e9e:	e003      	b.n	8003ea8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003eb0:	e02a      	b.n	8003f08 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	2180      	movs	r1, #128	; 0x80
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 fb1f 	bl	8004500 <UART_WaitOnFlagUntilTimeout>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e036      	b.n	8003f3a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10b      	bne.n	8003eea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ee0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	3302      	adds	r3, #2
 8003ee6:	61bb      	str	r3, [r7, #24]
 8003ee8:	e007      	b.n	8003efa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	781a      	ldrb	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	3b01      	subs	r3, #1
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1cf      	bne.n	8003eb2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	2140      	movs	r1, #64	; 0x40
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f000 faef 	bl	8004500 <UART_WaitOnFlagUntilTimeout>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e006      	b.n	8003f3a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f34:	2300      	movs	r3, #0
 8003f36:	e000      	b.n	8003f3a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003f38:	2302      	movs	r3, #2
  }
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3720      	adds	r7, #32
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b084      	sub	sp, #16
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	60f8      	str	r0, [r7, #12]
 8003f4a:	60b9      	str	r1, [r7, #8]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b20      	cmp	r3, #32
 8003f5a:	d11d      	bne.n	8003f98 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d002      	beq.n	8003f68 <HAL_UART_Receive_IT+0x26>
 8003f62:	88fb      	ldrh	r3, [r7, #6]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e016      	b.n	8003f9a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d101      	bne.n	8003f7a <HAL_UART_Receive_IT+0x38>
 8003f76:	2302      	movs	r3, #2
 8003f78:	e00f      	b.n	8003f9a <HAL_UART_Receive_IT+0x58>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003f88:	88fb      	ldrh	r3, [r7, #6]
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	68b9      	ldr	r1, [r7, #8]
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f000 fb24 	bl	80045dc <UART_Start_Receive_IT>
 8003f94:	4603      	mov	r3, r0
 8003f96:	e000      	b.n	8003f9a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003f98:	2302      	movs	r3, #2
  }
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
	...

08003fa4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b0ba      	sub	sp, #232	; 0xe8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003fe2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10f      	bne.n	800400a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fee:	f003 0320 	and.w	r3, r3, #32
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d009      	beq.n	800400a <HAL_UART_IRQHandler+0x66>
 8003ff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ffa:	f003 0320 	and.w	r3, r3, #32
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 fc07 	bl	8004816 <UART_Receive_IT>
      return;
 8004008:	e256      	b.n	80044b8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800400a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800400e:	2b00      	cmp	r3, #0
 8004010:	f000 80de 	beq.w	80041d0 <HAL_UART_IRQHandler+0x22c>
 8004014:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	2b00      	cmp	r3, #0
 800401e:	d106      	bne.n	800402e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004024:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 80d1 	beq.w	80041d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800402e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00b      	beq.n	8004052 <HAL_UART_IRQHandler+0xae>
 800403a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800403e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004042:	2b00      	cmp	r3, #0
 8004044:	d005      	beq.n	8004052 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	f043 0201 	orr.w	r2, r3, #1
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004056:	f003 0304 	and.w	r3, r3, #4
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00b      	beq.n	8004076 <HAL_UART_IRQHandler+0xd2>
 800405e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	d005      	beq.n	8004076 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	f043 0202 	orr.w	r2, r3, #2
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00b      	beq.n	800409a <HAL_UART_IRQHandler+0xf6>
 8004082:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d005      	beq.n	800409a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	f043 0204 	orr.w	r2, r3, #4
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800409a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800409e:	f003 0308 	and.w	r3, r3, #8
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d011      	beq.n	80040ca <HAL_UART_IRQHandler+0x126>
 80040a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040aa:	f003 0320 	and.w	r3, r3, #32
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d105      	bne.n	80040be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80040b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d005      	beq.n	80040ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	f043 0208 	orr.w	r2, r3, #8
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f000 81ed 	beq.w	80044ae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040d8:	f003 0320 	and.w	r3, r3, #32
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d008      	beq.n	80040f2 <HAL_UART_IRQHandler+0x14e>
 80040e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040e4:	f003 0320 	and.w	r3, r3, #32
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d002      	beq.n	80040f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 fb92 	bl	8004816 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fc:	2b40      	cmp	r3, #64	; 0x40
 80040fe:	bf0c      	ite	eq
 8004100:	2301      	moveq	r3, #1
 8004102:	2300      	movne	r3, #0
 8004104:	b2db      	uxtb	r3, r3
 8004106:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	2b00      	cmp	r3, #0
 8004114:	d103      	bne.n	800411e <HAL_UART_IRQHandler+0x17a>
 8004116:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800411a:	2b00      	cmp	r3, #0
 800411c:	d04f      	beq.n	80041be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 fa9a 	bl	8004658 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412e:	2b40      	cmp	r3, #64	; 0x40
 8004130:	d141      	bne.n	80041b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	3314      	adds	r3, #20
 8004138:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004140:	e853 3f00 	ldrex	r3, [r3]
 8004144:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004148:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800414c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004150:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	3314      	adds	r3, #20
 800415a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800415e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004162:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004166:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800416a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800416e:	e841 2300 	strex	r3, r2, [r1]
 8004172:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004176:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1d9      	bne.n	8004132 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004182:	2b00      	cmp	r3, #0
 8004184:	d013      	beq.n	80041ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418a:	4a7d      	ldr	r2, [pc, #500]	; (8004380 <HAL_UART_IRQHandler+0x3dc>)
 800418c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004192:	4618      	mov	r0, r3
 8004194:	f7fe fc71 	bl	8002a7a <HAL_DMA_Abort_IT>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d016      	beq.n	80041cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041a8:	4610      	mov	r0, r2
 80041aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ac:	e00e      	b.n	80041cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 f990 	bl	80044d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b4:	e00a      	b.n	80041cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f98c 	bl	80044d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041bc:	e006      	b.n	80041cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f988 	bl	80044d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80041ca:	e170      	b.n	80044ae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041cc:	bf00      	nop
    return;
 80041ce:	e16e      	b.n	80044ae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	f040 814a 	bne.w	800446e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80041da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041de:	f003 0310 	and.w	r3, r3, #16
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f000 8143 	beq.w	800446e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80041e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041ec:	f003 0310 	and.w	r3, r3, #16
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f000 813c 	beq.w	800446e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041f6:	2300      	movs	r3, #0
 80041f8:	60bb      	str	r3, [r7, #8]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	60bb      	str	r3, [r7, #8]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	60bb      	str	r3, [r7, #8]
 800420a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004216:	2b40      	cmp	r3, #64	; 0x40
 8004218:	f040 80b4 	bne.w	8004384 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004228:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 8140 	beq.w	80044b2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004236:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800423a:	429a      	cmp	r2, r3
 800423c:	f080 8139 	bcs.w	80044b2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004246:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004252:	f000 8088 	beq.w	8004366 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	330c      	adds	r3, #12
 800425c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004260:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004264:	e853 3f00 	ldrex	r3, [r3]
 8004268:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800426c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004274:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	330c      	adds	r3, #12
 800427e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004282:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004286:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800428e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004292:	e841 2300 	strex	r3, r2, [r1]
 8004296:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800429a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1d9      	bne.n	8004256 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	3314      	adds	r3, #20
 80042a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042ac:	e853 3f00 	ldrex	r3, [r3]
 80042b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80042b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042b4:	f023 0301 	bic.w	r3, r3, #1
 80042b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	3314      	adds	r3, #20
 80042c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80042c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80042ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80042ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80042d2:	e841 2300 	strex	r3, r2, [r1]
 80042d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80042d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1e1      	bne.n	80042a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	3314      	adds	r3, #20
 80042e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042e8:	e853 3f00 	ldrex	r3, [r3]
 80042ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80042ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	3314      	adds	r3, #20
 80042fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004302:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004304:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004306:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004308:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800430a:	e841 2300 	strex	r3, r2, [r1]
 800430e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004310:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1e3      	bne.n	80042de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2220      	movs	r2, #32
 800431a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	330c      	adds	r3, #12
 800432a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800432e:	e853 3f00 	ldrex	r3, [r3]
 8004332:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004334:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004336:	f023 0310 	bic.w	r3, r3, #16
 800433a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	330c      	adds	r3, #12
 8004344:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004348:	65ba      	str	r2, [r7, #88]	; 0x58
 800434a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800434e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004350:	e841 2300 	strex	r3, r2, [r1]
 8004354:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004356:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1e3      	bne.n	8004324 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004360:	4618      	mov	r0, r3
 8004362:	f7fe fb1a 	bl	800299a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800436e:	b29b      	uxth	r3, r3
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	b29b      	uxth	r3, r3
 8004374:	4619      	mov	r1, r3
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f8b6 	bl	80044e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800437c:	e099      	b.n	80044b2 <HAL_UART_IRQHandler+0x50e>
 800437e:	bf00      	nop
 8004380:	0800471f 	.word	0x0800471f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800438c:	b29b      	uxth	r3, r3
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004398:	b29b      	uxth	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	f000 808b 	beq.w	80044b6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80043a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f000 8086 	beq.w	80044b6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	330c      	adds	r3, #12
 80043b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b4:	e853 3f00 	ldrex	r3, [r3]
 80043b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80043ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	330c      	adds	r3, #12
 80043ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80043ce:	647a      	str	r2, [r7, #68]	; 0x44
 80043d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043d6:	e841 2300 	strex	r3, r2, [r1]
 80043da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80043dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1e3      	bne.n	80043aa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	3314      	adds	r3, #20
 80043e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	e853 3f00 	ldrex	r3, [r3]
 80043f0:	623b      	str	r3, [r7, #32]
   return(result);
 80043f2:	6a3b      	ldr	r3, [r7, #32]
 80043f4:	f023 0301 	bic.w	r3, r3, #1
 80043f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	3314      	adds	r3, #20
 8004402:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004406:	633a      	str	r2, [r7, #48]	; 0x30
 8004408:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800440c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800440e:	e841 2300 	strex	r3, r2, [r1]
 8004412:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1e3      	bne.n	80043e2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2220      	movs	r2, #32
 800441e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	330c      	adds	r3, #12
 800442e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	e853 3f00 	ldrex	r3, [r3]
 8004436:	60fb      	str	r3, [r7, #12]
   return(result);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f023 0310 	bic.w	r3, r3, #16
 800443e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	330c      	adds	r3, #12
 8004448:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800444c:	61fa      	str	r2, [r7, #28]
 800444e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004450:	69b9      	ldr	r1, [r7, #24]
 8004452:	69fa      	ldr	r2, [r7, #28]
 8004454:	e841 2300 	strex	r3, r2, [r1]
 8004458:	617b      	str	r3, [r7, #20]
   return(result);
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1e3      	bne.n	8004428 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004460:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004464:	4619      	mov	r1, r3
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f83e 	bl	80044e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800446c:	e023      	b.n	80044b6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800446e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004476:	2b00      	cmp	r3, #0
 8004478:	d009      	beq.n	800448e <HAL_UART_IRQHandler+0x4ea>
 800447a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800447e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f95d 	bl	8004746 <UART_Transmit_IT>
    return;
 800448c:	e014      	b.n	80044b8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800448e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00e      	beq.n	80044b8 <HAL_UART_IRQHandler+0x514>
 800449a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800449e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d008      	beq.n	80044b8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f99d 	bl	80047e6 <UART_EndTransmit_IT>
    return;
 80044ac:	e004      	b.n	80044b8 <HAL_UART_IRQHandler+0x514>
    return;
 80044ae:	bf00      	nop
 80044b0:	e002      	b.n	80044b8 <HAL_UART_IRQHandler+0x514>
      return;
 80044b2:	bf00      	nop
 80044b4:	e000      	b.n	80044b8 <HAL_UART_IRQHandler+0x514>
      return;
 80044b6:	bf00      	nop
  }
}
 80044b8:	37e8      	adds	r7, #232	; 0xe8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop

080044c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	460b      	mov	r3, r1
 80044f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b090      	sub	sp, #64	; 0x40
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	603b      	str	r3, [r7, #0]
 800450c:	4613      	mov	r3, r2
 800450e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004510:	e050      	b.n	80045b4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004518:	d04c      	beq.n	80045b4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800451a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800451c:	2b00      	cmp	r3, #0
 800451e:	d007      	beq.n	8004530 <UART_WaitOnFlagUntilTimeout+0x30>
 8004520:	f7fd fd08 	bl	8001f34 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800452c:	429a      	cmp	r2, r3
 800452e:	d241      	bcs.n	80045b4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	330c      	adds	r3, #12
 8004536:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453a:	e853 3f00 	ldrex	r3, [r3]
 800453e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004542:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004546:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	330c      	adds	r3, #12
 800454e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004550:	637a      	str	r2, [r7, #52]	; 0x34
 8004552:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004554:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004556:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004558:	e841 2300 	strex	r3, r2, [r1]
 800455c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800455e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1e5      	bne.n	8004530 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	3314      	adds	r3, #20
 800456a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	e853 3f00 	ldrex	r3, [r3]
 8004572:	613b      	str	r3, [r7, #16]
   return(result);
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	f023 0301 	bic.w	r3, r3, #1
 800457a:	63bb      	str	r3, [r7, #56]	; 0x38
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	3314      	adds	r3, #20
 8004582:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004584:	623a      	str	r2, [r7, #32]
 8004586:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004588:	69f9      	ldr	r1, [r7, #28]
 800458a:	6a3a      	ldr	r2, [r7, #32]
 800458c:	e841 2300 	strex	r3, r2, [r1]
 8004590:	61bb      	str	r3, [r7, #24]
   return(result);
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1e5      	bne.n	8004564 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2220      	movs	r2, #32
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2220      	movs	r2, #32
 80045a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e00f      	b.n	80045d4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	4013      	ands	r3, r2
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	bf0c      	ite	eq
 80045c4:	2301      	moveq	r3, #1
 80045c6:	2300      	movne	r3, #0
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	461a      	mov	r2, r3
 80045cc:	79fb      	ldrb	r3, [r7, #7]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d09f      	beq.n	8004512 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3740      	adds	r7, #64	; 0x40
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	4613      	mov	r3, r2
 80045e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	88fa      	ldrh	r2, [r7, #6]
 80045f4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	88fa      	ldrh	r2, [r7, #6]
 80045fa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2222      	movs	r2, #34	; 0x22
 8004606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d007      	beq.n	800462a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004628:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	695a      	ldr	r2, [r3, #20]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f042 0201 	orr.w	r2, r2, #1
 8004638:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68da      	ldr	r2, [r3, #12]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f042 0220 	orr.w	r2, r2, #32
 8004648:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004658:	b480      	push	{r7}
 800465a:	b095      	sub	sp, #84	; 0x54
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	330c      	adds	r3, #12
 8004666:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800466a:	e853 3f00 	ldrex	r3, [r3]
 800466e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004672:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004676:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	330c      	adds	r3, #12
 800467e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004680:	643a      	str	r2, [r7, #64]	; 0x40
 8004682:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004684:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004686:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004688:	e841 2300 	strex	r3, r2, [r1]
 800468c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800468e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1e5      	bne.n	8004660 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	3314      	adds	r3, #20
 800469a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469c:	6a3b      	ldr	r3, [r7, #32]
 800469e:	e853 3f00 	ldrex	r3, [r3]
 80046a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	f023 0301 	bic.w	r3, r3, #1
 80046aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	3314      	adds	r3, #20
 80046b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046bc:	e841 2300 	strex	r3, r2, [r1]
 80046c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1e5      	bne.n	8004694 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d119      	bne.n	8004704 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	330c      	adds	r3, #12
 80046d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	e853 3f00 	ldrex	r3, [r3]
 80046de:	60bb      	str	r3, [r7, #8]
   return(result);
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f023 0310 	bic.w	r3, r3, #16
 80046e6:	647b      	str	r3, [r7, #68]	; 0x44
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	330c      	adds	r3, #12
 80046ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046f0:	61ba      	str	r2, [r7, #24]
 80046f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f4:	6979      	ldr	r1, [r7, #20]
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	e841 2300 	strex	r3, r2, [r1]
 80046fc:	613b      	str	r3, [r7, #16]
   return(result);
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1e5      	bne.n	80046d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2220      	movs	r2, #32
 8004708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004712:	bf00      	nop
 8004714:	3754      	adds	r7, #84	; 0x54
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b084      	sub	sp, #16
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f7ff fecb 	bl	80044d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800473e:	bf00      	nop
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004746:	b480      	push	{r7}
 8004748:	b085      	sub	sp, #20
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b21      	cmp	r3, #33	; 0x21
 8004758:	d13e      	bne.n	80047d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004762:	d114      	bne.n	800478e <UART_Transmit_IT+0x48>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d110      	bne.n	800478e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	881b      	ldrh	r3, [r3, #0]
 8004776:	461a      	mov	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004780:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	1c9a      	adds	r2, r3, #2
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	621a      	str	r2, [r3, #32]
 800478c:	e008      	b.n	80047a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	1c59      	adds	r1, r3, #1
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	6211      	str	r1, [r2, #32]
 8004798:	781a      	ldrb	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	3b01      	subs	r3, #1
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	4619      	mov	r1, r3
 80047ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d10f      	bne.n	80047d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68da      	ldr	r2, [r3, #12]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047d4:	2300      	movs	r3, #0
 80047d6:	e000      	b.n	80047da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80047d8:	2302      	movs	r3, #2
  }
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3714      	adds	r7, #20
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b082      	sub	sp, #8
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68da      	ldr	r2, [r3, #12]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2220      	movs	r2, #32
 8004802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f7ff fe5a 	bl	80044c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b08c      	sub	sp, #48	; 0x30
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b22      	cmp	r3, #34	; 0x22
 8004828:	f040 80ab 	bne.w	8004982 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004834:	d117      	bne.n	8004866 <UART_Receive_IT+0x50>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d113      	bne.n	8004866 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800483e:	2300      	movs	r3, #0
 8004840:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004846:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	b29b      	uxth	r3, r3
 8004850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004854:	b29a      	uxth	r2, r3
 8004856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004858:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485e:	1c9a      	adds	r2, r3, #2
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	629a      	str	r2, [r3, #40]	; 0x28
 8004864:	e026      	b.n	80048b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800486c:	2300      	movs	r3, #0
 800486e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004878:	d007      	beq.n	800488a <UART_Receive_IT+0x74>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10a      	bne.n	8004898 <UART_Receive_IT+0x82>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d106      	bne.n	8004898 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	b2da      	uxtb	r2, r3
 8004892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004894:	701a      	strb	r2, [r3, #0]
 8004896:	e008      	b.n	80048aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048a4:	b2da      	uxtb	r2, r3
 80048a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ae:	1c5a      	adds	r2, r3, #1
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	3b01      	subs	r3, #1
 80048bc:	b29b      	uxth	r3, r3
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	4619      	mov	r1, r3
 80048c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d15a      	bne.n	800497e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0220 	bic.w	r2, r2, #32
 80048d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68da      	ldr	r2, [r3, #12]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	695a      	ldr	r2, [r3, #20]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 0201 	bic.w	r2, r2, #1
 80048f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2220      	movs	r2, #32
 80048fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004904:	2b01      	cmp	r3, #1
 8004906:	d135      	bne.n	8004974 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	330c      	adds	r3, #12
 8004914:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	e853 3f00 	ldrex	r3, [r3]
 800491c:	613b      	str	r3, [r7, #16]
   return(result);
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	f023 0310 	bic.w	r3, r3, #16
 8004924:	627b      	str	r3, [r7, #36]	; 0x24
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	330c      	adds	r3, #12
 800492c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800492e:	623a      	str	r2, [r7, #32]
 8004930:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004932:	69f9      	ldr	r1, [r7, #28]
 8004934:	6a3a      	ldr	r2, [r7, #32]
 8004936:	e841 2300 	strex	r3, r2, [r1]
 800493a:	61bb      	str	r3, [r7, #24]
   return(result);
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1e5      	bne.n	800490e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0310 	and.w	r3, r3, #16
 800494c:	2b10      	cmp	r3, #16
 800494e:	d10a      	bne.n	8004966 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004950:	2300      	movs	r3, #0
 8004952:	60fb      	str	r3, [r7, #12]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	60fb      	str	r3, [r7, #12]
 8004964:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800496a:	4619      	mov	r1, r3
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f7ff fdbb 	bl	80044e8 <HAL_UARTEx_RxEventCallback>
 8004972:	e002      	b.n	800497a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f7fc ff7f 	bl	8001878 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800497a:	2300      	movs	r3, #0
 800497c:	e002      	b.n	8004984 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800497e:	2300      	movs	r3, #0
 8004980:	e000      	b.n	8004984 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004982:	2302      	movs	r3, #2
  }
}
 8004984:	4618      	mov	r0, r3
 8004986:	3730      	adds	r7, #48	; 0x30
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800498c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004990:	b0c0      	sub	sp, #256	; 0x100
 8004992:	af00      	add	r7, sp, #0
 8004994:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80049a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a8:	68d9      	ldr	r1, [r3, #12]
 80049aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	ea40 0301 	orr.w	r3, r0, r1
 80049b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ba:	689a      	ldr	r2, [r3, #8]
 80049bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	431a      	orrs	r2, r3
 80049c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	431a      	orrs	r2, r3
 80049cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80049d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80049e4:	f021 010c 	bic.w	r1, r1, #12
 80049e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049f2:	430b      	orrs	r3, r1
 80049f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a06:	6999      	ldr	r1, [r3, #24]
 8004a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	ea40 0301 	orr.w	r3, r0, r1
 8004a12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	4b8f      	ldr	r3, [pc, #572]	; (8004c58 <UART_SetConfig+0x2cc>)
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d005      	beq.n	8004a2c <UART_SetConfig+0xa0>
 8004a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	4b8d      	ldr	r3, [pc, #564]	; (8004c5c <UART_SetConfig+0x2d0>)
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d104      	bne.n	8004a36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a2c:	f7fe fe9c 	bl	8003768 <HAL_RCC_GetPCLK2Freq>
 8004a30:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004a34:	e003      	b.n	8004a3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a36:	f7fe fe83 	bl	8003740 <HAL_RCC_GetPCLK1Freq>
 8004a3a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a42:	69db      	ldr	r3, [r3, #28]
 8004a44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a48:	f040 810c 	bne.w	8004c64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a50:	2200      	movs	r2, #0
 8004a52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a56:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004a5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004a5e:	4622      	mov	r2, r4
 8004a60:	462b      	mov	r3, r5
 8004a62:	1891      	adds	r1, r2, r2
 8004a64:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a66:	415b      	adcs	r3, r3
 8004a68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a6e:	4621      	mov	r1, r4
 8004a70:	eb12 0801 	adds.w	r8, r2, r1
 8004a74:	4629      	mov	r1, r5
 8004a76:	eb43 0901 	adc.w	r9, r3, r1
 8004a7a:	f04f 0200 	mov.w	r2, #0
 8004a7e:	f04f 0300 	mov.w	r3, #0
 8004a82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a8e:	4690      	mov	r8, r2
 8004a90:	4699      	mov	r9, r3
 8004a92:	4623      	mov	r3, r4
 8004a94:	eb18 0303 	adds.w	r3, r8, r3
 8004a98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a9c:	462b      	mov	r3, r5
 8004a9e:	eb49 0303 	adc.w	r3, r9, r3
 8004aa2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ab2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004ab6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004aba:	460b      	mov	r3, r1
 8004abc:	18db      	adds	r3, r3, r3
 8004abe:	653b      	str	r3, [r7, #80]	; 0x50
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	eb42 0303 	adc.w	r3, r2, r3
 8004ac6:	657b      	str	r3, [r7, #84]	; 0x54
 8004ac8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004acc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004ad0:	f7fc f8e2 	bl	8000c98 <__aeabi_uldivmod>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	4b61      	ldr	r3, [pc, #388]	; (8004c60 <UART_SetConfig+0x2d4>)
 8004ada:	fba3 2302 	umull	r2, r3, r3, r2
 8004ade:	095b      	lsrs	r3, r3, #5
 8004ae0:	011c      	lsls	r4, r3, #4
 8004ae2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004aec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004af0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004af4:	4642      	mov	r2, r8
 8004af6:	464b      	mov	r3, r9
 8004af8:	1891      	adds	r1, r2, r2
 8004afa:	64b9      	str	r1, [r7, #72]	; 0x48
 8004afc:	415b      	adcs	r3, r3
 8004afe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b04:	4641      	mov	r1, r8
 8004b06:	eb12 0a01 	adds.w	sl, r2, r1
 8004b0a:	4649      	mov	r1, r9
 8004b0c:	eb43 0b01 	adc.w	fp, r3, r1
 8004b10:	f04f 0200 	mov.w	r2, #0
 8004b14:	f04f 0300 	mov.w	r3, #0
 8004b18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b24:	4692      	mov	sl, r2
 8004b26:	469b      	mov	fp, r3
 8004b28:	4643      	mov	r3, r8
 8004b2a:	eb1a 0303 	adds.w	r3, sl, r3
 8004b2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b32:	464b      	mov	r3, r9
 8004b34:	eb4b 0303 	adc.w	r3, fp, r3
 8004b38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b48:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004b4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b50:	460b      	mov	r3, r1
 8004b52:	18db      	adds	r3, r3, r3
 8004b54:	643b      	str	r3, [r7, #64]	; 0x40
 8004b56:	4613      	mov	r3, r2
 8004b58:	eb42 0303 	adc.w	r3, r2, r3
 8004b5c:	647b      	str	r3, [r7, #68]	; 0x44
 8004b5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b66:	f7fc f897 	bl	8000c98 <__aeabi_uldivmod>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	4611      	mov	r1, r2
 8004b70:	4b3b      	ldr	r3, [pc, #236]	; (8004c60 <UART_SetConfig+0x2d4>)
 8004b72:	fba3 2301 	umull	r2, r3, r3, r1
 8004b76:	095b      	lsrs	r3, r3, #5
 8004b78:	2264      	movs	r2, #100	; 0x64
 8004b7a:	fb02 f303 	mul.w	r3, r2, r3
 8004b7e:	1acb      	subs	r3, r1, r3
 8004b80:	00db      	lsls	r3, r3, #3
 8004b82:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b86:	4b36      	ldr	r3, [pc, #216]	; (8004c60 <UART_SetConfig+0x2d4>)
 8004b88:	fba3 2302 	umull	r2, r3, r3, r2
 8004b8c:	095b      	lsrs	r3, r3, #5
 8004b8e:	005b      	lsls	r3, r3, #1
 8004b90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b94:	441c      	add	r4, r3
 8004b96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ba0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ba4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ba8:	4642      	mov	r2, r8
 8004baa:	464b      	mov	r3, r9
 8004bac:	1891      	adds	r1, r2, r2
 8004bae:	63b9      	str	r1, [r7, #56]	; 0x38
 8004bb0:	415b      	adcs	r3, r3
 8004bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004bb8:	4641      	mov	r1, r8
 8004bba:	1851      	adds	r1, r2, r1
 8004bbc:	6339      	str	r1, [r7, #48]	; 0x30
 8004bbe:	4649      	mov	r1, r9
 8004bc0:	414b      	adcs	r3, r1
 8004bc2:	637b      	str	r3, [r7, #52]	; 0x34
 8004bc4:	f04f 0200 	mov.w	r2, #0
 8004bc8:	f04f 0300 	mov.w	r3, #0
 8004bcc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004bd0:	4659      	mov	r1, fp
 8004bd2:	00cb      	lsls	r3, r1, #3
 8004bd4:	4651      	mov	r1, sl
 8004bd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bda:	4651      	mov	r1, sl
 8004bdc:	00ca      	lsls	r2, r1, #3
 8004bde:	4610      	mov	r0, r2
 8004be0:	4619      	mov	r1, r3
 8004be2:	4603      	mov	r3, r0
 8004be4:	4642      	mov	r2, r8
 8004be6:	189b      	adds	r3, r3, r2
 8004be8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004bec:	464b      	mov	r3, r9
 8004bee:	460a      	mov	r2, r1
 8004bf0:	eb42 0303 	adc.w	r3, r2, r3
 8004bf4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c04:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	18db      	adds	r3, r3, r3
 8004c10:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c12:	4613      	mov	r3, r2
 8004c14:	eb42 0303 	adc.w	r3, r2, r3
 8004c18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004c22:	f7fc f839 	bl	8000c98 <__aeabi_uldivmod>
 8004c26:	4602      	mov	r2, r0
 8004c28:	460b      	mov	r3, r1
 8004c2a:	4b0d      	ldr	r3, [pc, #52]	; (8004c60 <UART_SetConfig+0x2d4>)
 8004c2c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c30:	095b      	lsrs	r3, r3, #5
 8004c32:	2164      	movs	r1, #100	; 0x64
 8004c34:	fb01 f303 	mul.w	r3, r1, r3
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	00db      	lsls	r3, r3, #3
 8004c3c:	3332      	adds	r3, #50	; 0x32
 8004c3e:	4a08      	ldr	r2, [pc, #32]	; (8004c60 <UART_SetConfig+0x2d4>)
 8004c40:	fba2 2303 	umull	r2, r3, r2, r3
 8004c44:	095b      	lsrs	r3, r3, #5
 8004c46:	f003 0207 	and.w	r2, r3, #7
 8004c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4422      	add	r2, r4
 8004c52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c54:	e105      	b.n	8004e62 <UART_SetConfig+0x4d6>
 8004c56:	bf00      	nop
 8004c58:	40011000 	.word	0x40011000
 8004c5c:	40011400 	.word	0x40011400
 8004c60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c6e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004c72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004c76:	4642      	mov	r2, r8
 8004c78:	464b      	mov	r3, r9
 8004c7a:	1891      	adds	r1, r2, r2
 8004c7c:	6239      	str	r1, [r7, #32]
 8004c7e:	415b      	adcs	r3, r3
 8004c80:	627b      	str	r3, [r7, #36]	; 0x24
 8004c82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c86:	4641      	mov	r1, r8
 8004c88:	1854      	adds	r4, r2, r1
 8004c8a:	4649      	mov	r1, r9
 8004c8c:	eb43 0501 	adc.w	r5, r3, r1
 8004c90:	f04f 0200 	mov.w	r2, #0
 8004c94:	f04f 0300 	mov.w	r3, #0
 8004c98:	00eb      	lsls	r3, r5, #3
 8004c9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c9e:	00e2      	lsls	r2, r4, #3
 8004ca0:	4614      	mov	r4, r2
 8004ca2:	461d      	mov	r5, r3
 8004ca4:	4643      	mov	r3, r8
 8004ca6:	18e3      	adds	r3, r4, r3
 8004ca8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004cac:	464b      	mov	r3, r9
 8004cae:	eb45 0303 	adc.w	r3, r5, r3
 8004cb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004cc2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004cc6:	f04f 0200 	mov.w	r2, #0
 8004cca:	f04f 0300 	mov.w	r3, #0
 8004cce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004cd2:	4629      	mov	r1, r5
 8004cd4:	008b      	lsls	r3, r1, #2
 8004cd6:	4621      	mov	r1, r4
 8004cd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cdc:	4621      	mov	r1, r4
 8004cde:	008a      	lsls	r2, r1, #2
 8004ce0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004ce4:	f7fb ffd8 	bl	8000c98 <__aeabi_uldivmod>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	460b      	mov	r3, r1
 8004cec:	4b60      	ldr	r3, [pc, #384]	; (8004e70 <UART_SetConfig+0x4e4>)
 8004cee:	fba3 2302 	umull	r2, r3, r3, r2
 8004cf2:	095b      	lsrs	r3, r3, #5
 8004cf4:	011c      	lsls	r4, r3, #4
 8004cf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d08:	4642      	mov	r2, r8
 8004d0a:	464b      	mov	r3, r9
 8004d0c:	1891      	adds	r1, r2, r2
 8004d0e:	61b9      	str	r1, [r7, #24]
 8004d10:	415b      	adcs	r3, r3
 8004d12:	61fb      	str	r3, [r7, #28]
 8004d14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d18:	4641      	mov	r1, r8
 8004d1a:	1851      	adds	r1, r2, r1
 8004d1c:	6139      	str	r1, [r7, #16]
 8004d1e:	4649      	mov	r1, r9
 8004d20:	414b      	adcs	r3, r1
 8004d22:	617b      	str	r3, [r7, #20]
 8004d24:	f04f 0200 	mov.w	r2, #0
 8004d28:	f04f 0300 	mov.w	r3, #0
 8004d2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d30:	4659      	mov	r1, fp
 8004d32:	00cb      	lsls	r3, r1, #3
 8004d34:	4651      	mov	r1, sl
 8004d36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d3a:	4651      	mov	r1, sl
 8004d3c:	00ca      	lsls	r2, r1, #3
 8004d3e:	4610      	mov	r0, r2
 8004d40:	4619      	mov	r1, r3
 8004d42:	4603      	mov	r3, r0
 8004d44:	4642      	mov	r2, r8
 8004d46:	189b      	adds	r3, r3, r2
 8004d48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d4c:	464b      	mov	r3, r9
 8004d4e:	460a      	mov	r2, r1
 8004d50:	eb42 0303 	adc.w	r3, r2, r3
 8004d54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d62:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d64:	f04f 0200 	mov.w	r2, #0
 8004d68:	f04f 0300 	mov.w	r3, #0
 8004d6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004d70:	4649      	mov	r1, r9
 8004d72:	008b      	lsls	r3, r1, #2
 8004d74:	4641      	mov	r1, r8
 8004d76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d7a:	4641      	mov	r1, r8
 8004d7c:	008a      	lsls	r2, r1, #2
 8004d7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004d82:	f7fb ff89 	bl	8000c98 <__aeabi_uldivmod>
 8004d86:	4602      	mov	r2, r0
 8004d88:	460b      	mov	r3, r1
 8004d8a:	4b39      	ldr	r3, [pc, #228]	; (8004e70 <UART_SetConfig+0x4e4>)
 8004d8c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d90:	095b      	lsrs	r3, r3, #5
 8004d92:	2164      	movs	r1, #100	; 0x64
 8004d94:	fb01 f303 	mul.w	r3, r1, r3
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	011b      	lsls	r3, r3, #4
 8004d9c:	3332      	adds	r3, #50	; 0x32
 8004d9e:	4a34      	ldr	r2, [pc, #208]	; (8004e70 <UART_SetConfig+0x4e4>)
 8004da0:	fba2 2303 	umull	r2, r3, r2, r3
 8004da4:	095b      	lsrs	r3, r3, #5
 8004da6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004daa:	441c      	add	r4, r3
 8004dac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004db0:	2200      	movs	r2, #0
 8004db2:	673b      	str	r3, [r7, #112]	; 0x70
 8004db4:	677a      	str	r2, [r7, #116]	; 0x74
 8004db6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004dba:	4642      	mov	r2, r8
 8004dbc:	464b      	mov	r3, r9
 8004dbe:	1891      	adds	r1, r2, r2
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	415b      	adcs	r3, r3
 8004dc4:	60fb      	str	r3, [r7, #12]
 8004dc6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004dca:	4641      	mov	r1, r8
 8004dcc:	1851      	adds	r1, r2, r1
 8004dce:	6039      	str	r1, [r7, #0]
 8004dd0:	4649      	mov	r1, r9
 8004dd2:	414b      	adcs	r3, r1
 8004dd4:	607b      	str	r3, [r7, #4]
 8004dd6:	f04f 0200 	mov.w	r2, #0
 8004dda:	f04f 0300 	mov.w	r3, #0
 8004dde:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004de2:	4659      	mov	r1, fp
 8004de4:	00cb      	lsls	r3, r1, #3
 8004de6:	4651      	mov	r1, sl
 8004de8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dec:	4651      	mov	r1, sl
 8004dee:	00ca      	lsls	r2, r1, #3
 8004df0:	4610      	mov	r0, r2
 8004df2:	4619      	mov	r1, r3
 8004df4:	4603      	mov	r3, r0
 8004df6:	4642      	mov	r2, r8
 8004df8:	189b      	adds	r3, r3, r2
 8004dfa:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dfc:	464b      	mov	r3, r9
 8004dfe:	460a      	mov	r2, r1
 8004e00:	eb42 0303 	adc.w	r3, r2, r3
 8004e04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	663b      	str	r3, [r7, #96]	; 0x60
 8004e10:	667a      	str	r2, [r7, #100]	; 0x64
 8004e12:	f04f 0200 	mov.w	r2, #0
 8004e16:	f04f 0300 	mov.w	r3, #0
 8004e1a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004e1e:	4649      	mov	r1, r9
 8004e20:	008b      	lsls	r3, r1, #2
 8004e22:	4641      	mov	r1, r8
 8004e24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e28:	4641      	mov	r1, r8
 8004e2a:	008a      	lsls	r2, r1, #2
 8004e2c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e30:	f7fb ff32 	bl	8000c98 <__aeabi_uldivmod>
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	4b0d      	ldr	r3, [pc, #52]	; (8004e70 <UART_SetConfig+0x4e4>)
 8004e3a:	fba3 1302 	umull	r1, r3, r3, r2
 8004e3e:	095b      	lsrs	r3, r3, #5
 8004e40:	2164      	movs	r1, #100	; 0x64
 8004e42:	fb01 f303 	mul.w	r3, r1, r3
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	011b      	lsls	r3, r3, #4
 8004e4a:	3332      	adds	r3, #50	; 0x32
 8004e4c:	4a08      	ldr	r2, [pc, #32]	; (8004e70 <UART_SetConfig+0x4e4>)
 8004e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e52:	095b      	lsrs	r3, r3, #5
 8004e54:	f003 020f 	and.w	r2, r3, #15
 8004e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4422      	add	r2, r4
 8004e60:	609a      	str	r2, [r3, #8]
}
 8004e62:	bf00      	nop
 8004e64:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e6e:	bf00      	nop
 8004e70:	51eb851f 	.word	0x51eb851f

08004e74 <__errno>:
 8004e74:	4b01      	ldr	r3, [pc, #4]	; (8004e7c <__errno+0x8>)
 8004e76:	6818      	ldr	r0, [r3, #0]
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	20000010 	.word	0x20000010

08004e80 <__libc_init_array>:
 8004e80:	b570      	push	{r4, r5, r6, lr}
 8004e82:	4d0d      	ldr	r5, [pc, #52]	; (8004eb8 <__libc_init_array+0x38>)
 8004e84:	4c0d      	ldr	r4, [pc, #52]	; (8004ebc <__libc_init_array+0x3c>)
 8004e86:	1b64      	subs	r4, r4, r5
 8004e88:	10a4      	asrs	r4, r4, #2
 8004e8a:	2600      	movs	r6, #0
 8004e8c:	42a6      	cmp	r6, r4
 8004e8e:	d109      	bne.n	8004ea4 <__libc_init_array+0x24>
 8004e90:	4d0b      	ldr	r5, [pc, #44]	; (8004ec0 <__libc_init_array+0x40>)
 8004e92:	4c0c      	ldr	r4, [pc, #48]	; (8004ec4 <__libc_init_array+0x44>)
 8004e94:	f002 ff04 	bl	8007ca0 <_init>
 8004e98:	1b64      	subs	r4, r4, r5
 8004e9a:	10a4      	asrs	r4, r4, #2
 8004e9c:	2600      	movs	r6, #0
 8004e9e:	42a6      	cmp	r6, r4
 8004ea0:	d105      	bne.n	8004eae <__libc_init_array+0x2e>
 8004ea2:	bd70      	pop	{r4, r5, r6, pc}
 8004ea4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ea8:	4798      	blx	r3
 8004eaa:	3601      	adds	r6, #1
 8004eac:	e7ee      	b.n	8004e8c <__libc_init_array+0xc>
 8004eae:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eb2:	4798      	blx	r3
 8004eb4:	3601      	adds	r6, #1
 8004eb6:	e7f2      	b.n	8004e9e <__libc_init_array+0x1e>
 8004eb8:	080080e4 	.word	0x080080e4
 8004ebc:	080080e4 	.word	0x080080e4
 8004ec0:	080080e4 	.word	0x080080e4
 8004ec4:	080080e8 	.word	0x080080e8

08004ec8 <memset>:
 8004ec8:	4402      	add	r2, r0
 8004eca:	4603      	mov	r3, r0
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d100      	bne.n	8004ed2 <memset+0xa>
 8004ed0:	4770      	bx	lr
 8004ed2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ed6:	e7f9      	b.n	8004ecc <memset+0x4>

08004ed8 <__cvt>:
 8004ed8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004edc:	ec55 4b10 	vmov	r4, r5, d0
 8004ee0:	2d00      	cmp	r5, #0
 8004ee2:	460e      	mov	r6, r1
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	462b      	mov	r3, r5
 8004ee8:	bfbb      	ittet	lt
 8004eea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004eee:	461d      	movlt	r5, r3
 8004ef0:	2300      	movge	r3, #0
 8004ef2:	232d      	movlt	r3, #45	; 0x2d
 8004ef4:	700b      	strb	r3, [r1, #0]
 8004ef6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ef8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004efc:	4691      	mov	r9, r2
 8004efe:	f023 0820 	bic.w	r8, r3, #32
 8004f02:	bfbc      	itt	lt
 8004f04:	4622      	movlt	r2, r4
 8004f06:	4614      	movlt	r4, r2
 8004f08:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004f0c:	d005      	beq.n	8004f1a <__cvt+0x42>
 8004f0e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004f12:	d100      	bne.n	8004f16 <__cvt+0x3e>
 8004f14:	3601      	adds	r6, #1
 8004f16:	2102      	movs	r1, #2
 8004f18:	e000      	b.n	8004f1c <__cvt+0x44>
 8004f1a:	2103      	movs	r1, #3
 8004f1c:	ab03      	add	r3, sp, #12
 8004f1e:	9301      	str	r3, [sp, #4]
 8004f20:	ab02      	add	r3, sp, #8
 8004f22:	9300      	str	r3, [sp, #0]
 8004f24:	ec45 4b10 	vmov	d0, r4, r5
 8004f28:	4653      	mov	r3, sl
 8004f2a:	4632      	mov	r2, r6
 8004f2c:	f000 fcec 	bl	8005908 <_dtoa_r>
 8004f30:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004f34:	4607      	mov	r7, r0
 8004f36:	d102      	bne.n	8004f3e <__cvt+0x66>
 8004f38:	f019 0f01 	tst.w	r9, #1
 8004f3c:	d022      	beq.n	8004f84 <__cvt+0xac>
 8004f3e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004f42:	eb07 0906 	add.w	r9, r7, r6
 8004f46:	d110      	bne.n	8004f6a <__cvt+0x92>
 8004f48:	783b      	ldrb	r3, [r7, #0]
 8004f4a:	2b30      	cmp	r3, #48	; 0x30
 8004f4c:	d10a      	bne.n	8004f64 <__cvt+0x8c>
 8004f4e:	2200      	movs	r2, #0
 8004f50:	2300      	movs	r3, #0
 8004f52:	4620      	mov	r0, r4
 8004f54:	4629      	mov	r1, r5
 8004f56:	f7fb fdbf 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f5a:	b918      	cbnz	r0, 8004f64 <__cvt+0x8c>
 8004f5c:	f1c6 0601 	rsb	r6, r6, #1
 8004f60:	f8ca 6000 	str.w	r6, [sl]
 8004f64:	f8da 3000 	ldr.w	r3, [sl]
 8004f68:	4499      	add	r9, r3
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	4620      	mov	r0, r4
 8004f70:	4629      	mov	r1, r5
 8004f72:	f7fb fdb1 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f76:	b108      	cbz	r0, 8004f7c <__cvt+0xa4>
 8004f78:	f8cd 900c 	str.w	r9, [sp, #12]
 8004f7c:	2230      	movs	r2, #48	; 0x30
 8004f7e:	9b03      	ldr	r3, [sp, #12]
 8004f80:	454b      	cmp	r3, r9
 8004f82:	d307      	bcc.n	8004f94 <__cvt+0xbc>
 8004f84:	9b03      	ldr	r3, [sp, #12]
 8004f86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f88:	1bdb      	subs	r3, r3, r7
 8004f8a:	4638      	mov	r0, r7
 8004f8c:	6013      	str	r3, [r2, #0]
 8004f8e:	b004      	add	sp, #16
 8004f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f94:	1c59      	adds	r1, r3, #1
 8004f96:	9103      	str	r1, [sp, #12]
 8004f98:	701a      	strb	r2, [r3, #0]
 8004f9a:	e7f0      	b.n	8004f7e <__cvt+0xa6>

08004f9c <__exponent>:
 8004f9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2900      	cmp	r1, #0
 8004fa2:	bfb8      	it	lt
 8004fa4:	4249      	neglt	r1, r1
 8004fa6:	f803 2b02 	strb.w	r2, [r3], #2
 8004faa:	bfb4      	ite	lt
 8004fac:	222d      	movlt	r2, #45	; 0x2d
 8004fae:	222b      	movge	r2, #43	; 0x2b
 8004fb0:	2909      	cmp	r1, #9
 8004fb2:	7042      	strb	r2, [r0, #1]
 8004fb4:	dd2a      	ble.n	800500c <__exponent+0x70>
 8004fb6:	f10d 0407 	add.w	r4, sp, #7
 8004fba:	46a4      	mov	ip, r4
 8004fbc:	270a      	movs	r7, #10
 8004fbe:	46a6      	mov	lr, r4
 8004fc0:	460a      	mov	r2, r1
 8004fc2:	fb91 f6f7 	sdiv	r6, r1, r7
 8004fc6:	fb07 1516 	mls	r5, r7, r6, r1
 8004fca:	3530      	adds	r5, #48	; 0x30
 8004fcc:	2a63      	cmp	r2, #99	; 0x63
 8004fce:	f104 34ff 	add.w	r4, r4, #4294967295
 8004fd2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004fd6:	4631      	mov	r1, r6
 8004fd8:	dcf1      	bgt.n	8004fbe <__exponent+0x22>
 8004fda:	3130      	adds	r1, #48	; 0x30
 8004fdc:	f1ae 0502 	sub.w	r5, lr, #2
 8004fe0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004fe4:	1c44      	adds	r4, r0, #1
 8004fe6:	4629      	mov	r1, r5
 8004fe8:	4561      	cmp	r1, ip
 8004fea:	d30a      	bcc.n	8005002 <__exponent+0x66>
 8004fec:	f10d 0209 	add.w	r2, sp, #9
 8004ff0:	eba2 020e 	sub.w	r2, r2, lr
 8004ff4:	4565      	cmp	r5, ip
 8004ff6:	bf88      	it	hi
 8004ff8:	2200      	movhi	r2, #0
 8004ffa:	4413      	add	r3, r2
 8004ffc:	1a18      	subs	r0, r3, r0
 8004ffe:	b003      	add	sp, #12
 8005000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005002:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005006:	f804 2f01 	strb.w	r2, [r4, #1]!
 800500a:	e7ed      	b.n	8004fe8 <__exponent+0x4c>
 800500c:	2330      	movs	r3, #48	; 0x30
 800500e:	3130      	adds	r1, #48	; 0x30
 8005010:	7083      	strb	r3, [r0, #2]
 8005012:	70c1      	strb	r1, [r0, #3]
 8005014:	1d03      	adds	r3, r0, #4
 8005016:	e7f1      	b.n	8004ffc <__exponent+0x60>

08005018 <_printf_float>:
 8005018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800501c:	ed2d 8b02 	vpush	{d8}
 8005020:	b08d      	sub	sp, #52	; 0x34
 8005022:	460c      	mov	r4, r1
 8005024:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005028:	4616      	mov	r6, r2
 800502a:	461f      	mov	r7, r3
 800502c:	4605      	mov	r5, r0
 800502e:	f001 fa59 	bl	80064e4 <_localeconv_r>
 8005032:	f8d0 a000 	ldr.w	sl, [r0]
 8005036:	4650      	mov	r0, sl
 8005038:	f7fb f8d2 	bl	80001e0 <strlen>
 800503c:	2300      	movs	r3, #0
 800503e:	930a      	str	r3, [sp, #40]	; 0x28
 8005040:	6823      	ldr	r3, [r4, #0]
 8005042:	9305      	str	r3, [sp, #20]
 8005044:	f8d8 3000 	ldr.w	r3, [r8]
 8005048:	f894 b018 	ldrb.w	fp, [r4, #24]
 800504c:	3307      	adds	r3, #7
 800504e:	f023 0307 	bic.w	r3, r3, #7
 8005052:	f103 0208 	add.w	r2, r3, #8
 8005056:	f8c8 2000 	str.w	r2, [r8]
 800505a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005062:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005066:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800506a:	9307      	str	r3, [sp, #28]
 800506c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005070:	ee08 0a10 	vmov	s16, r0
 8005074:	4b9f      	ldr	r3, [pc, #636]	; (80052f4 <_printf_float+0x2dc>)
 8005076:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800507a:	f04f 32ff 	mov.w	r2, #4294967295
 800507e:	f7fb fd5d 	bl	8000b3c <__aeabi_dcmpun>
 8005082:	bb88      	cbnz	r0, 80050e8 <_printf_float+0xd0>
 8005084:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005088:	4b9a      	ldr	r3, [pc, #616]	; (80052f4 <_printf_float+0x2dc>)
 800508a:	f04f 32ff 	mov.w	r2, #4294967295
 800508e:	f7fb fd37 	bl	8000b00 <__aeabi_dcmple>
 8005092:	bb48      	cbnz	r0, 80050e8 <_printf_float+0xd0>
 8005094:	2200      	movs	r2, #0
 8005096:	2300      	movs	r3, #0
 8005098:	4640      	mov	r0, r8
 800509a:	4649      	mov	r1, r9
 800509c:	f7fb fd26 	bl	8000aec <__aeabi_dcmplt>
 80050a0:	b110      	cbz	r0, 80050a8 <_printf_float+0x90>
 80050a2:	232d      	movs	r3, #45	; 0x2d
 80050a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050a8:	4b93      	ldr	r3, [pc, #588]	; (80052f8 <_printf_float+0x2e0>)
 80050aa:	4894      	ldr	r0, [pc, #592]	; (80052fc <_printf_float+0x2e4>)
 80050ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80050b0:	bf94      	ite	ls
 80050b2:	4698      	movls	r8, r3
 80050b4:	4680      	movhi	r8, r0
 80050b6:	2303      	movs	r3, #3
 80050b8:	6123      	str	r3, [r4, #16]
 80050ba:	9b05      	ldr	r3, [sp, #20]
 80050bc:	f023 0204 	bic.w	r2, r3, #4
 80050c0:	6022      	str	r2, [r4, #0]
 80050c2:	f04f 0900 	mov.w	r9, #0
 80050c6:	9700      	str	r7, [sp, #0]
 80050c8:	4633      	mov	r3, r6
 80050ca:	aa0b      	add	r2, sp, #44	; 0x2c
 80050cc:	4621      	mov	r1, r4
 80050ce:	4628      	mov	r0, r5
 80050d0:	f000 f9d8 	bl	8005484 <_printf_common>
 80050d4:	3001      	adds	r0, #1
 80050d6:	f040 8090 	bne.w	80051fa <_printf_float+0x1e2>
 80050da:	f04f 30ff 	mov.w	r0, #4294967295
 80050de:	b00d      	add	sp, #52	; 0x34
 80050e0:	ecbd 8b02 	vpop	{d8}
 80050e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050e8:	4642      	mov	r2, r8
 80050ea:	464b      	mov	r3, r9
 80050ec:	4640      	mov	r0, r8
 80050ee:	4649      	mov	r1, r9
 80050f0:	f7fb fd24 	bl	8000b3c <__aeabi_dcmpun>
 80050f4:	b140      	cbz	r0, 8005108 <_printf_float+0xf0>
 80050f6:	464b      	mov	r3, r9
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	bfbc      	itt	lt
 80050fc:	232d      	movlt	r3, #45	; 0x2d
 80050fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005102:	487f      	ldr	r0, [pc, #508]	; (8005300 <_printf_float+0x2e8>)
 8005104:	4b7f      	ldr	r3, [pc, #508]	; (8005304 <_printf_float+0x2ec>)
 8005106:	e7d1      	b.n	80050ac <_printf_float+0x94>
 8005108:	6863      	ldr	r3, [r4, #4]
 800510a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800510e:	9206      	str	r2, [sp, #24]
 8005110:	1c5a      	adds	r2, r3, #1
 8005112:	d13f      	bne.n	8005194 <_printf_float+0x17c>
 8005114:	2306      	movs	r3, #6
 8005116:	6063      	str	r3, [r4, #4]
 8005118:	9b05      	ldr	r3, [sp, #20]
 800511a:	6861      	ldr	r1, [r4, #4]
 800511c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005120:	2300      	movs	r3, #0
 8005122:	9303      	str	r3, [sp, #12]
 8005124:	ab0a      	add	r3, sp, #40	; 0x28
 8005126:	e9cd b301 	strd	fp, r3, [sp, #4]
 800512a:	ab09      	add	r3, sp, #36	; 0x24
 800512c:	ec49 8b10 	vmov	d0, r8, r9
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	6022      	str	r2, [r4, #0]
 8005134:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005138:	4628      	mov	r0, r5
 800513a:	f7ff fecd 	bl	8004ed8 <__cvt>
 800513e:	9b06      	ldr	r3, [sp, #24]
 8005140:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005142:	2b47      	cmp	r3, #71	; 0x47
 8005144:	4680      	mov	r8, r0
 8005146:	d108      	bne.n	800515a <_printf_float+0x142>
 8005148:	1cc8      	adds	r0, r1, #3
 800514a:	db02      	blt.n	8005152 <_printf_float+0x13a>
 800514c:	6863      	ldr	r3, [r4, #4]
 800514e:	4299      	cmp	r1, r3
 8005150:	dd41      	ble.n	80051d6 <_printf_float+0x1be>
 8005152:	f1ab 0b02 	sub.w	fp, fp, #2
 8005156:	fa5f fb8b 	uxtb.w	fp, fp
 800515a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800515e:	d820      	bhi.n	80051a2 <_printf_float+0x18a>
 8005160:	3901      	subs	r1, #1
 8005162:	465a      	mov	r2, fp
 8005164:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005168:	9109      	str	r1, [sp, #36]	; 0x24
 800516a:	f7ff ff17 	bl	8004f9c <__exponent>
 800516e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005170:	1813      	adds	r3, r2, r0
 8005172:	2a01      	cmp	r2, #1
 8005174:	4681      	mov	r9, r0
 8005176:	6123      	str	r3, [r4, #16]
 8005178:	dc02      	bgt.n	8005180 <_printf_float+0x168>
 800517a:	6822      	ldr	r2, [r4, #0]
 800517c:	07d2      	lsls	r2, r2, #31
 800517e:	d501      	bpl.n	8005184 <_printf_float+0x16c>
 8005180:	3301      	adds	r3, #1
 8005182:	6123      	str	r3, [r4, #16]
 8005184:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005188:	2b00      	cmp	r3, #0
 800518a:	d09c      	beq.n	80050c6 <_printf_float+0xae>
 800518c:	232d      	movs	r3, #45	; 0x2d
 800518e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005192:	e798      	b.n	80050c6 <_printf_float+0xae>
 8005194:	9a06      	ldr	r2, [sp, #24]
 8005196:	2a47      	cmp	r2, #71	; 0x47
 8005198:	d1be      	bne.n	8005118 <_printf_float+0x100>
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1bc      	bne.n	8005118 <_printf_float+0x100>
 800519e:	2301      	movs	r3, #1
 80051a0:	e7b9      	b.n	8005116 <_printf_float+0xfe>
 80051a2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80051a6:	d118      	bne.n	80051da <_printf_float+0x1c2>
 80051a8:	2900      	cmp	r1, #0
 80051aa:	6863      	ldr	r3, [r4, #4]
 80051ac:	dd0b      	ble.n	80051c6 <_printf_float+0x1ae>
 80051ae:	6121      	str	r1, [r4, #16]
 80051b0:	b913      	cbnz	r3, 80051b8 <_printf_float+0x1a0>
 80051b2:	6822      	ldr	r2, [r4, #0]
 80051b4:	07d0      	lsls	r0, r2, #31
 80051b6:	d502      	bpl.n	80051be <_printf_float+0x1a6>
 80051b8:	3301      	adds	r3, #1
 80051ba:	440b      	add	r3, r1
 80051bc:	6123      	str	r3, [r4, #16]
 80051be:	65a1      	str	r1, [r4, #88]	; 0x58
 80051c0:	f04f 0900 	mov.w	r9, #0
 80051c4:	e7de      	b.n	8005184 <_printf_float+0x16c>
 80051c6:	b913      	cbnz	r3, 80051ce <_printf_float+0x1b6>
 80051c8:	6822      	ldr	r2, [r4, #0]
 80051ca:	07d2      	lsls	r2, r2, #31
 80051cc:	d501      	bpl.n	80051d2 <_printf_float+0x1ba>
 80051ce:	3302      	adds	r3, #2
 80051d0:	e7f4      	b.n	80051bc <_printf_float+0x1a4>
 80051d2:	2301      	movs	r3, #1
 80051d4:	e7f2      	b.n	80051bc <_printf_float+0x1a4>
 80051d6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80051da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051dc:	4299      	cmp	r1, r3
 80051de:	db05      	blt.n	80051ec <_printf_float+0x1d4>
 80051e0:	6823      	ldr	r3, [r4, #0]
 80051e2:	6121      	str	r1, [r4, #16]
 80051e4:	07d8      	lsls	r0, r3, #31
 80051e6:	d5ea      	bpl.n	80051be <_printf_float+0x1a6>
 80051e8:	1c4b      	adds	r3, r1, #1
 80051ea:	e7e7      	b.n	80051bc <_printf_float+0x1a4>
 80051ec:	2900      	cmp	r1, #0
 80051ee:	bfd4      	ite	le
 80051f0:	f1c1 0202 	rsble	r2, r1, #2
 80051f4:	2201      	movgt	r2, #1
 80051f6:	4413      	add	r3, r2
 80051f8:	e7e0      	b.n	80051bc <_printf_float+0x1a4>
 80051fa:	6823      	ldr	r3, [r4, #0]
 80051fc:	055a      	lsls	r2, r3, #21
 80051fe:	d407      	bmi.n	8005210 <_printf_float+0x1f8>
 8005200:	6923      	ldr	r3, [r4, #16]
 8005202:	4642      	mov	r2, r8
 8005204:	4631      	mov	r1, r6
 8005206:	4628      	mov	r0, r5
 8005208:	47b8      	blx	r7
 800520a:	3001      	adds	r0, #1
 800520c:	d12c      	bne.n	8005268 <_printf_float+0x250>
 800520e:	e764      	b.n	80050da <_printf_float+0xc2>
 8005210:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005214:	f240 80e0 	bls.w	80053d8 <_printf_float+0x3c0>
 8005218:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800521c:	2200      	movs	r2, #0
 800521e:	2300      	movs	r3, #0
 8005220:	f7fb fc5a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005224:	2800      	cmp	r0, #0
 8005226:	d034      	beq.n	8005292 <_printf_float+0x27a>
 8005228:	4a37      	ldr	r2, [pc, #220]	; (8005308 <_printf_float+0x2f0>)
 800522a:	2301      	movs	r3, #1
 800522c:	4631      	mov	r1, r6
 800522e:	4628      	mov	r0, r5
 8005230:	47b8      	blx	r7
 8005232:	3001      	adds	r0, #1
 8005234:	f43f af51 	beq.w	80050da <_printf_float+0xc2>
 8005238:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800523c:	429a      	cmp	r2, r3
 800523e:	db02      	blt.n	8005246 <_printf_float+0x22e>
 8005240:	6823      	ldr	r3, [r4, #0]
 8005242:	07d8      	lsls	r0, r3, #31
 8005244:	d510      	bpl.n	8005268 <_printf_float+0x250>
 8005246:	ee18 3a10 	vmov	r3, s16
 800524a:	4652      	mov	r2, sl
 800524c:	4631      	mov	r1, r6
 800524e:	4628      	mov	r0, r5
 8005250:	47b8      	blx	r7
 8005252:	3001      	adds	r0, #1
 8005254:	f43f af41 	beq.w	80050da <_printf_float+0xc2>
 8005258:	f04f 0800 	mov.w	r8, #0
 800525c:	f104 091a 	add.w	r9, r4, #26
 8005260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005262:	3b01      	subs	r3, #1
 8005264:	4543      	cmp	r3, r8
 8005266:	dc09      	bgt.n	800527c <_printf_float+0x264>
 8005268:	6823      	ldr	r3, [r4, #0]
 800526a:	079b      	lsls	r3, r3, #30
 800526c:	f100 8105 	bmi.w	800547a <_printf_float+0x462>
 8005270:	68e0      	ldr	r0, [r4, #12]
 8005272:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005274:	4298      	cmp	r0, r3
 8005276:	bfb8      	it	lt
 8005278:	4618      	movlt	r0, r3
 800527a:	e730      	b.n	80050de <_printf_float+0xc6>
 800527c:	2301      	movs	r3, #1
 800527e:	464a      	mov	r2, r9
 8005280:	4631      	mov	r1, r6
 8005282:	4628      	mov	r0, r5
 8005284:	47b8      	blx	r7
 8005286:	3001      	adds	r0, #1
 8005288:	f43f af27 	beq.w	80050da <_printf_float+0xc2>
 800528c:	f108 0801 	add.w	r8, r8, #1
 8005290:	e7e6      	b.n	8005260 <_printf_float+0x248>
 8005292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005294:	2b00      	cmp	r3, #0
 8005296:	dc39      	bgt.n	800530c <_printf_float+0x2f4>
 8005298:	4a1b      	ldr	r2, [pc, #108]	; (8005308 <_printf_float+0x2f0>)
 800529a:	2301      	movs	r3, #1
 800529c:	4631      	mov	r1, r6
 800529e:	4628      	mov	r0, r5
 80052a0:	47b8      	blx	r7
 80052a2:	3001      	adds	r0, #1
 80052a4:	f43f af19 	beq.w	80050da <_printf_float+0xc2>
 80052a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052ac:	4313      	orrs	r3, r2
 80052ae:	d102      	bne.n	80052b6 <_printf_float+0x29e>
 80052b0:	6823      	ldr	r3, [r4, #0]
 80052b2:	07d9      	lsls	r1, r3, #31
 80052b4:	d5d8      	bpl.n	8005268 <_printf_float+0x250>
 80052b6:	ee18 3a10 	vmov	r3, s16
 80052ba:	4652      	mov	r2, sl
 80052bc:	4631      	mov	r1, r6
 80052be:	4628      	mov	r0, r5
 80052c0:	47b8      	blx	r7
 80052c2:	3001      	adds	r0, #1
 80052c4:	f43f af09 	beq.w	80050da <_printf_float+0xc2>
 80052c8:	f04f 0900 	mov.w	r9, #0
 80052cc:	f104 0a1a 	add.w	sl, r4, #26
 80052d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052d2:	425b      	negs	r3, r3
 80052d4:	454b      	cmp	r3, r9
 80052d6:	dc01      	bgt.n	80052dc <_printf_float+0x2c4>
 80052d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052da:	e792      	b.n	8005202 <_printf_float+0x1ea>
 80052dc:	2301      	movs	r3, #1
 80052de:	4652      	mov	r2, sl
 80052e0:	4631      	mov	r1, r6
 80052e2:	4628      	mov	r0, r5
 80052e4:	47b8      	blx	r7
 80052e6:	3001      	adds	r0, #1
 80052e8:	f43f aef7 	beq.w	80050da <_printf_float+0xc2>
 80052ec:	f109 0901 	add.w	r9, r9, #1
 80052f0:	e7ee      	b.n	80052d0 <_printf_float+0x2b8>
 80052f2:	bf00      	nop
 80052f4:	7fefffff 	.word	0x7fefffff
 80052f8:	08007d04 	.word	0x08007d04
 80052fc:	08007d08 	.word	0x08007d08
 8005300:	08007d10 	.word	0x08007d10
 8005304:	08007d0c 	.word	0x08007d0c
 8005308:	08007d14 	.word	0x08007d14
 800530c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800530e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005310:	429a      	cmp	r2, r3
 8005312:	bfa8      	it	ge
 8005314:	461a      	movge	r2, r3
 8005316:	2a00      	cmp	r2, #0
 8005318:	4691      	mov	r9, r2
 800531a:	dc37      	bgt.n	800538c <_printf_float+0x374>
 800531c:	f04f 0b00 	mov.w	fp, #0
 8005320:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005324:	f104 021a 	add.w	r2, r4, #26
 8005328:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800532a:	9305      	str	r3, [sp, #20]
 800532c:	eba3 0309 	sub.w	r3, r3, r9
 8005330:	455b      	cmp	r3, fp
 8005332:	dc33      	bgt.n	800539c <_printf_float+0x384>
 8005334:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005338:	429a      	cmp	r2, r3
 800533a:	db3b      	blt.n	80053b4 <_printf_float+0x39c>
 800533c:	6823      	ldr	r3, [r4, #0]
 800533e:	07da      	lsls	r2, r3, #31
 8005340:	d438      	bmi.n	80053b4 <_printf_float+0x39c>
 8005342:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005344:	9a05      	ldr	r2, [sp, #20]
 8005346:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005348:	1a9a      	subs	r2, r3, r2
 800534a:	eba3 0901 	sub.w	r9, r3, r1
 800534e:	4591      	cmp	r9, r2
 8005350:	bfa8      	it	ge
 8005352:	4691      	movge	r9, r2
 8005354:	f1b9 0f00 	cmp.w	r9, #0
 8005358:	dc35      	bgt.n	80053c6 <_printf_float+0x3ae>
 800535a:	f04f 0800 	mov.w	r8, #0
 800535e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005362:	f104 0a1a 	add.w	sl, r4, #26
 8005366:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800536a:	1a9b      	subs	r3, r3, r2
 800536c:	eba3 0309 	sub.w	r3, r3, r9
 8005370:	4543      	cmp	r3, r8
 8005372:	f77f af79 	ble.w	8005268 <_printf_float+0x250>
 8005376:	2301      	movs	r3, #1
 8005378:	4652      	mov	r2, sl
 800537a:	4631      	mov	r1, r6
 800537c:	4628      	mov	r0, r5
 800537e:	47b8      	blx	r7
 8005380:	3001      	adds	r0, #1
 8005382:	f43f aeaa 	beq.w	80050da <_printf_float+0xc2>
 8005386:	f108 0801 	add.w	r8, r8, #1
 800538a:	e7ec      	b.n	8005366 <_printf_float+0x34e>
 800538c:	4613      	mov	r3, r2
 800538e:	4631      	mov	r1, r6
 8005390:	4642      	mov	r2, r8
 8005392:	4628      	mov	r0, r5
 8005394:	47b8      	blx	r7
 8005396:	3001      	adds	r0, #1
 8005398:	d1c0      	bne.n	800531c <_printf_float+0x304>
 800539a:	e69e      	b.n	80050da <_printf_float+0xc2>
 800539c:	2301      	movs	r3, #1
 800539e:	4631      	mov	r1, r6
 80053a0:	4628      	mov	r0, r5
 80053a2:	9205      	str	r2, [sp, #20]
 80053a4:	47b8      	blx	r7
 80053a6:	3001      	adds	r0, #1
 80053a8:	f43f ae97 	beq.w	80050da <_printf_float+0xc2>
 80053ac:	9a05      	ldr	r2, [sp, #20]
 80053ae:	f10b 0b01 	add.w	fp, fp, #1
 80053b2:	e7b9      	b.n	8005328 <_printf_float+0x310>
 80053b4:	ee18 3a10 	vmov	r3, s16
 80053b8:	4652      	mov	r2, sl
 80053ba:	4631      	mov	r1, r6
 80053bc:	4628      	mov	r0, r5
 80053be:	47b8      	blx	r7
 80053c0:	3001      	adds	r0, #1
 80053c2:	d1be      	bne.n	8005342 <_printf_float+0x32a>
 80053c4:	e689      	b.n	80050da <_printf_float+0xc2>
 80053c6:	9a05      	ldr	r2, [sp, #20]
 80053c8:	464b      	mov	r3, r9
 80053ca:	4442      	add	r2, r8
 80053cc:	4631      	mov	r1, r6
 80053ce:	4628      	mov	r0, r5
 80053d0:	47b8      	blx	r7
 80053d2:	3001      	adds	r0, #1
 80053d4:	d1c1      	bne.n	800535a <_printf_float+0x342>
 80053d6:	e680      	b.n	80050da <_printf_float+0xc2>
 80053d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053da:	2a01      	cmp	r2, #1
 80053dc:	dc01      	bgt.n	80053e2 <_printf_float+0x3ca>
 80053de:	07db      	lsls	r3, r3, #31
 80053e0:	d538      	bpl.n	8005454 <_printf_float+0x43c>
 80053e2:	2301      	movs	r3, #1
 80053e4:	4642      	mov	r2, r8
 80053e6:	4631      	mov	r1, r6
 80053e8:	4628      	mov	r0, r5
 80053ea:	47b8      	blx	r7
 80053ec:	3001      	adds	r0, #1
 80053ee:	f43f ae74 	beq.w	80050da <_printf_float+0xc2>
 80053f2:	ee18 3a10 	vmov	r3, s16
 80053f6:	4652      	mov	r2, sl
 80053f8:	4631      	mov	r1, r6
 80053fa:	4628      	mov	r0, r5
 80053fc:	47b8      	blx	r7
 80053fe:	3001      	adds	r0, #1
 8005400:	f43f ae6b 	beq.w	80050da <_printf_float+0xc2>
 8005404:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005408:	2200      	movs	r2, #0
 800540a:	2300      	movs	r3, #0
 800540c:	f7fb fb64 	bl	8000ad8 <__aeabi_dcmpeq>
 8005410:	b9d8      	cbnz	r0, 800544a <_printf_float+0x432>
 8005412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005414:	f108 0201 	add.w	r2, r8, #1
 8005418:	3b01      	subs	r3, #1
 800541a:	4631      	mov	r1, r6
 800541c:	4628      	mov	r0, r5
 800541e:	47b8      	blx	r7
 8005420:	3001      	adds	r0, #1
 8005422:	d10e      	bne.n	8005442 <_printf_float+0x42a>
 8005424:	e659      	b.n	80050da <_printf_float+0xc2>
 8005426:	2301      	movs	r3, #1
 8005428:	4652      	mov	r2, sl
 800542a:	4631      	mov	r1, r6
 800542c:	4628      	mov	r0, r5
 800542e:	47b8      	blx	r7
 8005430:	3001      	adds	r0, #1
 8005432:	f43f ae52 	beq.w	80050da <_printf_float+0xc2>
 8005436:	f108 0801 	add.w	r8, r8, #1
 800543a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800543c:	3b01      	subs	r3, #1
 800543e:	4543      	cmp	r3, r8
 8005440:	dcf1      	bgt.n	8005426 <_printf_float+0x40e>
 8005442:	464b      	mov	r3, r9
 8005444:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005448:	e6dc      	b.n	8005204 <_printf_float+0x1ec>
 800544a:	f04f 0800 	mov.w	r8, #0
 800544e:	f104 0a1a 	add.w	sl, r4, #26
 8005452:	e7f2      	b.n	800543a <_printf_float+0x422>
 8005454:	2301      	movs	r3, #1
 8005456:	4642      	mov	r2, r8
 8005458:	e7df      	b.n	800541a <_printf_float+0x402>
 800545a:	2301      	movs	r3, #1
 800545c:	464a      	mov	r2, r9
 800545e:	4631      	mov	r1, r6
 8005460:	4628      	mov	r0, r5
 8005462:	47b8      	blx	r7
 8005464:	3001      	adds	r0, #1
 8005466:	f43f ae38 	beq.w	80050da <_printf_float+0xc2>
 800546a:	f108 0801 	add.w	r8, r8, #1
 800546e:	68e3      	ldr	r3, [r4, #12]
 8005470:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005472:	1a5b      	subs	r3, r3, r1
 8005474:	4543      	cmp	r3, r8
 8005476:	dcf0      	bgt.n	800545a <_printf_float+0x442>
 8005478:	e6fa      	b.n	8005270 <_printf_float+0x258>
 800547a:	f04f 0800 	mov.w	r8, #0
 800547e:	f104 0919 	add.w	r9, r4, #25
 8005482:	e7f4      	b.n	800546e <_printf_float+0x456>

08005484 <_printf_common>:
 8005484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005488:	4616      	mov	r6, r2
 800548a:	4699      	mov	r9, r3
 800548c:	688a      	ldr	r2, [r1, #8]
 800548e:	690b      	ldr	r3, [r1, #16]
 8005490:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005494:	4293      	cmp	r3, r2
 8005496:	bfb8      	it	lt
 8005498:	4613      	movlt	r3, r2
 800549a:	6033      	str	r3, [r6, #0]
 800549c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80054a0:	4607      	mov	r7, r0
 80054a2:	460c      	mov	r4, r1
 80054a4:	b10a      	cbz	r2, 80054aa <_printf_common+0x26>
 80054a6:	3301      	adds	r3, #1
 80054a8:	6033      	str	r3, [r6, #0]
 80054aa:	6823      	ldr	r3, [r4, #0]
 80054ac:	0699      	lsls	r1, r3, #26
 80054ae:	bf42      	ittt	mi
 80054b0:	6833      	ldrmi	r3, [r6, #0]
 80054b2:	3302      	addmi	r3, #2
 80054b4:	6033      	strmi	r3, [r6, #0]
 80054b6:	6825      	ldr	r5, [r4, #0]
 80054b8:	f015 0506 	ands.w	r5, r5, #6
 80054bc:	d106      	bne.n	80054cc <_printf_common+0x48>
 80054be:	f104 0a19 	add.w	sl, r4, #25
 80054c2:	68e3      	ldr	r3, [r4, #12]
 80054c4:	6832      	ldr	r2, [r6, #0]
 80054c6:	1a9b      	subs	r3, r3, r2
 80054c8:	42ab      	cmp	r3, r5
 80054ca:	dc26      	bgt.n	800551a <_printf_common+0x96>
 80054cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80054d0:	1e13      	subs	r3, r2, #0
 80054d2:	6822      	ldr	r2, [r4, #0]
 80054d4:	bf18      	it	ne
 80054d6:	2301      	movne	r3, #1
 80054d8:	0692      	lsls	r2, r2, #26
 80054da:	d42b      	bmi.n	8005534 <_printf_common+0xb0>
 80054dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054e0:	4649      	mov	r1, r9
 80054e2:	4638      	mov	r0, r7
 80054e4:	47c0      	blx	r8
 80054e6:	3001      	adds	r0, #1
 80054e8:	d01e      	beq.n	8005528 <_printf_common+0xa4>
 80054ea:	6823      	ldr	r3, [r4, #0]
 80054ec:	68e5      	ldr	r5, [r4, #12]
 80054ee:	6832      	ldr	r2, [r6, #0]
 80054f0:	f003 0306 	and.w	r3, r3, #6
 80054f4:	2b04      	cmp	r3, #4
 80054f6:	bf08      	it	eq
 80054f8:	1aad      	subeq	r5, r5, r2
 80054fa:	68a3      	ldr	r3, [r4, #8]
 80054fc:	6922      	ldr	r2, [r4, #16]
 80054fe:	bf0c      	ite	eq
 8005500:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005504:	2500      	movne	r5, #0
 8005506:	4293      	cmp	r3, r2
 8005508:	bfc4      	itt	gt
 800550a:	1a9b      	subgt	r3, r3, r2
 800550c:	18ed      	addgt	r5, r5, r3
 800550e:	2600      	movs	r6, #0
 8005510:	341a      	adds	r4, #26
 8005512:	42b5      	cmp	r5, r6
 8005514:	d11a      	bne.n	800554c <_printf_common+0xc8>
 8005516:	2000      	movs	r0, #0
 8005518:	e008      	b.n	800552c <_printf_common+0xa8>
 800551a:	2301      	movs	r3, #1
 800551c:	4652      	mov	r2, sl
 800551e:	4649      	mov	r1, r9
 8005520:	4638      	mov	r0, r7
 8005522:	47c0      	blx	r8
 8005524:	3001      	adds	r0, #1
 8005526:	d103      	bne.n	8005530 <_printf_common+0xac>
 8005528:	f04f 30ff 	mov.w	r0, #4294967295
 800552c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005530:	3501      	adds	r5, #1
 8005532:	e7c6      	b.n	80054c2 <_printf_common+0x3e>
 8005534:	18e1      	adds	r1, r4, r3
 8005536:	1c5a      	adds	r2, r3, #1
 8005538:	2030      	movs	r0, #48	; 0x30
 800553a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800553e:	4422      	add	r2, r4
 8005540:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005544:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005548:	3302      	adds	r3, #2
 800554a:	e7c7      	b.n	80054dc <_printf_common+0x58>
 800554c:	2301      	movs	r3, #1
 800554e:	4622      	mov	r2, r4
 8005550:	4649      	mov	r1, r9
 8005552:	4638      	mov	r0, r7
 8005554:	47c0      	blx	r8
 8005556:	3001      	adds	r0, #1
 8005558:	d0e6      	beq.n	8005528 <_printf_common+0xa4>
 800555a:	3601      	adds	r6, #1
 800555c:	e7d9      	b.n	8005512 <_printf_common+0x8e>
	...

08005560 <_printf_i>:
 8005560:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005564:	7e0f      	ldrb	r7, [r1, #24]
 8005566:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005568:	2f78      	cmp	r7, #120	; 0x78
 800556a:	4691      	mov	r9, r2
 800556c:	4680      	mov	r8, r0
 800556e:	460c      	mov	r4, r1
 8005570:	469a      	mov	sl, r3
 8005572:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005576:	d807      	bhi.n	8005588 <_printf_i+0x28>
 8005578:	2f62      	cmp	r7, #98	; 0x62
 800557a:	d80a      	bhi.n	8005592 <_printf_i+0x32>
 800557c:	2f00      	cmp	r7, #0
 800557e:	f000 80d8 	beq.w	8005732 <_printf_i+0x1d2>
 8005582:	2f58      	cmp	r7, #88	; 0x58
 8005584:	f000 80a3 	beq.w	80056ce <_printf_i+0x16e>
 8005588:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800558c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005590:	e03a      	b.n	8005608 <_printf_i+0xa8>
 8005592:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005596:	2b15      	cmp	r3, #21
 8005598:	d8f6      	bhi.n	8005588 <_printf_i+0x28>
 800559a:	a101      	add	r1, pc, #4	; (adr r1, 80055a0 <_printf_i+0x40>)
 800559c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055a0:	080055f9 	.word	0x080055f9
 80055a4:	0800560d 	.word	0x0800560d
 80055a8:	08005589 	.word	0x08005589
 80055ac:	08005589 	.word	0x08005589
 80055b0:	08005589 	.word	0x08005589
 80055b4:	08005589 	.word	0x08005589
 80055b8:	0800560d 	.word	0x0800560d
 80055bc:	08005589 	.word	0x08005589
 80055c0:	08005589 	.word	0x08005589
 80055c4:	08005589 	.word	0x08005589
 80055c8:	08005589 	.word	0x08005589
 80055cc:	08005719 	.word	0x08005719
 80055d0:	0800563d 	.word	0x0800563d
 80055d4:	080056fb 	.word	0x080056fb
 80055d8:	08005589 	.word	0x08005589
 80055dc:	08005589 	.word	0x08005589
 80055e0:	0800573b 	.word	0x0800573b
 80055e4:	08005589 	.word	0x08005589
 80055e8:	0800563d 	.word	0x0800563d
 80055ec:	08005589 	.word	0x08005589
 80055f0:	08005589 	.word	0x08005589
 80055f4:	08005703 	.word	0x08005703
 80055f8:	682b      	ldr	r3, [r5, #0]
 80055fa:	1d1a      	adds	r2, r3, #4
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	602a      	str	r2, [r5, #0]
 8005600:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005604:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005608:	2301      	movs	r3, #1
 800560a:	e0a3      	b.n	8005754 <_printf_i+0x1f4>
 800560c:	6820      	ldr	r0, [r4, #0]
 800560e:	6829      	ldr	r1, [r5, #0]
 8005610:	0606      	lsls	r6, r0, #24
 8005612:	f101 0304 	add.w	r3, r1, #4
 8005616:	d50a      	bpl.n	800562e <_printf_i+0xce>
 8005618:	680e      	ldr	r6, [r1, #0]
 800561a:	602b      	str	r3, [r5, #0]
 800561c:	2e00      	cmp	r6, #0
 800561e:	da03      	bge.n	8005628 <_printf_i+0xc8>
 8005620:	232d      	movs	r3, #45	; 0x2d
 8005622:	4276      	negs	r6, r6
 8005624:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005628:	485e      	ldr	r0, [pc, #376]	; (80057a4 <_printf_i+0x244>)
 800562a:	230a      	movs	r3, #10
 800562c:	e019      	b.n	8005662 <_printf_i+0x102>
 800562e:	680e      	ldr	r6, [r1, #0]
 8005630:	602b      	str	r3, [r5, #0]
 8005632:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005636:	bf18      	it	ne
 8005638:	b236      	sxthne	r6, r6
 800563a:	e7ef      	b.n	800561c <_printf_i+0xbc>
 800563c:	682b      	ldr	r3, [r5, #0]
 800563e:	6820      	ldr	r0, [r4, #0]
 8005640:	1d19      	adds	r1, r3, #4
 8005642:	6029      	str	r1, [r5, #0]
 8005644:	0601      	lsls	r1, r0, #24
 8005646:	d501      	bpl.n	800564c <_printf_i+0xec>
 8005648:	681e      	ldr	r6, [r3, #0]
 800564a:	e002      	b.n	8005652 <_printf_i+0xf2>
 800564c:	0646      	lsls	r6, r0, #25
 800564e:	d5fb      	bpl.n	8005648 <_printf_i+0xe8>
 8005650:	881e      	ldrh	r6, [r3, #0]
 8005652:	4854      	ldr	r0, [pc, #336]	; (80057a4 <_printf_i+0x244>)
 8005654:	2f6f      	cmp	r7, #111	; 0x6f
 8005656:	bf0c      	ite	eq
 8005658:	2308      	moveq	r3, #8
 800565a:	230a      	movne	r3, #10
 800565c:	2100      	movs	r1, #0
 800565e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005662:	6865      	ldr	r5, [r4, #4]
 8005664:	60a5      	str	r5, [r4, #8]
 8005666:	2d00      	cmp	r5, #0
 8005668:	bfa2      	ittt	ge
 800566a:	6821      	ldrge	r1, [r4, #0]
 800566c:	f021 0104 	bicge.w	r1, r1, #4
 8005670:	6021      	strge	r1, [r4, #0]
 8005672:	b90e      	cbnz	r6, 8005678 <_printf_i+0x118>
 8005674:	2d00      	cmp	r5, #0
 8005676:	d04d      	beq.n	8005714 <_printf_i+0x1b4>
 8005678:	4615      	mov	r5, r2
 800567a:	fbb6 f1f3 	udiv	r1, r6, r3
 800567e:	fb03 6711 	mls	r7, r3, r1, r6
 8005682:	5dc7      	ldrb	r7, [r0, r7]
 8005684:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005688:	4637      	mov	r7, r6
 800568a:	42bb      	cmp	r3, r7
 800568c:	460e      	mov	r6, r1
 800568e:	d9f4      	bls.n	800567a <_printf_i+0x11a>
 8005690:	2b08      	cmp	r3, #8
 8005692:	d10b      	bne.n	80056ac <_printf_i+0x14c>
 8005694:	6823      	ldr	r3, [r4, #0]
 8005696:	07de      	lsls	r6, r3, #31
 8005698:	d508      	bpl.n	80056ac <_printf_i+0x14c>
 800569a:	6923      	ldr	r3, [r4, #16]
 800569c:	6861      	ldr	r1, [r4, #4]
 800569e:	4299      	cmp	r1, r3
 80056a0:	bfde      	ittt	le
 80056a2:	2330      	movle	r3, #48	; 0x30
 80056a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80056a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80056ac:	1b52      	subs	r2, r2, r5
 80056ae:	6122      	str	r2, [r4, #16]
 80056b0:	f8cd a000 	str.w	sl, [sp]
 80056b4:	464b      	mov	r3, r9
 80056b6:	aa03      	add	r2, sp, #12
 80056b8:	4621      	mov	r1, r4
 80056ba:	4640      	mov	r0, r8
 80056bc:	f7ff fee2 	bl	8005484 <_printf_common>
 80056c0:	3001      	adds	r0, #1
 80056c2:	d14c      	bne.n	800575e <_printf_i+0x1fe>
 80056c4:	f04f 30ff 	mov.w	r0, #4294967295
 80056c8:	b004      	add	sp, #16
 80056ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ce:	4835      	ldr	r0, [pc, #212]	; (80057a4 <_printf_i+0x244>)
 80056d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80056d4:	6829      	ldr	r1, [r5, #0]
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80056dc:	6029      	str	r1, [r5, #0]
 80056de:	061d      	lsls	r5, r3, #24
 80056e0:	d514      	bpl.n	800570c <_printf_i+0x1ac>
 80056e2:	07df      	lsls	r7, r3, #31
 80056e4:	bf44      	itt	mi
 80056e6:	f043 0320 	orrmi.w	r3, r3, #32
 80056ea:	6023      	strmi	r3, [r4, #0]
 80056ec:	b91e      	cbnz	r6, 80056f6 <_printf_i+0x196>
 80056ee:	6823      	ldr	r3, [r4, #0]
 80056f0:	f023 0320 	bic.w	r3, r3, #32
 80056f4:	6023      	str	r3, [r4, #0]
 80056f6:	2310      	movs	r3, #16
 80056f8:	e7b0      	b.n	800565c <_printf_i+0xfc>
 80056fa:	6823      	ldr	r3, [r4, #0]
 80056fc:	f043 0320 	orr.w	r3, r3, #32
 8005700:	6023      	str	r3, [r4, #0]
 8005702:	2378      	movs	r3, #120	; 0x78
 8005704:	4828      	ldr	r0, [pc, #160]	; (80057a8 <_printf_i+0x248>)
 8005706:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800570a:	e7e3      	b.n	80056d4 <_printf_i+0x174>
 800570c:	0659      	lsls	r1, r3, #25
 800570e:	bf48      	it	mi
 8005710:	b2b6      	uxthmi	r6, r6
 8005712:	e7e6      	b.n	80056e2 <_printf_i+0x182>
 8005714:	4615      	mov	r5, r2
 8005716:	e7bb      	b.n	8005690 <_printf_i+0x130>
 8005718:	682b      	ldr	r3, [r5, #0]
 800571a:	6826      	ldr	r6, [r4, #0]
 800571c:	6961      	ldr	r1, [r4, #20]
 800571e:	1d18      	adds	r0, r3, #4
 8005720:	6028      	str	r0, [r5, #0]
 8005722:	0635      	lsls	r5, r6, #24
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	d501      	bpl.n	800572c <_printf_i+0x1cc>
 8005728:	6019      	str	r1, [r3, #0]
 800572a:	e002      	b.n	8005732 <_printf_i+0x1d2>
 800572c:	0670      	lsls	r0, r6, #25
 800572e:	d5fb      	bpl.n	8005728 <_printf_i+0x1c8>
 8005730:	8019      	strh	r1, [r3, #0]
 8005732:	2300      	movs	r3, #0
 8005734:	6123      	str	r3, [r4, #16]
 8005736:	4615      	mov	r5, r2
 8005738:	e7ba      	b.n	80056b0 <_printf_i+0x150>
 800573a:	682b      	ldr	r3, [r5, #0]
 800573c:	1d1a      	adds	r2, r3, #4
 800573e:	602a      	str	r2, [r5, #0]
 8005740:	681d      	ldr	r5, [r3, #0]
 8005742:	6862      	ldr	r2, [r4, #4]
 8005744:	2100      	movs	r1, #0
 8005746:	4628      	mov	r0, r5
 8005748:	f7fa fd52 	bl	80001f0 <memchr>
 800574c:	b108      	cbz	r0, 8005752 <_printf_i+0x1f2>
 800574e:	1b40      	subs	r0, r0, r5
 8005750:	6060      	str	r0, [r4, #4]
 8005752:	6863      	ldr	r3, [r4, #4]
 8005754:	6123      	str	r3, [r4, #16]
 8005756:	2300      	movs	r3, #0
 8005758:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800575c:	e7a8      	b.n	80056b0 <_printf_i+0x150>
 800575e:	6923      	ldr	r3, [r4, #16]
 8005760:	462a      	mov	r2, r5
 8005762:	4649      	mov	r1, r9
 8005764:	4640      	mov	r0, r8
 8005766:	47d0      	blx	sl
 8005768:	3001      	adds	r0, #1
 800576a:	d0ab      	beq.n	80056c4 <_printf_i+0x164>
 800576c:	6823      	ldr	r3, [r4, #0]
 800576e:	079b      	lsls	r3, r3, #30
 8005770:	d413      	bmi.n	800579a <_printf_i+0x23a>
 8005772:	68e0      	ldr	r0, [r4, #12]
 8005774:	9b03      	ldr	r3, [sp, #12]
 8005776:	4298      	cmp	r0, r3
 8005778:	bfb8      	it	lt
 800577a:	4618      	movlt	r0, r3
 800577c:	e7a4      	b.n	80056c8 <_printf_i+0x168>
 800577e:	2301      	movs	r3, #1
 8005780:	4632      	mov	r2, r6
 8005782:	4649      	mov	r1, r9
 8005784:	4640      	mov	r0, r8
 8005786:	47d0      	blx	sl
 8005788:	3001      	adds	r0, #1
 800578a:	d09b      	beq.n	80056c4 <_printf_i+0x164>
 800578c:	3501      	adds	r5, #1
 800578e:	68e3      	ldr	r3, [r4, #12]
 8005790:	9903      	ldr	r1, [sp, #12]
 8005792:	1a5b      	subs	r3, r3, r1
 8005794:	42ab      	cmp	r3, r5
 8005796:	dcf2      	bgt.n	800577e <_printf_i+0x21e>
 8005798:	e7eb      	b.n	8005772 <_printf_i+0x212>
 800579a:	2500      	movs	r5, #0
 800579c:	f104 0619 	add.w	r6, r4, #25
 80057a0:	e7f5      	b.n	800578e <_printf_i+0x22e>
 80057a2:	bf00      	nop
 80057a4:	08007d16 	.word	0x08007d16
 80057a8:	08007d27 	.word	0x08007d27

080057ac <siprintf>:
 80057ac:	b40e      	push	{r1, r2, r3}
 80057ae:	b500      	push	{lr}
 80057b0:	b09c      	sub	sp, #112	; 0x70
 80057b2:	ab1d      	add	r3, sp, #116	; 0x74
 80057b4:	9002      	str	r0, [sp, #8]
 80057b6:	9006      	str	r0, [sp, #24]
 80057b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80057bc:	4809      	ldr	r0, [pc, #36]	; (80057e4 <siprintf+0x38>)
 80057be:	9107      	str	r1, [sp, #28]
 80057c0:	9104      	str	r1, [sp, #16]
 80057c2:	4909      	ldr	r1, [pc, #36]	; (80057e8 <siprintf+0x3c>)
 80057c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80057c8:	9105      	str	r1, [sp, #20]
 80057ca:	6800      	ldr	r0, [r0, #0]
 80057cc:	9301      	str	r3, [sp, #4]
 80057ce:	a902      	add	r1, sp, #8
 80057d0:	f001 fb78 	bl	8006ec4 <_svfiprintf_r>
 80057d4:	9b02      	ldr	r3, [sp, #8]
 80057d6:	2200      	movs	r2, #0
 80057d8:	701a      	strb	r2, [r3, #0]
 80057da:	b01c      	add	sp, #112	; 0x70
 80057dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80057e0:	b003      	add	sp, #12
 80057e2:	4770      	bx	lr
 80057e4:	20000010 	.word	0x20000010
 80057e8:	ffff0208 	.word	0xffff0208

080057ec <quorem>:
 80057ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f0:	6903      	ldr	r3, [r0, #16]
 80057f2:	690c      	ldr	r4, [r1, #16]
 80057f4:	42a3      	cmp	r3, r4
 80057f6:	4607      	mov	r7, r0
 80057f8:	f2c0 8081 	blt.w	80058fe <quorem+0x112>
 80057fc:	3c01      	subs	r4, #1
 80057fe:	f101 0814 	add.w	r8, r1, #20
 8005802:	f100 0514 	add.w	r5, r0, #20
 8005806:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800580a:	9301      	str	r3, [sp, #4]
 800580c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005810:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005814:	3301      	adds	r3, #1
 8005816:	429a      	cmp	r2, r3
 8005818:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800581c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005820:	fbb2 f6f3 	udiv	r6, r2, r3
 8005824:	d331      	bcc.n	800588a <quorem+0x9e>
 8005826:	f04f 0e00 	mov.w	lr, #0
 800582a:	4640      	mov	r0, r8
 800582c:	46ac      	mov	ip, r5
 800582e:	46f2      	mov	sl, lr
 8005830:	f850 2b04 	ldr.w	r2, [r0], #4
 8005834:	b293      	uxth	r3, r2
 8005836:	fb06 e303 	mla	r3, r6, r3, lr
 800583a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800583e:	b29b      	uxth	r3, r3
 8005840:	ebaa 0303 	sub.w	r3, sl, r3
 8005844:	f8dc a000 	ldr.w	sl, [ip]
 8005848:	0c12      	lsrs	r2, r2, #16
 800584a:	fa13 f38a 	uxtah	r3, r3, sl
 800584e:	fb06 e202 	mla	r2, r6, r2, lr
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	9b00      	ldr	r3, [sp, #0]
 8005856:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800585a:	b292      	uxth	r2, r2
 800585c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005860:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005864:	f8bd 3000 	ldrh.w	r3, [sp]
 8005868:	4581      	cmp	r9, r0
 800586a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800586e:	f84c 3b04 	str.w	r3, [ip], #4
 8005872:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005876:	d2db      	bcs.n	8005830 <quorem+0x44>
 8005878:	f855 300b 	ldr.w	r3, [r5, fp]
 800587c:	b92b      	cbnz	r3, 800588a <quorem+0x9e>
 800587e:	9b01      	ldr	r3, [sp, #4]
 8005880:	3b04      	subs	r3, #4
 8005882:	429d      	cmp	r5, r3
 8005884:	461a      	mov	r2, r3
 8005886:	d32e      	bcc.n	80058e6 <quorem+0xfa>
 8005888:	613c      	str	r4, [r7, #16]
 800588a:	4638      	mov	r0, r7
 800588c:	f001 f8c6 	bl	8006a1c <__mcmp>
 8005890:	2800      	cmp	r0, #0
 8005892:	db24      	blt.n	80058de <quorem+0xf2>
 8005894:	3601      	adds	r6, #1
 8005896:	4628      	mov	r0, r5
 8005898:	f04f 0c00 	mov.w	ip, #0
 800589c:	f858 2b04 	ldr.w	r2, [r8], #4
 80058a0:	f8d0 e000 	ldr.w	lr, [r0]
 80058a4:	b293      	uxth	r3, r2
 80058a6:	ebac 0303 	sub.w	r3, ip, r3
 80058aa:	0c12      	lsrs	r2, r2, #16
 80058ac:	fa13 f38e 	uxtah	r3, r3, lr
 80058b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80058b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058be:	45c1      	cmp	r9, r8
 80058c0:	f840 3b04 	str.w	r3, [r0], #4
 80058c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80058c8:	d2e8      	bcs.n	800589c <quorem+0xb0>
 80058ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80058ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80058d2:	b922      	cbnz	r2, 80058de <quorem+0xf2>
 80058d4:	3b04      	subs	r3, #4
 80058d6:	429d      	cmp	r5, r3
 80058d8:	461a      	mov	r2, r3
 80058da:	d30a      	bcc.n	80058f2 <quorem+0x106>
 80058dc:	613c      	str	r4, [r7, #16]
 80058de:	4630      	mov	r0, r6
 80058e0:	b003      	add	sp, #12
 80058e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058e6:	6812      	ldr	r2, [r2, #0]
 80058e8:	3b04      	subs	r3, #4
 80058ea:	2a00      	cmp	r2, #0
 80058ec:	d1cc      	bne.n	8005888 <quorem+0x9c>
 80058ee:	3c01      	subs	r4, #1
 80058f0:	e7c7      	b.n	8005882 <quorem+0x96>
 80058f2:	6812      	ldr	r2, [r2, #0]
 80058f4:	3b04      	subs	r3, #4
 80058f6:	2a00      	cmp	r2, #0
 80058f8:	d1f0      	bne.n	80058dc <quorem+0xf0>
 80058fa:	3c01      	subs	r4, #1
 80058fc:	e7eb      	b.n	80058d6 <quorem+0xea>
 80058fe:	2000      	movs	r0, #0
 8005900:	e7ee      	b.n	80058e0 <quorem+0xf4>
 8005902:	0000      	movs	r0, r0
 8005904:	0000      	movs	r0, r0
	...

08005908 <_dtoa_r>:
 8005908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800590c:	ed2d 8b04 	vpush	{d8-d9}
 8005910:	ec57 6b10 	vmov	r6, r7, d0
 8005914:	b093      	sub	sp, #76	; 0x4c
 8005916:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005918:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800591c:	9106      	str	r1, [sp, #24]
 800591e:	ee10 aa10 	vmov	sl, s0
 8005922:	4604      	mov	r4, r0
 8005924:	9209      	str	r2, [sp, #36]	; 0x24
 8005926:	930c      	str	r3, [sp, #48]	; 0x30
 8005928:	46bb      	mov	fp, r7
 800592a:	b975      	cbnz	r5, 800594a <_dtoa_r+0x42>
 800592c:	2010      	movs	r0, #16
 800592e:	f000 fddd 	bl	80064ec <malloc>
 8005932:	4602      	mov	r2, r0
 8005934:	6260      	str	r0, [r4, #36]	; 0x24
 8005936:	b920      	cbnz	r0, 8005942 <_dtoa_r+0x3a>
 8005938:	4ba7      	ldr	r3, [pc, #668]	; (8005bd8 <_dtoa_r+0x2d0>)
 800593a:	21ea      	movs	r1, #234	; 0xea
 800593c:	48a7      	ldr	r0, [pc, #668]	; (8005bdc <_dtoa_r+0x2d4>)
 800593e:	f001 fbd1 	bl	80070e4 <__assert_func>
 8005942:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005946:	6005      	str	r5, [r0, #0]
 8005948:	60c5      	str	r5, [r0, #12]
 800594a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800594c:	6819      	ldr	r1, [r3, #0]
 800594e:	b151      	cbz	r1, 8005966 <_dtoa_r+0x5e>
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	604a      	str	r2, [r1, #4]
 8005954:	2301      	movs	r3, #1
 8005956:	4093      	lsls	r3, r2
 8005958:	608b      	str	r3, [r1, #8]
 800595a:	4620      	mov	r0, r4
 800595c:	f000 fe1c 	bl	8006598 <_Bfree>
 8005960:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005962:	2200      	movs	r2, #0
 8005964:	601a      	str	r2, [r3, #0]
 8005966:	1e3b      	subs	r3, r7, #0
 8005968:	bfaa      	itet	ge
 800596a:	2300      	movge	r3, #0
 800596c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005970:	f8c8 3000 	strge.w	r3, [r8]
 8005974:	4b9a      	ldr	r3, [pc, #616]	; (8005be0 <_dtoa_r+0x2d8>)
 8005976:	bfbc      	itt	lt
 8005978:	2201      	movlt	r2, #1
 800597a:	f8c8 2000 	strlt.w	r2, [r8]
 800597e:	ea33 030b 	bics.w	r3, r3, fp
 8005982:	d11b      	bne.n	80059bc <_dtoa_r+0xb4>
 8005984:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005986:	f242 730f 	movw	r3, #9999	; 0x270f
 800598a:	6013      	str	r3, [r2, #0]
 800598c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005990:	4333      	orrs	r3, r6
 8005992:	f000 8592 	beq.w	80064ba <_dtoa_r+0xbb2>
 8005996:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005998:	b963      	cbnz	r3, 80059b4 <_dtoa_r+0xac>
 800599a:	4b92      	ldr	r3, [pc, #584]	; (8005be4 <_dtoa_r+0x2dc>)
 800599c:	e022      	b.n	80059e4 <_dtoa_r+0xdc>
 800599e:	4b92      	ldr	r3, [pc, #584]	; (8005be8 <_dtoa_r+0x2e0>)
 80059a0:	9301      	str	r3, [sp, #4]
 80059a2:	3308      	adds	r3, #8
 80059a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80059a6:	6013      	str	r3, [r2, #0]
 80059a8:	9801      	ldr	r0, [sp, #4]
 80059aa:	b013      	add	sp, #76	; 0x4c
 80059ac:	ecbd 8b04 	vpop	{d8-d9}
 80059b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059b4:	4b8b      	ldr	r3, [pc, #556]	; (8005be4 <_dtoa_r+0x2dc>)
 80059b6:	9301      	str	r3, [sp, #4]
 80059b8:	3303      	adds	r3, #3
 80059ba:	e7f3      	b.n	80059a4 <_dtoa_r+0x9c>
 80059bc:	2200      	movs	r2, #0
 80059be:	2300      	movs	r3, #0
 80059c0:	4650      	mov	r0, sl
 80059c2:	4659      	mov	r1, fp
 80059c4:	f7fb f888 	bl	8000ad8 <__aeabi_dcmpeq>
 80059c8:	ec4b ab19 	vmov	d9, sl, fp
 80059cc:	4680      	mov	r8, r0
 80059ce:	b158      	cbz	r0, 80059e8 <_dtoa_r+0xe0>
 80059d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059d2:	2301      	movs	r3, #1
 80059d4:	6013      	str	r3, [r2, #0]
 80059d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f000 856b 	beq.w	80064b4 <_dtoa_r+0xbac>
 80059de:	4883      	ldr	r0, [pc, #524]	; (8005bec <_dtoa_r+0x2e4>)
 80059e0:	6018      	str	r0, [r3, #0]
 80059e2:	1e43      	subs	r3, r0, #1
 80059e4:	9301      	str	r3, [sp, #4]
 80059e6:	e7df      	b.n	80059a8 <_dtoa_r+0xa0>
 80059e8:	ec4b ab10 	vmov	d0, sl, fp
 80059ec:	aa10      	add	r2, sp, #64	; 0x40
 80059ee:	a911      	add	r1, sp, #68	; 0x44
 80059f0:	4620      	mov	r0, r4
 80059f2:	f001 f8b9 	bl	8006b68 <__d2b>
 80059f6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80059fa:	ee08 0a10 	vmov	s16, r0
 80059fe:	2d00      	cmp	r5, #0
 8005a00:	f000 8084 	beq.w	8005b0c <_dtoa_r+0x204>
 8005a04:	ee19 3a90 	vmov	r3, s19
 8005a08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a0c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005a10:	4656      	mov	r6, sl
 8005a12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005a16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005a1a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005a1e:	4b74      	ldr	r3, [pc, #464]	; (8005bf0 <_dtoa_r+0x2e8>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	4630      	mov	r0, r6
 8005a24:	4639      	mov	r1, r7
 8005a26:	f7fa fc37 	bl	8000298 <__aeabi_dsub>
 8005a2a:	a365      	add	r3, pc, #404	; (adr r3, 8005bc0 <_dtoa_r+0x2b8>)
 8005a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a30:	f7fa fdea 	bl	8000608 <__aeabi_dmul>
 8005a34:	a364      	add	r3, pc, #400	; (adr r3, 8005bc8 <_dtoa_r+0x2c0>)
 8005a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3a:	f7fa fc2f 	bl	800029c <__adddf3>
 8005a3e:	4606      	mov	r6, r0
 8005a40:	4628      	mov	r0, r5
 8005a42:	460f      	mov	r7, r1
 8005a44:	f7fa fd76 	bl	8000534 <__aeabi_i2d>
 8005a48:	a361      	add	r3, pc, #388	; (adr r3, 8005bd0 <_dtoa_r+0x2c8>)
 8005a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4e:	f7fa fddb 	bl	8000608 <__aeabi_dmul>
 8005a52:	4602      	mov	r2, r0
 8005a54:	460b      	mov	r3, r1
 8005a56:	4630      	mov	r0, r6
 8005a58:	4639      	mov	r1, r7
 8005a5a:	f7fa fc1f 	bl	800029c <__adddf3>
 8005a5e:	4606      	mov	r6, r0
 8005a60:	460f      	mov	r7, r1
 8005a62:	f7fb f881 	bl	8000b68 <__aeabi_d2iz>
 8005a66:	2200      	movs	r2, #0
 8005a68:	9000      	str	r0, [sp, #0]
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	4630      	mov	r0, r6
 8005a6e:	4639      	mov	r1, r7
 8005a70:	f7fb f83c 	bl	8000aec <__aeabi_dcmplt>
 8005a74:	b150      	cbz	r0, 8005a8c <_dtoa_r+0x184>
 8005a76:	9800      	ldr	r0, [sp, #0]
 8005a78:	f7fa fd5c 	bl	8000534 <__aeabi_i2d>
 8005a7c:	4632      	mov	r2, r6
 8005a7e:	463b      	mov	r3, r7
 8005a80:	f7fb f82a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a84:	b910      	cbnz	r0, 8005a8c <_dtoa_r+0x184>
 8005a86:	9b00      	ldr	r3, [sp, #0]
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	9b00      	ldr	r3, [sp, #0]
 8005a8e:	2b16      	cmp	r3, #22
 8005a90:	d85a      	bhi.n	8005b48 <_dtoa_r+0x240>
 8005a92:	9a00      	ldr	r2, [sp, #0]
 8005a94:	4b57      	ldr	r3, [pc, #348]	; (8005bf4 <_dtoa_r+0x2ec>)
 8005a96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9e:	ec51 0b19 	vmov	r0, r1, d9
 8005aa2:	f7fb f823 	bl	8000aec <__aeabi_dcmplt>
 8005aa6:	2800      	cmp	r0, #0
 8005aa8:	d050      	beq.n	8005b4c <_dtoa_r+0x244>
 8005aaa:	9b00      	ldr	r3, [sp, #0]
 8005aac:	3b01      	subs	r3, #1
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ab4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ab6:	1b5d      	subs	r5, r3, r5
 8005ab8:	1e6b      	subs	r3, r5, #1
 8005aba:	9305      	str	r3, [sp, #20]
 8005abc:	bf45      	ittet	mi
 8005abe:	f1c5 0301 	rsbmi	r3, r5, #1
 8005ac2:	9304      	strmi	r3, [sp, #16]
 8005ac4:	2300      	movpl	r3, #0
 8005ac6:	2300      	movmi	r3, #0
 8005ac8:	bf4c      	ite	mi
 8005aca:	9305      	strmi	r3, [sp, #20]
 8005acc:	9304      	strpl	r3, [sp, #16]
 8005ace:	9b00      	ldr	r3, [sp, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	db3d      	blt.n	8005b50 <_dtoa_r+0x248>
 8005ad4:	9b05      	ldr	r3, [sp, #20]
 8005ad6:	9a00      	ldr	r2, [sp, #0]
 8005ad8:	920a      	str	r2, [sp, #40]	; 0x28
 8005ada:	4413      	add	r3, r2
 8005adc:	9305      	str	r3, [sp, #20]
 8005ade:	2300      	movs	r3, #0
 8005ae0:	9307      	str	r3, [sp, #28]
 8005ae2:	9b06      	ldr	r3, [sp, #24]
 8005ae4:	2b09      	cmp	r3, #9
 8005ae6:	f200 8089 	bhi.w	8005bfc <_dtoa_r+0x2f4>
 8005aea:	2b05      	cmp	r3, #5
 8005aec:	bfc4      	itt	gt
 8005aee:	3b04      	subgt	r3, #4
 8005af0:	9306      	strgt	r3, [sp, #24]
 8005af2:	9b06      	ldr	r3, [sp, #24]
 8005af4:	f1a3 0302 	sub.w	r3, r3, #2
 8005af8:	bfcc      	ite	gt
 8005afa:	2500      	movgt	r5, #0
 8005afc:	2501      	movle	r5, #1
 8005afe:	2b03      	cmp	r3, #3
 8005b00:	f200 8087 	bhi.w	8005c12 <_dtoa_r+0x30a>
 8005b04:	e8df f003 	tbb	[pc, r3]
 8005b08:	59383a2d 	.word	0x59383a2d
 8005b0c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005b10:	441d      	add	r5, r3
 8005b12:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005b16:	2b20      	cmp	r3, #32
 8005b18:	bfc1      	itttt	gt
 8005b1a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005b1e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005b22:	fa0b f303 	lslgt.w	r3, fp, r3
 8005b26:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005b2a:	bfda      	itte	le
 8005b2c:	f1c3 0320 	rsble	r3, r3, #32
 8005b30:	fa06 f003 	lslle.w	r0, r6, r3
 8005b34:	4318      	orrgt	r0, r3
 8005b36:	f7fa fced 	bl	8000514 <__aeabi_ui2d>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	4606      	mov	r6, r0
 8005b3e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005b42:	3d01      	subs	r5, #1
 8005b44:	930e      	str	r3, [sp, #56]	; 0x38
 8005b46:	e76a      	b.n	8005a1e <_dtoa_r+0x116>
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e7b2      	b.n	8005ab2 <_dtoa_r+0x1aa>
 8005b4c:	900b      	str	r0, [sp, #44]	; 0x2c
 8005b4e:	e7b1      	b.n	8005ab4 <_dtoa_r+0x1ac>
 8005b50:	9b04      	ldr	r3, [sp, #16]
 8005b52:	9a00      	ldr	r2, [sp, #0]
 8005b54:	1a9b      	subs	r3, r3, r2
 8005b56:	9304      	str	r3, [sp, #16]
 8005b58:	4253      	negs	r3, r2
 8005b5a:	9307      	str	r3, [sp, #28]
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	930a      	str	r3, [sp, #40]	; 0x28
 8005b60:	e7bf      	b.n	8005ae2 <_dtoa_r+0x1da>
 8005b62:	2300      	movs	r3, #0
 8005b64:	9308      	str	r3, [sp, #32]
 8005b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	dc55      	bgt.n	8005c18 <_dtoa_r+0x310>
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005b72:	461a      	mov	r2, r3
 8005b74:	9209      	str	r2, [sp, #36]	; 0x24
 8005b76:	e00c      	b.n	8005b92 <_dtoa_r+0x28a>
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e7f3      	b.n	8005b64 <_dtoa_r+0x25c>
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b80:	9308      	str	r3, [sp, #32]
 8005b82:	9b00      	ldr	r3, [sp, #0]
 8005b84:	4413      	add	r3, r2
 8005b86:	9302      	str	r3, [sp, #8]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	9303      	str	r3, [sp, #12]
 8005b8e:	bfb8      	it	lt
 8005b90:	2301      	movlt	r3, #1
 8005b92:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005b94:	2200      	movs	r2, #0
 8005b96:	6042      	str	r2, [r0, #4]
 8005b98:	2204      	movs	r2, #4
 8005b9a:	f102 0614 	add.w	r6, r2, #20
 8005b9e:	429e      	cmp	r6, r3
 8005ba0:	6841      	ldr	r1, [r0, #4]
 8005ba2:	d93d      	bls.n	8005c20 <_dtoa_r+0x318>
 8005ba4:	4620      	mov	r0, r4
 8005ba6:	f000 fcb7 	bl	8006518 <_Balloc>
 8005baa:	9001      	str	r0, [sp, #4]
 8005bac:	2800      	cmp	r0, #0
 8005bae:	d13b      	bne.n	8005c28 <_dtoa_r+0x320>
 8005bb0:	4b11      	ldr	r3, [pc, #68]	; (8005bf8 <_dtoa_r+0x2f0>)
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005bb8:	e6c0      	b.n	800593c <_dtoa_r+0x34>
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e7df      	b.n	8005b7e <_dtoa_r+0x276>
 8005bbe:	bf00      	nop
 8005bc0:	636f4361 	.word	0x636f4361
 8005bc4:	3fd287a7 	.word	0x3fd287a7
 8005bc8:	8b60c8b3 	.word	0x8b60c8b3
 8005bcc:	3fc68a28 	.word	0x3fc68a28
 8005bd0:	509f79fb 	.word	0x509f79fb
 8005bd4:	3fd34413 	.word	0x3fd34413
 8005bd8:	08007d45 	.word	0x08007d45
 8005bdc:	08007d5c 	.word	0x08007d5c
 8005be0:	7ff00000 	.word	0x7ff00000
 8005be4:	08007d41 	.word	0x08007d41
 8005be8:	08007d38 	.word	0x08007d38
 8005bec:	08007d15 	.word	0x08007d15
 8005bf0:	3ff80000 	.word	0x3ff80000
 8005bf4:	08007e50 	.word	0x08007e50
 8005bf8:	08007db7 	.word	0x08007db7
 8005bfc:	2501      	movs	r5, #1
 8005bfe:	2300      	movs	r3, #0
 8005c00:	9306      	str	r3, [sp, #24]
 8005c02:	9508      	str	r5, [sp, #32]
 8005c04:	f04f 33ff 	mov.w	r3, #4294967295
 8005c08:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	2312      	movs	r3, #18
 8005c10:	e7b0      	b.n	8005b74 <_dtoa_r+0x26c>
 8005c12:	2301      	movs	r3, #1
 8005c14:	9308      	str	r3, [sp, #32]
 8005c16:	e7f5      	b.n	8005c04 <_dtoa_r+0x2fc>
 8005c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c1a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005c1e:	e7b8      	b.n	8005b92 <_dtoa_r+0x28a>
 8005c20:	3101      	adds	r1, #1
 8005c22:	6041      	str	r1, [r0, #4]
 8005c24:	0052      	lsls	r2, r2, #1
 8005c26:	e7b8      	b.n	8005b9a <_dtoa_r+0x292>
 8005c28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c2a:	9a01      	ldr	r2, [sp, #4]
 8005c2c:	601a      	str	r2, [r3, #0]
 8005c2e:	9b03      	ldr	r3, [sp, #12]
 8005c30:	2b0e      	cmp	r3, #14
 8005c32:	f200 809d 	bhi.w	8005d70 <_dtoa_r+0x468>
 8005c36:	2d00      	cmp	r5, #0
 8005c38:	f000 809a 	beq.w	8005d70 <_dtoa_r+0x468>
 8005c3c:	9b00      	ldr	r3, [sp, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	dd32      	ble.n	8005ca8 <_dtoa_r+0x3a0>
 8005c42:	4ab7      	ldr	r2, [pc, #732]	; (8005f20 <_dtoa_r+0x618>)
 8005c44:	f003 030f 	and.w	r3, r3, #15
 8005c48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005c4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c50:	9b00      	ldr	r3, [sp, #0]
 8005c52:	05d8      	lsls	r0, r3, #23
 8005c54:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005c58:	d516      	bpl.n	8005c88 <_dtoa_r+0x380>
 8005c5a:	4bb2      	ldr	r3, [pc, #712]	; (8005f24 <_dtoa_r+0x61c>)
 8005c5c:	ec51 0b19 	vmov	r0, r1, d9
 8005c60:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c64:	f7fa fdfa 	bl	800085c <__aeabi_ddiv>
 8005c68:	f007 070f 	and.w	r7, r7, #15
 8005c6c:	4682      	mov	sl, r0
 8005c6e:	468b      	mov	fp, r1
 8005c70:	2503      	movs	r5, #3
 8005c72:	4eac      	ldr	r6, [pc, #688]	; (8005f24 <_dtoa_r+0x61c>)
 8005c74:	b957      	cbnz	r7, 8005c8c <_dtoa_r+0x384>
 8005c76:	4642      	mov	r2, r8
 8005c78:	464b      	mov	r3, r9
 8005c7a:	4650      	mov	r0, sl
 8005c7c:	4659      	mov	r1, fp
 8005c7e:	f7fa fded 	bl	800085c <__aeabi_ddiv>
 8005c82:	4682      	mov	sl, r0
 8005c84:	468b      	mov	fp, r1
 8005c86:	e028      	b.n	8005cda <_dtoa_r+0x3d2>
 8005c88:	2502      	movs	r5, #2
 8005c8a:	e7f2      	b.n	8005c72 <_dtoa_r+0x36a>
 8005c8c:	07f9      	lsls	r1, r7, #31
 8005c8e:	d508      	bpl.n	8005ca2 <_dtoa_r+0x39a>
 8005c90:	4640      	mov	r0, r8
 8005c92:	4649      	mov	r1, r9
 8005c94:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005c98:	f7fa fcb6 	bl	8000608 <__aeabi_dmul>
 8005c9c:	3501      	adds	r5, #1
 8005c9e:	4680      	mov	r8, r0
 8005ca0:	4689      	mov	r9, r1
 8005ca2:	107f      	asrs	r7, r7, #1
 8005ca4:	3608      	adds	r6, #8
 8005ca6:	e7e5      	b.n	8005c74 <_dtoa_r+0x36c>
 8005ca8:	f000 809b 	beq.w	8005de2 <_dtoa_r+0x4da>
 8005cac:	9b00      	ldr	r3, [sp, #0]
 8005cae:	4f9d      	ldr	r7, [pc, #628]	; (8005f24 <_dtoa_r+0x61c>)
 8005cb0:	425e      	negs	r6, r3
 8005cb2:	4b9b      	ldr	r3, [pc, #620]	; (8005f20 <_dtoa_r+0x618>)
 8005cb4:	f006 020f 	and.w	r2, r6, #15
 8005cb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc0:	ec51 0b19 	vmov	r0, r1, d9
 8005cc4:	f7fa fca0 	bl	8000608 <__aeabi_dmul>
 8005cc8:	1136      	asrs	r6, r6, #4
 8005cca:	4682      	mov	sl, r0
 8005ccc:	468b      	mov	fp, r1
 8005cce:	2300      	movs	r3, #0
 8005cd0:	2502      	movs	r5, #2
 8005cd2:	2e00      	cmp	r6, #0
 8005cd4:	d17a      	bne.n	8005dcc <_dtoa_r+0x4c4>
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1d3      	bne.n	8005c82 <_dtoa_r+0x37a>
 8005cda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f000 8082 	beq.w	8005de6 <_dtoa_r+0x4de>
 8005ce2:	4b91      	ldr	r3, [pc, #580]	; (8005f28 <_dtoa_r+0x620>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	4650      	mov	r0, sl
 8005ce8:	4659      	mov	r1, fp
 8005cea:	f7fa feff 	bl	8000aec <__aeabi_dcmplt>
 8005cee:	2800      	cmp	r0, #0
 8005cf0:	d079      	beq.n	8005de6 <_dtoa_r+0x4de>
 8005cf2:	9b03      	ldr	r3, [sp, #12]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d076      	beq.n	8005de6 <_dtoa_r+0x4de>
 8005cf8:	9b02      	ldr	r3, [sp, #8]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	dd36      	ble.n	8005d6c <_dtoa_r+0x464>
 8005cfe:	9b00      	ldr	r3, [sp, #0]
 8005d00:	4650      	mov	r0, sl
 8005d02:	4659      	mov	r1, fp
 8005d04:	1e5f      	subs	r7, r3, #1
 8005d06:	2200      	movs	r2, #0
 8005d08:	4b88      	ldr	r3, [pc, #544]	; (8005f2c <_dtoa_r+0x624>)
 8005d0a:	f7fa fc7d 	bl	8000608 <__aeabi_dmul>
 8005d0e:	9e02      	ldr	r6, [sp, #8]
 8005d10:	4682      	mov	sl, r0
 8005d12:	468b      	mov	fp, r1
 8005d14:	3501      	adds	r5, #1
 8005d16:	4628      	mov	r0, r5
 8005d18:	f7fa fc0c 	bl	8000534 <__aeabi_i2d>
 8005d1c:	4652      	mov	r2, sl
 8005d1e:	465b      	mov	r3, fp
 8005d20:	f7fa fc72 	bl	8000608 <__aeabi_dmul>
 8005d24:	4b82      	ldr	r3, [pc, #520]	; (8005f30 <_dtoa_r+0x628>)
 8005d26:	2200      	movs	r2, #0
 8005d28:	f7fa fab8 	bl	800029c <__adddf3>
 8005d2c:	46d0      	mov	r8, sl
 8005d2e:	46d9      	mov	r9, fp
 8005d30:	4682      	mov	sl, r0
 8005d32:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005d36:	2e00      	cmp	r6, #0
 8005d38:	d158      	bne.n	8005dec <_dtoa_r+0x4e4>
 8005d3a:	4b7e      	ldr	r3, [pc, #504]	; (8005f34 <_dtoa_r+0x62c>)
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	4640      	mov	r0, r8
 8005d40:	4649      	mov	r1, r9
 8005d42:	f7fa faa9 	bl	8000298 <__aeabi_dsub>
 8005d46:	4652      	mov	r2, sl
 8005d48:	465b      	mov	r3, fp
 8005d4a:	4680      	mov	r8, r0
 8005d4c:	4689      	mov	r9, r1
 8005d4e:	f7fa feeb 	bl	8000b28 <__aeabi_dcmpgt>
 8005d52:	2800      	cmp	r0, #0
 8005d54:	f040 8295 	bne.w	8006282 <_dtoa_r+0x97a>
 8005d58:	4652      	mov	r2, sl
 8005d5a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005d5e:	4640      	mov	r0, r8
 8005d60:	4649      	mov	r1, r9
 8005d62:	f7fa fec3 	bl	8000aec <__aeabi_dcmplt>
 8005d66:	2800      	cmp	r0, #0
 8005d68:	f040 8289 	bne.w	800627e <_dtoa_r+0x976>
 8005d6c:	ec5b ab19 	vmov	sl, fp, d9
 8005d70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	f2c0 8148 	blt.w	8006008 <_dtoa_r+0x700>
 8005d78:	9a00      	ldr	r2, [sp, #0]
 8005d7a:	2a0e      	cmp	r2, #14
 8005d7c:	f300 8144 	bgt.w	8006008 <_dtoa_r+0x700>
 8005d80:	4b67      	ldr	r3, [pc, #412]	; (8005f20 <_dtoa_r+0x618>)
 8005d82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d86:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f280 80d5 	bge.w	8005f3c <_dtoa_r+0x634>
 8005d92:	9b03      	ldr	r3, [sp, #12]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f300 80d1 	bgt.w	8005f3c <_dtoa_r+0x634>
 8005d9a:	f040 826f 	bne.w	800627c <_dtoa_r+0x974>
 8005d9e:	4b65      	ldr	r3, [pc, #404]	; (8005f34 <_dtoa_r+0x62c>)
 8005da0:	2200      	movs	r2, #0
 8005da2:	4640      	mov	r0, r8
 8005da4:	4649      	mov	r1, r9
 8005da6:	f7fa fc2f 	bl	8000608 <__aeabi_dmul>
 8005daa:	4652      	mov	r2, sl
 8005dac:	465b      	mov	r3, fp
 8005dae:	f7fa feb1 	bl	8000b14 <__aeabi_dcmpge>
 8005db2:	9e03      	ldr	r6, [sp, #12]
 8005db4:	4637      	mov	r7, r6
 8005db6:	2800      	cmp	r0, #0
 8005db8:	f040 8245 	bne.w	8006246 <_dtoa_r+0x93e>
 8005dbc:	9d01      	ldr	r5, [sp, #4]
 8005dbe:	2331      	movs	r3, #49	; 0x31
 8005dc0:	f805 3b01 	strb.w	r3, [r5], #1
 8005dc4:	9b00      	ldr	r3, [sp, #0]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	e240      	b.n	800624e <_dtoa_r+0x946>
 8005dcc:	07f2      	lsls	r2, r6, #31
 8005dce:	d505      	bpl.n	8005ddc <_dtoa_r+0x4d4>
 8005dd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dd4:	f7fa fc18 	bl	8000608 <__aeabi_dmul>
 8005dd8:	3501      	adds	r5, #1
 8005dda:	2301      	movs	r3, #1
 8005ddc:	1076      	asrs	r6, r6, #1
 8005dde:	3708      	adds	r7, #8
 8005de0:	e777      	b.n	8005cd2 <_dtoa_r+0x3ca>
 8005de2:	2502      	movs	r5, #2
 8005de4:	e779      	b.n	8005cda <_dtoa_r+0x3d2>
 8005de6:	9f00      	ldr	r7, [sp, #0]
 8005de8:	9e03      	ldr	r6, [sp, #12]
 8005dea:	e794      	b.n	8005d16 <_dtoa_r+0x40e>
 8005dec:	9901      	ldr	r1, [sp, #4]
 8005dee:	4b4c      	ldr	r3, [pc, #304]	; (8005f20 <_dtoa_r+0x618>)
 8005df0:	4431      	add	r1, r6
 8005df2:	910d      	str	r1, [sp, #52]	; 0x34
 8005df4:	9908      	ldr	r1, [sp, #32]
 8005df6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005dfa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005dfe:	2900      	cmp	r1, #0
 8005e00:	d043      	beq.n	8005e8a <_dtoa_r+0x582>
 8005e02:	494d      	ldr	r1, [pc, #308]	; (8005f38 <_dtoa_r+0x630>)
 8005e04:	2000      	movs	r0, #0
 8005e06:	f7fa fd29 	bl	800085c <__aeabi_ddiv>
 8005e0a:	4652      	mov	r2, sl
 8005e0c:	465b      	mov	r3, fp
 8005e0e:	f7fa fa43 	bl	8000298 <__aeabi_dsub>
 8005e12:	9d01      	ldr	r5, [sp, #4]
 8005e14:	4682      	mov	sl, r0
 8005e16:	468b      	mov	fp, r1
 8005e18:	4649      	mov	r1, r9
 8005e1a:	4640      	mov	r0, r8
 8005e1c:	f7fa fea4 	bl	8000b68 <__aeabi_d2iz>
 8005e20:	4606      	mov	r6, r0
 8005e22:	f7fa fb87 	bl	8000534 <__aeabi_i2d>
 8005e26:	4602      	mov	r2, r0
 8005e28:	460b      	mov	r3, r1
 8005e2a:	4640      	mov	r0, r8
 8005e2c:	4649      	mov	r1, r9
 8005e2e:	f7fa fa33 	bl	8000298 <__aeabi_dsub>
 8005e32:	3630      	adds	r6, #48	; 0x30
 8005e34:	f805 6b01 	strb.w	r6, [r5], #1
 8005e38:	4652      	mov	r2, sl
 8005e3a:	465b      	mov	r3, fp
 8005e3c:	4680      	mov	r8, r0
 8005e3e:	4689      	mov	r9, r1
 8005e40:	f7fa fe54 	bl	8000aec <__aeabi_dcmplt>
 8005e44:	2800      	cmp	r0, #0
 8005e46:	d163      	bne.n	8005f10 <_dtoa_r+0x608>
 8005e48:	4642      	mov	r2, r8
 8005e4a:	464b      	mov	r3, r9
 8005e4c:	4936      	ldr	r1, [pc, #216]	; (8005f28 <_dtoa_r+0x620>)
 8005e4e:	2000      	movs	r0, #0
 8005e50:	f7fa fa22 	bl	8000298 <__aeabi_dsub>
 8005e54:	4652      	mov	r2, sl
 8005e56:	465b      	mov	r3, fp
 8005e58:	f7fa fe48 	bl	8000aec <__aeabi_dcmplt>
 8005e5c:	2800      	cmp	r0, #0
 8005e5e:	f040 80b5 	bne.w	8005fcc <_dtoa_r+0x6c4>
 8005e62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e64:	429d      	cmp	r5, r3
 8005e66:	d081      	beq.n	8005d6c <_dtoa_r+0x464>
 8005e68:	4b30      	ldr	r3, [pc, #192]	; (8005f2c <_dtoa_r+0x624>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	4650      	mov	r0, sl
 8005e6e:	4659      	mov	r1, fp
 8005e70:	f7fa fbca 	bl	8000608 <__aeabi_dmul>
 8005e74:	4b2d      	ldr	r3, [pc, #180]	; (8005f2c <_dtoa_r+0x624>)
 8005e76:	4682      	mov	sl, r0
 8005e78:	468b      	mov	fp, r1
 8005e7a:	4640      	mov	r0, r8
 8005e7c:	4649      	mov	r1, r9
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f7fa fbc2 	bl	8000608 <__aeabi_dmul>
 8005e84:	4680      	mov	r8, r0
 8005e86:	4689      	mov	r9, r1
 8005e88:	e7c6      	b.n	8005e18 <_dtoa_r+0x510>
 8005e8a:	4650      	mov	r0, sl
 8005e8c:	4659      	mov	r1, fp
 8005e8e:	f7fa fbbb 	bl	8000608 <__aeabi_dmul>
 8005e92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e94:	9d01      	ldr	r5, [sp, #4]
 8005e96:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e98:	4682      	mov	sl, r0
 8005e9a:	468b      	mov	fp, r1
 8005e9c:	4649      	mov	r1, r9
 8005e9e:	4640      	mov	r0, r8
 8005ea0:	f7fa fe62 	bl	8000b68 <__aeabi_d2iz>
 8005ea4:	4606      	mov	r6, r0
 8005ea6:	f7fa fb45 	bl	8000534 <__aeabi_i2d>
 8005eaa:	3630      	adds	r6, #48	; 0x30
 8005eac:	4602      	mov	r2, r0
 8005eae:	460b      	mov	r3, r1
 8005eb0:	4640      	mov	r0, r8
 8005eb2:	4649      	mov	r1, r9
 8005eb4:	f7fa f9f0 	bl	8000298 <__aeabi_dsub>
 8005eb8:	f805 6b01 	strb.w	r6, [r5], #1
 8005ebc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ebe:	429d      	cmp	r5, r3
 8005ec0:	4680      	mov	r8, r0
 8005ec2:	4689      	mov	r9, r1
 8005ec4:	f04f 0200 	mov.w	r2, #0
 8005ec8:	d124      	bne.n	8005f14 <_dtoa_r+0x60c>
 8005eca:	4b1b      	ldr	r3, [pc, #108]	; (8005f38 <_dtoa_r+0x630>)
 8005ecc:	4650      	mov	r0, sl
 8005ece:	4659      	mov	r1, fp
 8005ed0:	f7fa f9e4 	bl	800029c <__adddf3>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	4640      	mov	r0, r8
 8005eda:	4649      	mov	r1, r9
 8005edc:	f7fa fe24 	bl	8000b28 <__aeabi_dcmpgt>
 8005ee0:	2800      	cmp	r0, #0
 8005ee2:	d173      	bne.n	8005fcc <_dtoa_r+0x6c4>
 8005ee4:	4652      	mov	r2, sl
 8005ee6:	465b      	mov	r3, fp
 8005ee8:	4913      	ldr	r1, [pc, #76]	; (8005f38 <_dtoa_r+0x630>)
 8005eea:	2000      	movs	r0, #0
 8005eec:	f7fa f9d4 	bl	8000298 <__aeabi_dsub>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	4640      	mov	r0, r8
 8005ef6:	4649      	mov	r1, r9
 8005ef8:	f7fa fdf8 	bl	8000aec <__aeabi_dcmplt>
 8005efc:	2800      	cmp	r0, #0
 8005efe:	f43f af35 	beq.w	8005d6c <_dtoa_r+0x464>
 8005f02:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005f04:	1e6b      	subs	r3, r5, #1
 8005f06:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f08:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005f0c:	2b30      	cmp	r3, #48	; 0x30
 8005f0e:	d0f8      	beq.n	8005f02 <_dtoa_r+0x5fa>
 8005f10:	9700      	str	r7, [sp, #0]
 8005f12:	e049      	b.n	8005fa8 <_dtoa_r+0x6a0>
 8005f14:	4b05      	ldr	r3, [pc, #20]	; (8005f2c <_dtoa_r+0x624>)
 8005f16:	f7fa fb77 	bl	8000608 <__aeabi_dmul>
 8005f1a:	4680      	mov	r8, r0
 8005f1c:	4689      	mov	r9, r1
 8005f1e:	e7bd      	b.n	8005e9c <_dtoa_r+0x594>
 8005f20:	08007e50 	.word	0x08007e50
 8005f24:	08007e28 	.word	0x08007e28
 8005f28:	3ff00000 	.word	0x3ff00000
 8005f2c:	40240000 	.word	0x40240000
 8005f30:	401c0000 	.word	0x401c0000
 8005f34:	40140000 	.word	0x40140000
 8005f38:	3fe00000 	.word	0x3fe00000
 8005f3c:	9d01      	ldr	r5, [sp, #4]
 8005f3e:	4656      	mov	r6, sl
 8005f40:	465f      	mov	r7, fp
 8005f42:	4642      	mov	r2, r8
 8005f44:	464b      	mov	r3, r9
 8005f46:	4630      	mov	r0, r6
 8005f48:	4639      	mov	r1, r7
 8005f4a:	f7fa fc87 	bl	800085c <__aeabi_ddiv>
 8005f4e:	f7fa fe0b 	bl	8000b68 <__aeabi_d2iz>
 8005f52:	4682      	mov	sl, r0
 8005f54:	f7fa faee 	bl	8000534 <__aeabi_i2d>
 8005f58:	4642      	mov	r2, r8
 8005f5a:	464b      	mov	r3, r9
 8005f5c:	f7fa fb54 	bl	8000608 <__aeabi_dmul>
 8005f60:	4602      	mov	r2, r0
 8005f62:	460b      	mov	r3, r1
 8005f64:	4630      	mov	r0, r6
 8005f66:	4639      	mov	r1, r7
 8005f68:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005f6c:	f7fa f994 	bl	8000298 <__aeabi_dsub>
 8005f70:	f805 6b01 	strb.w	r6, [r5], #1
 8005f74:	9e01      	ldr	r6, [sp, #4]
 8005f76:	9f03      	ldr	r7, [sp, #12]
 8005f78:	1bae      	subs	r6, r5, r6
 8005f7a:	42b7      	cmp	r7, r6
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	460b      	mov	r3, r1
 8005f80:	d135      	bne.n	8005fee <_dtoa_r+0x6e6>
 8005f82:	f7fa f98b 	bl	800029c <__adddf3>
 8005f86:	4642      	mov	r2, r8
 8005f88:	464b      	mov	r3, r9
 8005f8a:	4606      	mov	r6, r0
 8005f8c:	460f      	mov	r7, r1
 8005f8e:	f7fa fdcb 	bl	8000b28 <__aeabi_dcmpgt>
 8005f92:	b9d0      	cbnz	r0, 8005fca <_dtoa_r+0x6c2>
 8005f94:	4642      	mov	r2, r8
 8005f96:	464b      	mov	r3, r9
 8005f98:	4630      	mov	r0, r6
 8005f9a:	4639      	mov	r1, r7
 8005f9c:	f7fa fd9c 	bl	8000ad8 <__aeabi_dcmpeq>
 8005fa0:	b110      	cbz	r0, 8005fa8 <_dtoa_r+0x6a0>
 8005fa2:	f01a 0f01 	tst.w	sl, #1
 8005fa6:	d110      	bne.n	8005fca <_dtoa_r+0x6c2>
 8005fa8:	4620      	mov	r0, r4
 8005faa:	ee18 1a10 	vmov	r1, s16
 8005fae:	f000 faf3 	bl	8006598 <_Bfree>
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	9800      	ldr	r0, [sp, #0]
 8005fb6:	702b      	strb	r3, [r5, #0]
 8005fb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005fba:	3001      	adds	r0, #1
 8005fbc:	6018      	str	r0, [r3, #0]
 8005fbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f43f acf1 	beq.w	80059a8 <_dtoa_r+0xa0>
 8005fc6:	601d      	str	r5, [r3, #0]
 8005fc8:	e4ee      	b.n	80059a8 <_dtoa_r+0xa0>
 8005fca:	9f00      	ldr	r7, [sp, #0]
 8005fcc:	462b      	mov	r3, r5
 8005fce:	461d      	mov	r5, r3
 8005fd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005fd4:	2a39      	cmp	r2, #57	; 0x39
 8005fd6:	d106      	bne.n	8005fe6 <_dtoa_r+0x6de>
 8005fd8:	9a01      	ldr	r2, [sp, #4]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d1f7      	bne.n	8005fce <_dtoa_r+0x6c6>
 8005fde:	9901      	ldr	r1, [sp, #4]
 8005fe0:	2230      	movs	r2, #48	; 0x30
 8005fe2:	3701      	adds	r7, #1
 8005fe4:	700a      	strb	r2, [r1, #0]
 8005fe6:	781a      	ldrb	r2, [r3, #0]
 8005fe8:	3201      	adds	r2, #1
 8005fea:	701a      	strb	r2, [r3, #0]
 8005fec:	e790      	b.n	8005f10 <_dtoa_r+0x608>
 8005fee:	4ba6      	ldr	r3, [pc, #664]	; (8006288 <_dtoa_r+0x980>)
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f7fa fb09 	bl	8000608 <__aeabi_dmul>
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	4606      	mov	r6, r0
 8005ffc:	460f      	mov	r7, r1
 8005ffe:	f7fa fd6b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006002:	2800      	cmp	r0, #0
 8006004:	d09d      	beq.n	8005f42 <_dtoa_r+0x63a>
 8006006:	e7cf      	b.n	8005fa8 <_dtoa_r+0x6a0>
 8006008:	9a08      	ldr	r2, [sp, #32]
 800600a:	2a00      	cmp	r2, #0
 800600c:	f000 80d7 	beq.w	80061be <_dtoa_r+0x8b6>
 8006010:	9a06      	ldr	r2, [sp, #24]
 8006012:	2a01      	cmp	r2, #1
 8006014:	f300 80ba 	bgt.w	800618c <_dtoa_r+0x884>
 8006018:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800601a:	2a00      	cmp	r2, #0
 800601c:	f000 80b2 	beq.w	8006184 <_dtoa_r+0x87c>
 8006020:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006024:	9e07      	ldr	r6, [sp, #28]
 8006026:	9d04      	ldr	r5, [sp, #16]
 8006028:	9a04      	ldr	r2, [sp, #16]
 800602a:	441a      	add	r2, r3
 800602c:	9204      	str	r2, [sp, #16]
 800602e:	9a05      	ldr	r2, [sp, #20]
 8006030:	2101      	movs	r1, #1
 8006032:	441a      	add	r2, r3
 8006034:	4620      	mov	r0, r4
 8006036:	9205      	str	r2, [sp, #20]
 8006038:	f000 fb66 	bl	8006708 <__i2b>
 800603c:	4607      	mov	r7, r0
 800603e:	2d00      	cmp	r5, #0
 8006040:	dd0c      	ble.n	800605c <_dtoa_r+0x754>
 8006042:	9b05      	ldr	r3, [sp, #20]
 8006044:	2b00      	cmp	r3, #0
 8006046:	dd09      	ble.n	800605c <_dtoa_r+0x754>
 8006048:	42ab      	cmp	r3, r5
 800604a:	9a04      	ldr	r2, [sp, #16]
 800604c:	bfa8      	it	ge
 800604e:	462b      	movge	r3, r5
 8006050:	1ad2      	subs	r2, r2, r3
 8006052:	9204      	str	r2, [sp, #16]
 8006054:	9a05      	ldr	r2, [sp, #20]
 8006056:	1aed      	subs	r5, r5, r3
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	9305      	str	r3, [sp, #20]
 800605c:	9b07      	ldr	r3, [sp, #28]
 800605e:	b31b      	cbz	r3, 80060a8 <_dtoa_r+0x7a0>
 8006060:	9b08      	ldr	r3, [sp, #32]
 8006062:	2b00      	cmp	r3, #0
 8006064:	f000 80af 	beq.w	80061c6 <_dtoa_r+0x8be>
 8006068:	2e00      	cmp	r6, #0
 800606a:	dd13      	ble.n	8006094 <_dtoa_r+0x78c>
 800606c:	4639      	mov	r1, r7
 800606e:	4632      	mov	r2, r6
 8006070:	4620      	mov	r0, r4
 8006072:	f000 fc09 	bl	8006888 <__pow5mult>
 8006076:	ee18 2a10 	vmov	r2, s16
 800607a:	4601      	mov	r1, r0
 800607c:	4607      	mov	r7, r0
 800607e:	4620      	mov	r0, r4
 8006080:	f000 fb58 	bl	8006734 <__multiply>
 8006084:	ee18 1a10 	vmov	r1, s16
 8006088:	4680      	mov	r8, r0
 800608a:	4620      	mov	r0, r4
 800608c:	f000 fa84 	bl	8006598 <_Bfree>
 8006090:	ee08 8a10 	vmov	s16, r8
 8006094:	9b07      	ldr	r3, [sp, #28]
 8006096:	1b9a      	subs	r2, r3, r6
 8006098:	d006      	beq.n	80060a8 <_dtoa_r+0x7a0>
 800609a:	ee18 1a10 	vmov	r1, s16
 800609e:	4620      	mov	r0, r4
 80060a0:	f000 fbf2 	bl	8006888 <__pow5mult>
 80060a4:	ee08 0a10 	vmov	s16, r0
 80060a8:	2101      	movs	r1, #1
 80060aa:	4620      	mov	r0, r4
 80060ac:	f000 fb2c 	bl	8006708 <__i2b>
 80060b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	4606      	mov	r6, r0
 80060b6:	f340 8088 	ble.w	80061ca <_dtoa_r+0x8c2>
 80060ba:	461a      	mov	r2, r3
 80060bc:	4601      	mov	r1, r0
 80060be:	4620      	mov	r0, r4
 80060c0:	f000 fbe2 	bl	8006888 <__pow5mult>
 80060c4:	9b06      	ldr	r3, [sp, #24]
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	4606      	mov	r6, r0
 80060ca:	f340 8081 	ble.w	80061d0 <_dtoa_r+0x8c8>
 80060ce:	f04f 0800 	mov.w	r8, #0
 80060d2:	6933      	ldr	r3, [r6, #16]
 80060d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80060d8:	6918      	ldr	r0, [r3, #16]
 80060da:	f000 fac5 	bl	8006668 <__hi0bits>
 80060de:	f1c0 0020 	rsb	r0, r0, #32
 80060e2:	9b05      	ldr	r3, [sp, #20]
 80060e4:	4418      	add	r0, r3
 80060e6:	f010 001f 	ands.w	r0, r0, #31
 80060ea:	f000 8092 	beq.w	8006212 <_dtoa_r+0x90a>
 80060ee:	f1c0 0320 	rsb	r3, r0, #32
 80060f2:	2b04      	cmp	r3, #4
 80060f4:	f340 808a 	ble.w	800620c <_dtoa_r+0x904>
 80060f8:	f1c0 001c 	rsb	r0, r0, #28
 80060fc:	9b04      	ldr	r3, [sp, #16]
 80060fe:	4403      	add	r3, r0
 8006100:	9304      	str	r3, [sp, #16]
 8006102:	9b05      	ldr	r3, [sp, #20]
 8006104:	4403      	add	r3, r0
 8006106:	4405      	add	r5, r0
 8006108:	9305      	str	r3, [sp, #20]
 800610a:	9b04      	ldr	r3, [sp, #16]
 800610c:	2b00      	cmp	r3, #0
 800610e:	dd07      	ble.n	8006120 <_dtoa_r+0x818>
 8006110:	ee18 1a10 	vmov	r1, s16
 8006114:	461a      	mov	r2, r3
 8006116:	4620      	mov	r0, r4
 8006118:	f000 fc10 	bl	800693c <__lshift>
 800611c:	ee08 0a10 	vmov	s16, r0
 8006120:	9b05      	ldr	r3, [sp, #20]
 8006122:	2b00      	cmp	r3, #0
 8006124:	dd05      	ble.n	8006132 <_dtoa_r+0x82a>
 8006126:	4631      	mov	r1, r6
 8006128:	461a      	mov	r2, r3
 800612a:	4620      	mov	r0, r4
 800612c:	f000 fc06 	bl	800693c <__lshift>
 8006130:	4606      	mov	r6, r0
 8006132:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006134:	2b00      	cmp	r3, #0
 8006136:	d06e      	beq.n	8006216 <_dtoa_r+0x90e>
 8006138:	ee18 0a10 	vmov	r0, s16
 800613c:	4631      	mov	r1, r6
 800613e:	f000 fc6d 	bl	8006a1c <__mcmp>
 8006142:	2800      	cmp	r0, #0
 8006144:	da67      	bge.n	8006216 <_dtoa_r+0x90e>
 8006146:	9b00      	ldr	r3, [sp, #0]
 8006148:	3b01      	subs	r3, #1
 800614a:	ee18 1a10 	vmov	r1, s16
 800614e:	9300      	str	r3, [sp, #0]
 8006150:	220a      	movs	r2, #10
 8006152:	2300      	movs	r3, #0
 8006154:	4620      	mov	r0, r4
 8006156:	f000 fa41 	bl	80065dc <__multadd>
 800615a:	9b08      	ldr	r3, [sp, #32]
 800615c:	ee08 0a10 	vmov	s16, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	f000 81b1 	beq.w	80064c8 <_dtoa_r+0xbc0>
 8006166:	2300      	movs	r3, #0
 8006168:	4639      	mov	r1, r7
 800616a:	220a      	movs	r2, #10
 800616c:	4620      	mov	r0, r4
 800616e:	f000 fa35 	bl	80065dc <__multadd>
 8006172:	9b02      	ldr	r3, [sp, #8]
 8006174:	2b00      	cmp	r3, #0
 8006176:	4607      	mov	r7, r0
 8006178:	f300 808e 	bgt.w	8006298 <_dtoa_r+0x990>
 800617c:	9b06      	ldr	r3, [sp, #24]
 800617e:	2b02      	cmp	r3, #2
 8006180:	dc51      	bgt.n	8006226 <_dtoa_r+0x91e>
 8006182:	e089      	b.n	8006298 <_dtoa_r+0x990>
 8006184:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006186:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800618a:	e74b      	b.n	8006024 <_dtoa_r+0x71c>
 800618c:	9b03      	ldr	r3, [sp, #12]
 800618e:	1e5e      	subs	r6, r3, #1
 8006190:	9b07      	ldr	r3, [sp, #28]
 8006192:	42b3      	cmp	r3, r6
 8006194:	bfbf      	itttt	lt
 8006196:	9b07      	ldrlt	r3, [sp, #28]
 8006198:	9607      	strlt	r6, [sp, #28]
 800619a:	1af2      	sublt	r2, r6, r3
 800619c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800619e:	bfb6      	itet	lt
 80061a0:	189b      	addlt	r3, r3, r2
 80061a2:	1b9e      	subge	r6, r3, r6
 80061a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80061a6:	9b03      	ldr	r3, [sp, #12]
 80061a8:	bfb8      	it	lt
 80061aa:	2600      	movlt	r6, #0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	bfb7      	itett	lt
 80061b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80061b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80061b8:	1a9d      	sublt	r5, r3, r2
 80061ba:	2300      	movlt	r3, #0
 80061bc:	e734      	b.n	8006028 <_dtoa_r+0x720>
 80061be:	9e07      	ldr	r6, [sp, #28]
 80061c0:	9d04      	ldr	r5, [sp, #16]
 80061c2:	9f08      	ldr	r7, [sp, #32]
 80061c4:	e73b      	b.n	800603e <_dtoa_r+0x736>
 80061c6:	9a07      	ldr	r2, [sp, #28]
 80061c8:	e767      	b.n	800609a <_dtoa_r+0x792>
 80061ca:	9b06      	ldr	r3, [sp, #24]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	dc18      	bgt.n	8006202 <_dtoa_r+0x8fa>
 80061d0:	f1ba 0f00 	cmp.w	sl, #0
 80061d4:	d115      	bne.n	8006202 <_dtoa_r+0x8fa>
 80061d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80061da:	b993      	cbnz	r3, 8006202 <_dtoa_r+0x8fa>
 80061dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80061e0:	0d1b      	lsrs	r3, r3, #20
 80061e2:	051b      	lsls	r3, r3, #20
 80061e4:	b183      	cbz	r3, 8006208 <_dtoa_r+0x900>
 80061e6:	9b04      	ldr	r3, [sp, #16]
 80061e8:	3301      	adds	r3, #1
 80061ea:	9304      	str	r3, [sp, #16]
 80061ec:	9b05      	ldr	r3, [sp, #20]
 80061ee:	3301      	adds	r3, #1
 80061f0:	9305      	str	r3, [sp, #20]
 80061f2:	f04f 0801 	mov.w	r8, #1
 80061f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f47f af6a 	bne.w	80060d2 <_dtoa_r+0x7ca>
 80061fe:	2001      	movs	r0, #1
 8006200:	e76f      	b.n	80060e2 <_dtoa_r+0x7da>
 8006202:	f04f 0800 	mov.w	r8, #0
 8006206:	e7f6      	b.n	80061f6 <_dtoa_r+0x8ee>
 8006208:	4698      	mov	r8, r3
 800620a:	e7f4      	b.n	80061f6 <_dtoa_r+0x8ee>
 800620c:	f43f af7d 	beq.w	800610a <_dtoa_r+0x802>
 8006210:	4618      	mov	r0, r3
 8006212:	301c      	adds	r0, #28
 8006214:	e772      	b.n	80060fc <_dtoa_r+0x7f4>
 8006216:	9b03      	ldr	r3, [sp, #12]
 8006218:	2b00      	cmp	r3, #0
 800621a:	dc37      	bgt.n	800628c <_dtoa_r+0x984>
 800621c:	9b06      	ldr	r3, [sp, #24]
 800621e:	2b02      	cmp	r3, #2
 8006220:	dd34      	ble.n	800628c <_dtoa_r+0x984>
 8006222:	9b03      	ldr	r3, [sp, #12]
 8006224:	9302      	str	r3, [sp, #8]
 8006226:	9b02      	ldr	r3, [sp, #8]
 8006228:	b96b      	cbnz	r3, 8006246 <_dtoa_r+0x93e>
 800622a:	4631      	mov	r1, r6
 800622c:	2205      	movs	r2, #5
 800622e:	4620      	mov	r0, r4
 8006230:	f000 f9d4 	bl	80065dc <__multadd>
 8006234:	4601      	mov	r1, r0
 8006236:	4606      	mov	r6, r0
 8006238:	ee18 0a10 	vmov	r0, s16
 800623c:	f000 fbee 	bl	8006a1c <__mcmp>
 8006240:	2800      	cmp	r0, #0
 8006242:	f73f adbb 	bgt.w	8005dbc <_dtoa_r+0x4b4>
 8006246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006248:	9d01      	ldr	r5, [sp, #4]
 800624a:	43db      	mvns	r3, r3
 800624c:	9300      	str	r3, [sp, #0]
 800624e:	f04f 0800 	mov.w	r8, #0
 8006252:	4631      	mov	r1, r6
 8006254:	4620      	mov	r0, r4
 8006256:	f000 f99f 	bl	8006598 <_Bfree>
 800625a:	2f00      	cmp	r7, #0
 800625c:	f43f aea4 	beq.w	8005fa8 <_dtoa_r+0x6a0>
 8006260:	f1b8 0f00 	cmp.w	r8, #0
 8006264:	d005      	beq.n	8006272 <_dtoa_r+0x96a>
 8006266:	45b8      	cmp	r8, r7
 8006268:	d003      	beq.n	8006272 <_dtoa_r+0x96a>
 800626a:	4641      	mov	r1, r8
 800626c:	4620      	mov	r0, r4
 800626e:	f000 f993 	bl	8006598 <_Bfree>
 8006272:	4639      	mov	r1, r7
 8006274:	4620      	mov	r0, r4
 8006276:	f000 f98f 	bl	8006598 <_Bfree>
 800627a:	e695      	b.n	8005fa8 <_dtoa_r+0x6a0>
 800627c:	2600      	movs	r6, #0
 800627e:	4637      	mov	r7, r6
 8006280:	e7e1      	b.n	8006246 <_dtoa_r+0x93e>
 8006282:	9700      	str	r7, [sp, #0]
 8006284:	4637      	mov	r7, r6
 8006286:	e599      	b.n	8005dbc <_dtoa_r+0x4b4>
 8006288:	40240000 	.word	0x40240000
 800628c:	9b08      	ldr	r3, [sp, #32]
 800628e:	2b00      	cmp	r3, #0
 8006290:	f000 80ca 	beq.w	8006428 <_dtoa_r+0xb20>
 8006294:	9b03      	ldr	r3, [sp, #12]
 8006296:	9302      	str	r3, [sp, #8]
 8006298:	2d00      	cmp	r5, #0
 800629a:	dd05      	ble.n	80062a8 <_dtoa_r+0x9a0>
 800629c:	4639      	mov	r1, r7
 800629e:	462a      	mov	r2, r5
 80062a0:	4620      	mov	r0, r4
 80062a2:	f000 fb4b 	bl	800693c <__lshift>
 80062a6:	4607      	mov	r7, r0
 80062a8:	f1b8 0f00 	cmp.w	r8, #0
 80062ac:	d05b      	beq.n	8006366 <_dtoa_r+0xa5e>
 80062ae:	6879      	ldr	r1, [r7, #4]
 80062b0:	4620      	mov	r0, r4
 80062b2:	f000 f931 	bl	8006518 <_Balloc>
 80062b6:	4605      	mov	r5, r0
 80062b8:	b928      	cbnz	r0, 80062c6 <_dtoa_r+0x9be>
 80062ba:	4b87      	ldr	r3, [pc, #540]	; (80064d8 <_dtoa_r+0xbd0>)
 80062bc:	4602      	mov	r2, r0
 80062be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80062c2:	f7ff bb3b 	b.w	800593c <_dtoa_r+0x34>
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	3202      	adds	r2, #2
 80062ca:	0092      	lsls	r2, r2, #2
 80062cc:	f107 010c 	add.w	r1, r7, #12
 80062d0:	300c      	adds	r0, #12
 80062d2:	f000 f913 	bl	80064fc <memcpy>
 80062d6:	2201      	movs	r2, #1
 80062d8:	4629      	mov	r1, r5
 80062da:	4620      	mov	r0, r4
 80062dc:	f000 fb2e 	bl	800693c <__lshift>
 80062e0:	9b01      	ldr	r3, [sp, #4]
 80062e2:	f103 0901 	add.w	r9, r3, #1
 80062e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80062ea:	4413      	add	r3, r2
 80062ec:	9305      	str	r3, [sp, #20]
 80062ee:	f00a 0301 	and.w	r3, sl, #1
 80062f2:	46b8      	mov	r8, r7
 80062f4:	9304      	str	r3, [sp, #16]
 80062f6:	4607      	mov	r7, r0
 80062f8:	4631      	mov	r1, r6
 80062fa:	ee18 0a10 	vmov	r0, s16
 80062fe:	f7ff fa75 	bl	80057ec <quorem>
 8006302:	4641      	mov	r1, r8
 8006304:	9002      	str	r0, [sp, #8]
 8006306:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800630a:	ee18 0a10 	vmov	r0, s16
 800630e:	f000 fb85 	bl	8006a1c <__mcmp>
 8006312:	463a      	mov	r2, r7
 8006314:	9003      	str	r0, [sp, #12]
 8006316:	4631      	mov	r1, r6
 8006318:	4620      	mov	r0, r4
 800631a:	f000 fb9b 	bl	8006a54 <__mdiff>
 800631e:	68c2      	ldr	r2, [r0, #12]
 8006320:	f109 3bff 	add.w	fp, r9, #4294967295
 8006324:	4605      	mov	r5, r0
 8006326:	bb02      	cbnz	r2, 800636a <_dtoa_r+0xa62>
 8006328:	4601      	mov	r1, r0
 800632a:	ee18 0a10 	vmov	r0, s16
 800632e:	f000 fb75 	bl	8006a1c <__mcmp>
 8006332:	4602      	mov	r2, r0
 8006334:	4629      	mov	r1, r5
 8006336:	4620      	mov	r0, r4
 8006338:	9207      	str	r2, [sp, #28]
 800633a:	f000 f92d 	bl	8006598 <_Bfree>
 800633e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006342:	ea43 0102 	orr.w	r1, r3, r2
 8006346:	9b04      	ldr	r3, [sp, #16]
 8006348:	430b      	orrs	r3, r1
 800634a:	464d      	mov	r5, r9
 800634c:	d10f      	bne.n	800636e <_dtoa_r+0xa66>
 800634e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006352:	d02a      	beq.n	80063aa <_dtoa_r+0xaa2>
 8006354:	9b03      	ldr	r3, [sp, #12]
 8006356:	2b00      	cmp	r3, #0
 8006358:	dd02      	ble.n	8006360 <_dtoa_r+0xa58>
 800635a:	9b02      	ldr	r3, [sp, #8]
 800635c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006360:	f88b a000 	strb.w	sl, [fp]
 8006364:	e775      	b.n	8006252 <_dtoa_r+0x94a>
 8006366:	4638      	mov	r0, r7
 8006368:	e7ba      	b.n	80062e0 <_dtoa_r+0x9d8>
 800636a:	2201      	movs	r2, #1
 800636c:	e7e2      	b.n	8006334 <_dtoa_r+0xa2c>
 800636e:	9b03      	ldr	r3, [sp, #12]
 8006370:	2b00      	cmp	r3, #0
 8006372:	db04      	blt.n	800637e <_dtoa_r+0xa76>
 8006374:	9906      	ldr	r1, [sp, #24]
 8006376:	430b      	orrs	r3, r1
 8006378:	9904      	ldr	r1, [sp, #16]
 800637a:	430b      	orrs	r3, r1
 800637c:	d122      	bne.n	80063c4 <_dtoa_r+0xabc>
 800637e:	2a00      	cmp	r2, #0
 8006380:	ddee      	ble.n	8006360 <_dtoa_r+0xa58>
 8006382:	ee18 1a10 	vmov	r1, s16
 8006386:	2201      	movs	r2, #1
 8006388:	4620      	mov	r0, r4
 800638a:	f000 fad7 	bl	800693c <__lshift>
 800638e:	4631      	mov	r1, r6
 8006390:	ee08 0a10 	vmov	s16, r0
 8006394:	f000 fb42 	bl	8006a1c <__mcmp>
 8006398:	2800      	cmp	r0, #0
 800639a:	dc03      	bgt.n	80063a4 <_dtoa_r+0xa9c>
 800639c:	d1e0      	bne.n	8006360 <_dtoa_r+0xa58>
 800639e:	f01a 0f01 	tst.w	sl, #1
 80063a2:	d0dd      	beq.n	8006360 <_dtoa_r+0xa58>
 80063a4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80063a8:	d1d7      	bne.n	800635a <_dtoa_r+0xa52>
 80063aa:	2339      	movs	r3, #57	; 0x39
 80063ac:	f88b 3000 	strb.w	r3, [fp]
 80063b0:	462b      	mov	r3, r5
 80063b2:	461d      	mov	r5, r3
 80063b4:	3b01      	subs	r3, #1
 80063b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80063ba:	2a39      	cmp	r2, #57	; 0x39
 80063bc:	d071      	beq.n	80064a2 <_dtoa_r+0xb9a>
 80063be:	3201      	adds	r2, #1
 80063c0:	701a      	strb	r2, [r3, #0]
 80063c2:	e746      	b.n	8006252 <_dtoa_r+0x94a>
 80063c4:	2a00      	cmp	r2, #0
 80063c6:	dd07      	ble.n	80063d8 <_dtoa_r+0xad0>
 80063c8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80063cc:	d0ed      	beq.n	80063aa <_dtoa_r+0xaa2>
 80063ce:	f10a 0301 	add.w	r3, sl, #1
 80063d2:	f88b 3000 	strb.w	r3, [fp]
 80063d6:	e73c      	b.n	8006252 <_dtoa_r+0x94a>
 80063d8:	9b05      	ldr	r3, [sp, #20]
 80063da:	f809 ac01 	strb.w	sl, [r9, #-1]
 80063de:	4599      	cmp	r9, r3
 80063e0:	d047      	beq.n	8006472 <_dtoa_r+0xb6a>
 80063e2:	ee18 1a10 	vmov	r1, s16
 80063e6:	2300      	movs	r3, #0
 80063e8:	220a      	movs	r2, #10
 80063ea:	4620      	mov	r0, r4
 80063ec:	f000 f8f6 	bl	80065dc <__multadd>
 80063f0:	45b8      	cmp	r8, r7
 80063f2:	ee08 0a10 	vmov	s16, r0
 80063f6:	f04f 0300 	mov.w	r3, #0
 80063fa:	f04f 020a 	mov.w	r2, #10
 80063fe:	4641      	mov	r1, r8
 8006400:	4620      	mov	r0, r4
 8006402:	d106      	bne.n	8006412 <_dtoa_r+0xb0a>
 8006404:	f000 f8ea 	bl	80065dc <__multadd>
 8006408:	4680      	mov	r8, r0
 800640a:	4607      	mov	r7, r0
 800640c:	f109 0901 	add.w	r9, r9, #1
 8006410:	e772      	b.n	80062f8 <_dtoa_r+0x9f0>
 8006412:	f000 f8e3 	bl	80065dc <__multadd>
 8006416:	4639      	mov	r1, r7
 8006418:	4680      	mov	r8, r0
 800641a:	2300      	movs	r3, #0
 800641c:	220a      	movs	r2, #10
 800641e:	4620      	mov	r0, r4
 8006420:	f000 f8dc 	bl	80065dc <__multadd>
 8006424:	4607      	mov	r7, r0
 8006426:	e7f1      	b.n	800640c <_dtoa_r+0xb04>
 8006428:	9b03      	ldr	r3, [sp, #12]
 800642a:	9302      	str	r3, [sp, #8]
 800642c:	9d01      	ldr	r5, [sp, #4]
 800642e:	ee18 0a10 	vmov	r0, s16
 8006432:	4631      	mov	r1, r6
 8006434:	f7ff f9da 	bl	80057ec <quorem>
 8006438:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800643c:	9b01      	ldr	r3, [sp, #4]
 800643e:	f805 ab01 	strb.w	sl, [r5], #1
 8006442:	1aea      	subs	r2, r5, r3
 8006444:	9b02      	ldr	r3, [sp, #8]
 8006446:	4293      	cmp	r3, r2
 8006448:	dd09      	ble.n	800645e <_dtoa_r+0xb56>
 800644a:	ee18 1a10 	vmov	r1, s16
 800644e:	2300      	movs	r3, #0
 8006450:	220a      	movs	r2, #10
 8006452:	4620      	mov	r0, r4
 8006454:	f000 f8c2 	bl	80065dc <__multadd>
 8006458:	ee08 0a10 	vmov	s16, r0
 800645c:	e7e7      	b.n	800642e <_dtoa_r+0xb26>
 800645e:	9b02      	ldr	r3, [sp, #8]
 8006460:	2b00      	cmp	r3, #0
 8006462:	bfc8      	it	gt
 8006464:	461d      	movgt	r5, r3
 8006466:	9b01      	ldr	r3, [sp, #4]
 8006468:	bfd8      	it	le
 800646a:	2501      	movle	r5, #1
 800646c:	441d      	add	r5, r3
 800646e:	f04f 0800 	mov.w	r8, #0
 8006472:	ee18 1a10 	vmov	r1, s16
 8006476:	2201      	movs	r2, #1
 8006478:	4620      	mov	r0, r4
 800647a:	f000 fa5f 	bl	800693c <__lshift>
 800647e:	4631      	mov	r1, r6
 8006480:	ee08 0a10 	vmov	s16, r0
 8006484:	f000 faca 	bl	8006a1c <__mcmp>
 8006488:	2800      	cmp	r0, #0
 800648a:	dc91      	bgt.n	80063b0 <_dtoa_r+0xaa8>
 800648c:	d102      	bne.n	8006494 <_dtoa_r+0xb8c>
 800648e:	f01a 0f01 	tst.w	sl, #1
 8006492:	d18d      	bne.n	80063b0 <_dtoa_r+0xaa8>
 8006494:	462b      	mov	r3, r5
 8006496:	461d      	mov	r5, r3
 8006498:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800649c:	2a30      	cmp	r2, #48	; 0x30
 800649e:	d0fa      	beq.n	8006496 <_dtoa_r+0xb8e>
 80064a0:	e6d7      	b.n	8006252 <_dtoa_r+0x94a>
 80064a2:	9a01      	ldr	r2, [sp, #4]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d184      	bne.n	80063b2 <_dtoa_r+0xaaa>
 80064a8:	9b00      	ldr	r3, [sp, #0]
 80064aa:	3301      	adds	r3, #1
 80064ac:	9300      	str	r3, [sp, #0]
 80064ae:	2331      	movs	r3, #49	; 0x31
 80064b0:	7013      	strb	r3, [r2, #0]
 80064b2:	e6ce      	b.n	8006252 <_dtoa_r+0x94a>
 80064b4:	4b09      	ldr	r3, [pc, #36]	; (80064dc <_dtoa_r+0xbd4>)
 80064b6:	f7ff ba95 	b.w	80059e4 <_dtoa_r+0xdc>
 80064ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f47f aa6e 	bne.w	800599e <_dtoa_r+0x96>
 80064c2:	4b07      	ldr	r3, [pc, #28]	; (80064e0 <_dtoa_r+0xbd8>)
 80064c4:	f7ff ba8e 	b.w	80059e4 <_dtoa_r+0xdc>
 80064c8:	9b02      	ldr	r3, [sp, #8]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	dcae      	bgt.n	800642c <_dtoa_r+0xb24>
 80064ce:	9b06      	ldr	r3, [sp, #24]
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	f73f aea8 	bgt.w	8006226 <_dtoa_r+0x91e>
 80064d6:	e7a9      	b.n	800642c <_dtoa_r+0xb24>
 80064d8:	08007db7 	.word	0x08007db7
 80064dc:	08007d14 	.word	0x08007d14
 80064e0:	08007d38 	.word	0x08007d38

080064e4 <_localeconv_r>:
 80064e4:	4800      	ldr	r0, [pc, #0]	; (80064e8 <_localeconv_r+0x4>)
 80064e6:	4770      	bx	lr
 80064e8:	20000164 	.word	0x20000164

080064ec <malloc>:
 80064ec:	4b02      	ldr	r3, [pc, #8]	; (80064f8 <malloc+0xc>)
 80064ee:	4601      	mov	r1, r0
 80064f0:	6818      	ldr	r0, [r3, #0]
 80064f2:	f000 bc17 	b.w	8006d24 <_malloc_r>
 80064f6:	bf00      	nop
 80064f8:	20000010 	.word	0x20000010

080064fc <memcpy>:
 80064fc:	440a      	add	r2, r1
 80064fe:	4291      	cmp	r1, r2
 8006500:	f100 33ff 	add.w	r3, r0, #4294967295
 8006504:	d100      	bne.n	8006508 <memcpy+0xc>
 8006506:	4770      	bx	lr
 8006508:	b510      	push	{r4, lr}
 800650a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800650e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006512:	4291      	cmp	r1, r2
 8006514:	d1f9      	bne.n	800650a <memcpy+0xe>
 8006516:	bd10      	pop	{r4, pc}

08006518 <_Balloc>:
 8006518:	b570      	push	{r4, r5, r6, lr}
 800651a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800651c:	4604      	mov	r4, r0
 800651e:	460d      	mov	r5, r1
 8006520:	b976      	cbnz	r6, 8006540 <_Balloc+0x28>
 8006522:	2010      	movs	r0, #16
 8006524:	f7ff ffe2 	bl	80064ec <malloc>
 8006528:	4602      	mov	r2, r0
 800652a:	6260      	str	r0, [r4, #36]	; 0x24
 800652c:	b920      	cbnz	r0, 8006538 <_Balloc+0x20>
 800652e:	4b18      	ldr	r3, [pc, #96]	; (8006590 <_Balloc+0x78>)
 8006530:	4818      	ldr	r0, [pc, #96]	; (8006594 <_Balloc+0x7c>)
 8006532:	2166      	movs	r1, #102	; 0x66
 8006534:	f000 fdd6 	bl	80070e4 <__assert_func>
 8006538:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800653c:	6006      	str	r6, [r0, #0]
 800653e:	60c6      	str	r6, [r0, #12]
 8006540:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006542:	68f3      	ldr	r3, [r6, #12]
 8006544:	b183      	cbz	r3, 8006568 <_Balloc+0x50>
 8006546:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800654e:	b9b8      	cbnz	r0, 8006580 <_Balloc+0x68>
 8006550:	2101      	movs	r1, #1
 8006552:	fa01 f605 	lsl.w	r6, r1, r5
 8006556:	1d72      	adds	r2, r6, #5
 8006558:	0092      	lsls	r2, r2, #2
 800655a:	4620      	mov	r0, r4
 800655c:	f000 fb60 	bl	8006c20 <_calloc_r>
 8006560:	b160      	cbz	r0, 800657c <_Balloc+0x64>
 8006562:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006566:	e00e      	b.n	8006586 <_Balloc+0x6e>
 8006568:	2221      	movs	r2, #33	; 0x21
 800656a:	2104      	movs	r1, #4
 800656c:	4620      	mov	r0, r4
 800656e:	f000 fb57 	bl	8006c20 <_calloc_r>
 8006572:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006574:	60f0      	str	r0, [r6, #12]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d1e4      	bne.n	8006546 <_Balloc+0x2e>
 800657c:	2000      	movs	r0, #0
 800657e:	bd70      	pop	{r4, r5, r6, pc}
 8006580:	6802      	ldr	r2, [r0, #0]
 8006582:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006586:	2300      	movs	r3, #0
 8006588:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800658c:	e7f7      	b.n	800657e <_Balloc+0x66>
 800658e:	bf00      	nop
 8006590:	08007d45 	.word	0x08007d45
 8006594:	08007dc8 	.word	0x08007dc8

08006598 <_Bfree>:
 8006598:	b570      	push	{r4, r5, r6, lr}
 800659a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800659c:	4605      	mov	r5, r0
 800659e:	460c      	mov	r4, r1
 80065a0:	b976      	cbnz	r6, 80065c0 <_Bfree+0x28>
 80065a2:	2010      	movs	r0, #16
 80065a4:	f7ff ffa2 	bl	80064ec <malloc>
 80065a8:	4602      	mov	r2, r0
 80065aa:	6268      	str	r0, [r5, #36]	; 0x24
 80065ac:	b920      	cbnz	r0, 80065b8 <_Bfree+0x20>
 80065ae:	4b09      	ldr	r3, [pc, #36]	; (80065d4 <_Bfree+0x3c>)
 80065b0:	4809      	ldr	r0, [pc, #36]	; (80065d8 <_Bfree+0x40>)
 80065b2:	218a      	movs	r1, #138	; 0x8a
 80065b4:	f000 fd96 	bl	80070e4 <__assert_func>
 80065b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80065bc:	6006      	str	r6, [r0, #0]
 80065be:	60c6      	str	r6, [r0, #12]
 80065c0:	b13c      	cbz	r4, 80065d2 <_Bfree+0x3a>
 80065c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80065c4:	6862      	ldr	r2, [r4, #4]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065cc:	6021      	str	r1, [r4, #0]
 80065ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80065d2:	bd70      	pop	{r4, r5, r6, pc}
 80065d4:	08007d45 	.word	0x08007d45
 80065d8:	08007dc8 	.word	0x08007dc8

080065dc <__multadd>:
 80065dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065e0:	690d      	ldr	r5, [r1, #16]
 80065e2:	4607      	mov	r7, r0
 80065e4:	460c      	mov	r4, r1
 80065e6:	461e      	mov	r6, r3
 80065e8:	f101 0c14 	add.w	ip, r1, #20
 80065ec:	2000      	movs	r0, #0
 80065ee:	f8dc 3000 	ldr.w	r3, [ip]
 80065f2:	b299      	uxth	r1, r3
 80065f4:	fb02 6101 	mla	r1, r2, r1, r6
 80065f8:	0c1e      	lsrs	r6, r3, #16
 80065fa:	0c0b      	lsrs	r3, r1, #16
 80065fc:	fb02 3306 	mla	r3, r2, r6, r3
 8006600:	b289      	uxth	r1, r1
 8006602:	3001      	adds	r0, #1
 8006604:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006608:	4285      	cmp	r5, r0
 800660a:	f84c 1b04 	str.w	r1, [ip], #4
 800660e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006612:	dcec      	bgt.n	80065ee <__multadd+0x12>
 8006614:	b30e      	cbz	r6, 800665a <__multadd+0x7e>
 8006616:	68a3      	ldr	r3, [r4, #8]
 8006618:	42ab      	cmp	r3, r5
 800661a:	dc19      	bgt.n	8006650 <__multadd+0x74>
 800661c:	6861      	ldr	r1, [r4, #4]
 800661e:	4638      	mov	r0, r7
 8006620:	3101      	adds	r1, #1
 8006622:	f7ff ff79 	bl	8006518 <_Balloc>
 8006626:	4680      	mov	r8, r0
 8006628:	b928      	cbnz	r0, 8006636 <__multadd+0x5a>
 800662a:	4602      	mov	r2, r0
 800662c:	4b0c      	ldr	r3, [pc, #48]	; (8006660 <__multadd+0x84>)
 800662e:	480d      	ldr	r0, [pc, #52]	; (8006664 <__multadd+0x88>)
 8006630:	21b5      	movs	r1, #181	; 0xb5
 8006632:	f000 fd57 	bl	80070e4 <__assert_func>
 8006636:	6922      	ldr	r2, [r4, #16]
 8006638:	3202      	adds	r2, #2
 800663a:	f104 010c 	add.w	r1, r4, #12
 800663e:	0092      	lsls	r2, r2, #2
 8006640:	300c      	adds	r0, #12
 8006642:	f7ff ff5b 	bl	80064fc <memcpy>
 8006646:	4621      	mov	r1, r4
 8006648:	4638      	mov	r0, r7
 800664a:	f7ff ffa5 	bl	8006598 <_Bfree>
 800664e:	4644      	mov	r4, r8
 8006650:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006654:	3501      	adds	r5, #1
 8006656:	615e      	str	r6, [r3, #20]
 8006658:	6125      	str	r5, [r4, #16]
 800665a:	4620      	mov	r0, r4
 800665c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006660:	08007db7 	.word	0x08007db7
 8006664:	08007dc8 	.word	0x08007dc8

08006668 <__hi0bits>:
 8006668:	0c03      	lsrs	r3, r0, #16
 800666a:	041b      	lsls	r3, r3, #16
 800666c:	b9d3      	cbnz	r3, 80066a4 <__hi0bits+0x3c>
 800666e:	0400      	lsls	r0, r0, #16
 8006670:	2310      	movs	r3, #16
 8006672:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006676:	bf04      	itt	eq
 8006678:	0200      	lsleq	r0, r0, #8
 800667a:	3308      	addeq	r3, #8
 800667c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006680:	bf04      	itt	eq
 8006682:	0100      	lsleq	r0, r0, #4
 8006684:	3304      	addeq	r3, #4
 8006686:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800668a:	bf04      	itt	eq
 800668c:	0080      	lsleq	r0, r0, #2
 800668e:	3302      	addeq	r3, #2
 8006690:	2800      	cmp	r0, #0
 8006692:	db05      	blt.n	80066a0 <__hi0bits+0x38>
 8006694:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006698:	f103 0301 	add.w	r3, r3, #1
 800669c:	bf08      	it	eq
 800669e:	2320      	moveq	r3, #32
 80066a0:	4618      	mov	r0, r3
 80066a2:	4770      	bx	lr
 80066a4:	2300      	movs	r3, #0
 80066a6:	e7e4      	b.n	8006672 <__hi0bits+0xa>

080066a8 <__lo0bits>:
 80066a8:	6803      	ldr	r3, [r0, #0]
 80066aa:	f013 0207 	ands.w	r2, r3, #7
 80066ae:	4601      	mov	r1, r0
 80066b0:	d00b      	beq.n	80066ca <__lo0bits+0x22>
 80066b2:	07da      	lsls	r2, r3, #31
 80066b4:	d423      	bmi.n	80066fe <__lo0bits+0x56>
 80066b6:	0798      	lsls	r0, r3, #30
 80066b8:	bf49      	itett	mi
 80066ba:	085b      	lsrmi	r3, r3, #1
 80066bc:	089b      	lsrpl	r3, r3, #2
 80066be:	2001      	movmi	r0, #1
 80066c0:	600b      	strmi	r3, [r1, #0]
 80066c2:	bf5c      	itt	pl
 80066c4:	600b      	strpl	r3, [r1, #0]
 80066c6:	2002      	movpl	r0, #2
 80066c8:	4770      	bx	lr
 80066ca:	b298      	uxth	r0, r3
 80066cc:	b9a8      	cbnz	r0, 80066fa <__lo0bits+0x52>
 80066ce:	0c1b      	lsrs	r3, r3, #16
 80066d0:	2010      	movs	r0, #16
 80066d2:	b2da      	uxtb	r2, r3
 80066d4:	b90a      	cbnz	r2, 80066da <__lo0bits+0x32>
 80066d6:	3008      	adds	r0, #8
 80066d8:	0a1b      	lsrs	r3, r3, #8
 80066da:	071a      	lsls	r2, r3, #28
 80066dc:	bf04      	itt	eq
 80066de:	091b      	lsreq	r3, r3, #4
 80066e0:	3004      	addeq	r0, #4
 80066e2:	079a      	lsls	r2, r3, #30
 80066e4:	bf04      	itt	eq
 80066e6:	089b      	lsreq	r3, r3, #2
 80066e8:	3002      	addeq	r0, #2
 80066ea:	07da      	lsls	r2, r3, #31
 80066ec:	d403      	bmi.n	80066f6 <__lo0bits+0x4e>
 80066ee:	085b      	lsrs	r3, r3, #1
 80066f0:	f100 0001 	add.w	r0, r0, #1
 80066f4:	d005      	beq.n	8006702 <__lo0bits+0x5a>
 80066f6:	600b      	str	r3, [r1, #0]
 80066f8:	4770      	bx	lr
 80066fa:	4610      	mov	r0, r2
 80066fc:	e7e9      	b.n	80066d2 <__lo0bits+0x2a>
 80066fe:	2000      	movs	r0, #0
 8006700:	4770      	bx	lr
 8006702:	2020      	movs	r0, #32
 8006704:	4770      	bx	lr
	...

08006708 <__i2b>:
 8006708:	b510      	push	{r4, lr}
 800670a:	460c      	mov	r4, r1
 800670c:	2101      	movs	r1, #1
 800670e:	f7ff ff03 	bl	8006518 <_Balloc>
 8006712:	4602      	mov	r2, r0
 8006714:	b928      	cbnz	r0, 8006722 <__i2b+0x1a>
 8006716:	4b05      	ldr	r3, [pc, #20]	; (800672c <__i2b+0x24>)
 8006718:	4805      	ldr	r0, [pc, #20]	; (8006730 <__i2b+0x28>)
 800671a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800671e:	f000 fce1 	bl	80070e4 <__assert_func>
 8006722:	2301      	movs	r3, #1
 8006724:	6144      	str	r4, [r0, #20]
 8006726:	6103      	str	r3, [r0, #16]
 8006728:	bd10      	pop	{r4, pc}
 800672a:	bf00      	nop
 800672c:	08007db7 	.word	0x08007db7
 8006730:	08007dc8 	.word	0x08007dc8

08006734 <__multiply>:
 8006734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006738:	4691      	mov	r9, r2
 800673a:	690a      	ldr	r2, [r1, #16]
 800673c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006740:	429a      	cmp	r2, r3
 8006742:	bfb8      	it	lt
 8006744:	460b      	movlt	r3, r1
 8006746:	460c      	mov	r4, r1
 8006748:	bfbc      	itt	lt
 800674a:	464c      	movlt	r4, r9
 800674c:	4699      	movlt	r9, r3
 800674e:	6927      	ldr	r7, [r4, #16]
 8006750:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006754:	68a3      	ldr	r3, [r4, #8]
 8006756:	6861      	ldr	r1, [r4, #4]
 8006758:	eb07 060a 	add.w	r6, r7, sl
 800675c:	42b3      	cmp	r3, r6
 800675e:	b085      	sub	sp, #20
 8006760:	bfb8      	it	lt
 8006762:	3101      	addlt	r1, #1
 8006764:	f7ff fed8 	bl	8006518 <_Balloc>
 8006768:	b930      	cbnz	r0, 8006778 <__multiply+0x44>
 800676a:	4602      	mov	r2, r0
 800676c:	4b44      	ldr	r3, [pc, #272]	; (8006880 <__multiply+0x14c>)
 800676e:	4845      	ldr	r0, [pc, #276]	; (8006884 <__multiply+0x150>)
 8006770:	f240 115d 	movw	r1, #349	; 0x15d
 8006774:	f000 fcb6 	bl	80070e4 <__assert_func>
 8006778:	f100 0514 	add.w	r5, r0, #20
 800677c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006780:	462b      	mov	r3, r5
 8006782:	2200      	movs	r2, #0
 8006784:	4543      	cmp	r3, r8
 8006786:	d321      	bcc.n	80067cc <__multiply+0x98>
 8006788:	f104 0314 	add.w	r3, r4, #20
 800678c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006790:	f109 0314 	add.w	r3, r9, #20
 8006794:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006798:	9202      	str	r2, [sp, #8]
 800679a:	1b3a      	subs	r2, r7, r4
 800679c:	3a15      	subs	r2, #21
 800679e:	f022 0203 	bic.w	r2, r2, #3
 80067a2:	3204      	adds	r2, #4
 80067a4:	f104 0115 	add.w	r1, r4, #21
 80067a8:	428f      	cmp	r7, r1
 80067aa:	bf38      	it	cc
 80067ac:	2204      	movcc	r2, #4
 80067ae:	9201      	str	r2, [sp, #4]
 80067b0:	9a02      	ldr	r2, [sp, #8]
 80067b2:	9303      	str	r3, [sp, #12]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d80c      	bhi.n	80067d2 <__multiply+0x9e>
 80067b8:	2e00      	cmp	r6, #0
 80067ba:	dd03      	ble.n	80067c4 <__multiply+0x90>
 80067bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d05a      	beq.n	800687a <__multiply+0x146>
 80067c4:	6106      	str	r6, [r0, #16]
 80067c6:	b005      	add	sp, #20
 80067c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067cc:	f843 2b04 	str.w	r2, [r3], #4
 80067d0:	e7d8      	b.n	8006784 <__multiply+0x50>
 80067d2:	f8b3 a000 	ldrh.w	sl, [r3]
 80067d6:	f1ba 0f00 	cmp.w	sl, #0
 80067da:	d024      	beq.n	8006826 <__multiply+0xf2>
 80067dc:	f104 0e14 	add.w	lr, r4, #20
 80067e0:	46a9      	mov	r9, r5
 80067e2:	f04f 0c00 	mov.w	ip, #0
 80067e6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80067ea:	f8d9 1000 	ldr.w	r1, [r9]
 80067ee:	fa1f fb82 	uxth.w	fp, r2
 80067f2:	b289      	uxth	r1, r1
 80067f4:	fb0a 110b 	mla	r1, sl, fp, r1
 80067f8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80067fc:	f8d9 2000 	ldr.w	r2, [r9]
 8006800:	4461      	add	r1, ip
 8006802:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006806:	fb0a c20b 	mla	r2, sl, fp, ip
 800680a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800680e:	b289      	uxth	r1, r1
 8006810:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006814:	4577      	cmp	r7, lr
 8006816:	f849 1b04 	str.w	r1, [r9], #4
 800681a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800681e:	d8e2      	bhi.n	80067e6 <__multiply+0xb2>
 8006820:	9a01      	ldr	r2, [sp, #4]
 8006822:	f845 c002 	str.w	ip, [r5, r2]
 8006826:	9a03      	ldr	r2, [sp, #12]
 8006828:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800682c:	3304      	adds	r3, #4
 800682e:	f1b9 0f00 	cmp.w	r9, #0
 8006832:	d020      	beq.n	8006876 <__multiply+0x142>
 8006834:	6829      	ldr	r1, [r5, #0]
 8006836:	f104 0c14 	add.w	ip, r4, #20
 800683a:	46ae      	mov	lr, r5
 800683c:	f04f 0a00 	mov.w	sl, #0
 8006840:	f8bc b000 	ldrh.w	fp, [ip]
 8006844:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006848:	fb09 220b 	mla	r2, r9, fp, r2
 800684c:	4492      	add	sl, r2
 800684e:	b289      	uxth	r1, r1
 8006850:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006854:	f84e 1b04 	str.w	r1, [lr], #4
 8006858:	f85c 2b04 	ldr.w	r2, [ip], #4
 800685c:	f8be 1000 	ldrh.w	r1, [lr]
 8006860:	0c12      	lsrs	r2, r2, #16
 8006862:	fb09 1102 	mla	r1, r9, r2, r1
 8006866:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800686a:	4567      	cmp	r7, ip
 800686c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006870:	d8e6      	bhi.n	8006840 <__multiply+0x10c>
 8006872:	9a01      	ldr	r2, [sp, #4]
 8006874:	50a9      	str	r1, [r5, r2]
 8006876:	3504      	adds	r5, #4
 8006878:	e79a      	b.n	80067b0 <__multiply+0x7c>
 800687a:	3e01      	subs	r6, #1
 800687c:	e79c      	b.n	80067b8 <__multiply+0x84>
 800687e:	bf00      	nop
 8006880:	08007db7 	.word	0x08007db7
 8006884:	08007dc8 	.word	0x08007dc8

08006888 <__pow5mult>:
 8006888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800688c:	4615      	mov	r5, r2
 800688e:	f012 0203 	ands.w	r2, r2, #3
 8006892:	4606      	mov	r6, r0
 8006894:	460f      	mov	r7, r1
 8006896:	d007      	beq.n	80068a8 <__pow5mult+0x20>
 8006898:	4c25      	ldr	r4, [pc, #148]	; (8006930 <__pow5mult+0xa8>)
 800689a:	3a01      	subs	r2, #1
 800689c:	2300      	movs	r3, #0
 800689e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80068a2:	f7ff fe9b 	bl	80065dc <__multadd>
 80068a6:	4607      	mov	r7, r0
 80068a8:	10ad      	asrs	r5, r5, #2
 80068aa:	d03d      	beq.n	8006928 <__pow5mult+0xa0>
 80068ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80068ae:	b97c      	cbnz	r4, 80068d0 <__pow5mult+0x48>
 80068b0:	2010      	movs	r0, #16
 80068b2:	f7ff fe1b 	bl	80064ec <malloc>
 80068b6:	4602      	mov	r2, r0
 80068b8:	6270      	str	r0, [r6, #36]	; 0x24
 80068ba:	b928      	cbnz	r0, 80068c8 <__pow5mult+0x40>
 80068bc:	4b1d      	ldr	r3, [pc, #116]	; (8006934 <__pow5mult+0xac>)
 80068be:	481e      	ldr	r0, [pc, #120]	; (8006938 <__pow5mult+0xb0>)
 80068c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80068c4:	f000 fc0e 	bl	80070e4 <__assert_func>
 80068c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80068cc:	6004      	str	r4, [r0, #0]
 80068ce:	60c4      	str	r4, [r0, #12]
 80068d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80068d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80068d8:	b94c      	cbnz	r4, 80068ee <__pow5mult+0x66>
 80068da:	f240 2171 	movw	r1, #625	; 0x271
 80068de:	4630      	mov	r0, r6
 80068e0:	f7ff ff12 	bl	8006708 <__i2b>
 80068e4:	2300      	movs	r3, #0
 80068e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80068ea:	4604      	mov	r4, r0
 80068ec:	6003      	str	r3, [r0, #0]
 80068ee:	f04f 0900 	mov.w	r9, #0
 80068f2:	07eb      	lsls	r3, r5, #31
 80068f4:	d50a      	bpl.n	800690c <__pow5mult+0x84>
 80068f6:	4639      	mov	r1, r7
 80068f8:	4622      	mov	r2, r4
 80068fa:	4630      	mov	r0, r6
 80068fc:	f7ff ff1a 	bl	8006734 <__multiply>
 8006900:	4639      	mov	r1, r7
 8006902:	4680      	mov	r8, r0
 8006904:	4630      	mov	r0, r6
 8006906:	f7ff fe47 	bl	8006598 <_Bfree>
 800690a:	4647      	mov	r7, r8
 800690c:	106d      	asrs	r5, r5, #1
 800690e:	d00b      	beq.n	8006928 <__pow5mult+0xa0>
 8006910:	6820      	ldr	r0, [r4, #0]
 8006912:	b938      	cbnz	r0, 8006924 <__pow5mult+0x9c>
 8006914:	4622      	mov	r2, r4
 8006916:	4621      	mov	r1, r4
 8006918:	4630      	mov	r0, r6
 800691a:	f7ff ff0b 	bl	8006734 <__multiply>
 800691e:	6020      	str	r0, [r4, #0]
 8006920:	f8c0 9000 	str.w	r9, [r0]
 8006924:	4604      	mov	r4, r0
 8006926:	e7e4      	b.n	80068f2 <__pow5mult+0x6a>
 8006928:	4638      	mov	r0, r7
 800692a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800692e:	bf00      	nop
 8006930:	08007f18 	.word	0x08007f18
 8006934:	08007d45 	.word	0x08007d45
 8006938:	08007dc8 	.word	0x08007dc8

0800693c <__lshift>:
 800693c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006940:	460c      	mov	r4, r1
 8006942:	6849      	ldr	r1, [r1, #4]
 8006944:	6923      	ldr	r3, [r4, #16]
 8006946:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800694a:	68a3      	ldr	r3, [r4, #8]
 800694c:	4607      	mov	r7, r0
 800694e:	4691      	mov	r9, r2
 8006950:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006954:	f108 0601 	add.w	r6, r8, #1
 8006958:	42b3      	cmp	r3, r6
 800695a:	db0b      	blt.n	8006974 <__lshift+0x38>
 800695c:	4638      	mov	r0, r7
 800695e:	f7ff fddb 	bl	8006518 <_Balloc>
 8006962:	4605      	mov	r5, r0
 8006964:	b948      	cbnz	r0, 800697a <__lshift+0x3e>
 8006966:	4602      	mov	r2, r0
 8006968:	4b2a      	ldr	r3, [pc, #168]	; (8006a14 <__lshift+0xd8>)
 800696a:	482b      	ldr	r0, [pc, #172]	; (8006a18 <__lshift+0xdc>)
 800696c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006970:	f000 fbb8 	bl	80070e4 <__assert_func>
 8006974:	3101      	adds	r1, #1
 8006976:	005b      	lsls	r3, r3, #1
 8006978:	e7ee      	b.n	8006958 <__lshift+0x1c>
 800697a:	2300      	movs	r3, #0
 800697c:	f100 0114 	add.w	r1, r0, #20
 8006980:	f100 0210 	add.w	r2, r0, #16
 8006984:	4618      	mov	r0, r3
 8006986:	4553      	cmp	r3, sl
 8006988:	db37      	blt.n	80069fa <__lshift+0xbe>
 800698a:	6920      	ldr	r0, [r4, #16]
 800698c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006990:	f104 0314 	add.w	r3, r4, #20
 8006994:	f019 091f 	ands.w	r9, r9, #31
 8006998:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800699c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80069a0:	d02f      	beq.n	8006a02 <__lshift+0xc6>
 80069a2:	f1c9 0e20 	rsb	lr, r9, #32
 80069a6:	468a      	mov	sl, r1
 80069a8:	f04f 0c00 	mov.w	ip, #0
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	fa02 f209 	lsl.w	r2, r2, r9
 80069b2:	ea42 020c 	orr.w	r2, r2, ip
 80069b6:	f84a 2b04 	str.w	r2, [sl], #4
 80069ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80069be:	4298      	cmp	r0, r3
 80069c0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80069c4:	d8f2      	bhi.n	80069ac <__lshift+0x70>
 80069c6:	1b03      	subs	r3, r0, r4
 80069c8:	3b15      	subs	r3, #21
 80069ca:	f023 0303 	bic.w	r3, r3, #3
 80069ce:	3304      	adds	r3, #4
 80069d0:	f104 0215 	add.w	r2, r4, #21
 80069d4:	4290      	cmp	r0, r2
 80069d6:	bf38      	it	cc
 80069d8:	2304      	movcc	r3, #4
 80069da:	f841 c003 	str.w	ip, [r1, r3]
 80069de:	f1bc 0f00 	cmp.w	ip, #0
 80069e2:	d001      	beq.n	80069e8 <__lshift+0xac>
 80069e4:	f108 0602 	add.w	r6, r8, #2
 80069e8:	3e01      	subs	r6, #1
 80069ea:	4638      	mov	r0, r7
 80069ec:	612e      	str	r6, [r5, #16]
 80069ee:	4621      	mov	r1, r4
 80069f0:	f7ff fdd2 	bl	8006598 <_Bfree>
 80069f4:	4628      	mov	r0, r5
 80069f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80069fe:	3301      	adds	r3, #1
 8006a00:	e7c1      	b.n	8006986 <__lshift+0x4a>
 8006a02:	3904      	subs	r1, #4
 8006a04:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a08:	f841 2f04 	str.w	r2, [r1, #4]!
 8006a0c:	4298      	cmp	r0, r3
 8006a0e:	d8f9      	bhi.n	8006a04 <__lshift+0xc8>
 8006a10:	e7ea      	b.n	80069e8 <__lshift+0xac>
 8006a12:	bf00      	nop
 8006a14:	08007db7 	.word	0x08007db7
 8006a18:	08007dc8 	.word	0x08007dc8

08006a1c <__mcmp>:
 8006a1c:	b530      	push	{r4, r5, lr}
 8006a1e:	6902      	ldr	r2, [r0, #16]
 8006a20:	690c      	ldr	r4, [r1, #16]
 8006a22:	1b12      	subs	r2, r2, r4
 8006a24:	d10e      	bne.n	8006a44 <__mcmp+0x28>
 8006a26:	f100 0314 	add.w	r3, r0, #20
 8006a2a:	3114      	adds	r1, #20
 8006a2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006a30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006a34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006a38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006a3c:	42a5      	cmp	r5, r4
 8006a3e:	d003      	beq.n	8006a48 <__mcmp+0x2c>
 8006a40:	d305      	bcc.n	8006a4e <__mcmp+0x32>
 8006a42:	2201      	movs	r2, #1
 8006a44:	4610      	mov	r0, r2
 8006a46:	bd30      	pop	{r4, r5, pc}
 8006a48:	4283      	cmp	r3, r0
 8006a4a:	d3f3      	bcc.n	8006a34 <__mcmp+0x18>
 8006a4c:	e7fa      	b.n	8006a44 <__mcmp+0x28>
 8006a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a52:	e7f7      	b.n	8006a44 <__mcmp+0x28>

08006a54 <__mdiff>:
 8006a54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a58:	460c      	mov	r4, r1
 8006a5a:	4606      	mov	r6, r0
 8006a5c:	4611      	mov	r1, r2
 8006a5e:	4620      	mov	r0, r4
 8006a60:	4690      	mov	r8, r2
 8006a62:	f7ff ffdb 	bl	8006a1c <__mcmp>
 8006a66:	1e05      	subs	r5, r0, #0
 8006a68:	d110      	bne.n	8006a8c <__mdiff+0x38>
 8006a6a:	4629      	mov	r1, r5
 8006a6c:	4630      	mov	r0, r6
 8006a6e:	f7ff fd53 	bl	8006518 <_Balloc>
 8006a72:	b930      	cbnz	r0, 8006a82 <__mdiff+0x2e>
 8006a74:	4b3a      	ldr	r3, [pc, #232]	; (8006b60 <__mdiff+0x10c>)
 8006a76:	4602      	mov	r2, r0
 8006a78:	f240 2132 	movw	r1, #562	; 0x232
 8006a7c:	4839      	ldr	r0, [pc, #228]	; (8006b64 <__mdiff+0x110>)
 8006a7e:	f000 fb31 	bl	80070e4 <__assert_func>
 8006a82:	2301      	movs	r3, #1
 8006a84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006a88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a8c:	bfa4      	itt	ge
 8006a8e:	4643      	movge	r3, r8
 8006a90:	46a0      	movge	r8, r4
 8006a92:	4630      	mov	r0, r6
 8006a94:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006a98:	bfa6      	itte	ge
 8006a9a:	461c      	movge	r4, r3
 8006a9c:	2500      	movge	r5, #0
 8006a9e:	2501      	movlt	r5, #1
 8006aa0:	f7ff fd3a 	bl	8006518 <_Balloc>
 8006aa4:	b920      	cbnz	r0, 8006ab0 <__mdiff+0x5c>
 8006aa6:	4b2e      	ldr	r3, [pc, #184]	; (8006b60 <__mdiff+0x10c>)
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006aae:	e7e5      	b.n	8006a7c <__mdiff+0x28>
 8006ab0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006ab4:	6926      	ldr	r6, [r4, #16]
 8006ab6:	60c5      	str	r5, [r0, #12]
 8006ab8:	f104 0914 	add.w	r9, r4, #20
 8006abc:	f108 0514 	add.w	r5, r8, #20
 8006ac0:	f100 0e14 	add.w	lr, r0, #20
 8006ac4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006ac8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006acc:	f108 0210 	add.w	r2, r8, #16
 8006ad0:	46f2      	mov	sl, lr
 8006ad2:	2100      	movs	r1, #0
 8006ad4:	f859 3b04 	ldr.w	r3, [r9], #4
 8006ad8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006adc:	fa1f f883 	uxth.w	r8, r3
 8006ae0:	fa11 f18b 	uxtah	r1, r1, fp
 8006ae4:	0c1b      	lsrs	r3, r3, #16
 8006ae6:	eba1 0808 	sub.w	r8, r1, r8
 8006aea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006aee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006af2:	fa1f f888 	uxth.w	r8, r8
 8006af6:	1419      	asrs	r1, r3, #16
 8006af8:	454e      	cmp	r6, r9
 8006afa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006afe:	f84a 3b04 	str.w	r3, [sl], #4
 8006b02:	d8e7      	bhi.n	8006ad4 <__mdiff+0x80>
 8006b04:	1b33      	subs	r3, r6, r4
 8006b06:	3b15      	subs	r3, #21
 8006b08:	f023 0303 	bic.w	r3, r3, #3
 8006b0c:	3304      	adds	r3, #4
 8006b0e:	3415      	adds	r4, #21
 8006b10:	42a6      	cmp	r6, r4
 8006b12:	bf38      	it	cc
 8006b14:	2304      	movcc	r3, #4
 8006b16:	441d      	add	r5, r3
 8006b18:	4473      	add	r3, lr
 8006b1a:	469e      	mov	lr, r3
 8006b1c:	462e      	mov	r6, r5
 8006b1e:	4566      	cmp	r6, ip
 8006b20:	d30e      	bcc.n	8006b40 <__mdiff+0xec>
 8006b22:	f10c 0203 	add.w	r2, ip, #3
 8006b26:	1b52      	subs	r2, r2, r5
 8006b28:	f022 0203 	bic.w	r2, r2, #3
 8006b2c:	3d03      	subs	r5, #3
 8006b2e:	45ac      	cmp	ip, r5
 8006b30:	bf38      	it	cc
 8006b32:	2200      	movcc	r2, #0
 8006b34:	441a      	add	r2, r3
 8006b36:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006b3a:	b17b      	cbz	r3, 8006b5c <__mdiff+0x108>
 8006b3c:	6107      	str	r7, [r0, #16]
 8006b3e:	e7a3      	b.n	8006a88 <__mdiff+0x34>
 8006b40:	f856 8b04 	ldr.w	r8, [r6], #4
 8006b44:	fa11 f288 	uxtah	r2, r1, r8
 8006b48:	1414      	asrs	r4, r2, #16
 8006b4a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006b4e:	b292      	uxth	r2, r2
 8006b50:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006b54:	f84e 2b04 	str.w	r2, [lr], #4
 8006b58:	1421      	asrs	r1, r4, #16
 8006b5a:	e7e0      	b.n	8006b1e <__mdiff+0xca>
 8006b5c:	3f01      	subs	r7, #1
 8006b5e:	e7ea      	b.n	8006b36 <__mdiff+0xe2>
 8006b60:	08007db7 	.word	0x08007db7
 8006b64:	08007dc8 	.word	0x08007dc8

08006b68 <__d2b>:
 8006b68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006b6c:	4689      	mov	r9, r1
 8006b6e:	2101      	movs	r1, #1
 8006b70:	ec57 6b10 	vmov	r6, r7, d0
 8006b74:	4690      	mov	r8, r2
 8006b76:	f7ff fccf 	bl	8006518 <_Balloc>
 8006b7a:	4604      	mov	r4, r0
 8006b7c:	b930      	cbnz	r0, 8006b8c <__d2b+0x24>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	4b25      	ldr	r3, [pc, #148]	; (8006c18 <__d2b+0xb0>)
 8006b82:	4826      	ldr	r0, [pc, #152]	; (8006c1c <__d2b+0xb4>)
 8006b84:	f240 310a 	movw	r1, #778	; 0x30a
 8006b88:	f000 faac 	bl	80070e4 <__assert_func>
 8006b8c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006b90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006b94:	bb35      	cbnz	r5, 8006be4 <__d2b+0x7c>
 8006b96:	2e00      	cmp	r6, #0
 8006b98:	9301      	str	r3, [sp, #4]
 8006b9a:	d028      	beq.n	8006bee <__d2b+0x86>
 8006b9c:	4668      	mov	r0, sp
 8006b9e:	9600      	str	r6, [sp, #0]
 8006ba0:	f7ff fd82 	bl	80066a8 <__lo0bits>
 8006ba4:	9900      	ldr	r1, [sp, #0]
 8006ba6:	b300      	cbz	r0, 8006bea <__d2b+0x82>
 8006ba8:	9a01      	ldr	r2, [sp, #4]
 8006baa:	f1c0 0320 	rsb	r3, r0, #32
 8006bae:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb2:	430b      	orrs	r3, r1
 8006bb4:	40c2      	lsrs	r2, r0
 8006bb6:	6163      	str	r3, [r4, #20]
 8006bb8:	9201      	str	r2, [sp, #4]
 8006bba:	9b01      	ldr	r3, [sp, #4]
 8006bbc:	61a3      	str	r3, [r4, #24]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	bf14      	ite	ne
 8006bc2:	2202      	movne	r2, #2
 8006bc4:	2201      	moveq	r2, #1
 8006bc6:	6122      	str	r2, [r4, #16]
 8006bc8:	b1d5      	cbz	r5, 8006c00 <__d2b+0x98>
 8006bca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006bce:	4405      	add	r5, r0
 8006bd0:	f8c9 5000 	str.w	r5, [r9]
 8006bd4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006bd8:	f8c8 0000 	str.w	r0, [r8]
 8006bdc:	4620      	mov	r0, r4
 8006bde:	b003      	add	sp, #12
 8006be0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006be4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006be8:	e7d5      	b.n	8006b96 <__d2b+0x2e>
 8006bea:	6161      	str	r1, [r4, #20]
 8006bec:	e7e5      	b.n	8006bba <__d2b+0x52>
 8006bee:	a801      	add	r0, sp, #4
 8006bf0:	f7ff fd5a 	bl	80066a8 <__lo0bits>
 8006bf4:	9b01      	ldr	r3, [sp, #4]
 8006bf6:	6163      	str	r3, [r4, #20]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	6122      	str	r2, [r4, #16]
 8006bfc:	3020      	adds	r0, #32
 8006bfe:	e7e3      	b.n	8006bc8 <__d2b+0x60>
 8006c00:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006c04:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006c08:	f8c9 0000 	str.w	r0, [r9]
 8006c0c:	6918      	ldr	r0, [r3, #16]
 8006c0e:	f7ff fd2b 	bl	8006668 <__hi0bits>
 8006c12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006c16:	e7df      	b.n	8006bd8 <__d2b+0x70>
 8006c18:	08007db7 	.word	0x08007db7
 8006c1c:	08007dc8 	.word	0x08007dc8

08006c20 <_calloc_r>:
 8006c20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c22:	fba1 2402 	umull	r2, r4, r1, r2
 8006c26:	b94c      	cbnz	r4, 8006c3c <_calloc_r+0x1c>
 8006c28:	4611      	mov	r1, r2
 8006c2a:	9201      	str	r2, [sp, #4]
 8006c2c:	f000 f87a 	bl	8006d24 <_malloc_r>
 8006c30:	9a01      	ldr	r2, [sp, #4]
 8006c32:	4605      	mov	r5, r0
 8006c34:	b930      	cbnz	r0, 8006c44 <_calloc_r+0x24>
 8006c36:	4628      	mov	r0, r5
 8006c38:	b003      	add	sp, #12
 8006c3a:	bd30      	pop	{r4, r5, pc}
 8006c3c:	220c      	movs	r2, #12
 8006c3e:	6002      	str	r2, [r0, #0]
 8006c40:	2500      	movs	r5, #0
 8006c42:	e7f8      	b.n	8006c36 <_calloc_r+0x16>
 8006c44:	4621      	mov	r1, r4
 8006c46:	f7fe f93f 	bl	8004ec8 <memset>
 8006c4a:	e7f4      	b.n	8006c36 <_calloc_r+0x16>

08006c4c <_free_r>:
 8006c4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c4e:	2900      	cmp	r1, #0
 8006c50:	d044      	beq.n	8006cdc <_free_r+0x90>
 8006c52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c56:	9001      	str	r0, [sp, #4]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f1a1 0404 	sub.w	r4, r1, #4
 8006c5e:	bfb8      	it	lt
 8006c60:	18e4      	addlt	r4, r4, r3
 8006c62:	f000 fa9b 	bl	800719c <__malloc_lock>
 8006c66:	4a1e      	ldr	r2, [pc, #120]	; (8006ce0 <_free_r+0x94>)
 8006c68:	9801      	ldr	r0, [sp, #4]
 8006c6a:	6813      	ldr	r3, [r2, #0]
 8006c6c:	b933      	cbnz	r3, 8006c7c <_free_r+0x30>
 8006c6e:	6063      	str	r3, [r4, #4]
 8006c70:	6014      	str	r4, [r2, #0]
 8006c72:	b003      	add	sp, #12
 8006c74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c78:	f000 ba96 	b.w	80071a8 <__malloc_unlock>
 8006c7c:	42a3      	cmp	r3, r4
 8006c7e:	d908      	bls.n	8006c92 <_free_r+0x46>
 8006c80:	6825      	ldr	r5, [r4, #0]
 8006c82:	1961      	adds	r1, r4, r5
 8006c84:	428b      	cmp	r3, r1
 8006c86:	bf01      	itttt	eq
 8006c88:	6819      	ldreq	r1, [r3, #0]
 8006c8a:	685b      	ldreq	r3, [r3, #4]
 8006c8c:	1949      	addeq	r1, r1, r5
 8006c8e:	6021      	streq	r1, [r4, #0]
 8006c90:	e7ed      	b.n	8006c6e <_free_r+0x22>
 8006c92:	461a      	mov	r2, r3
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	b10b      	cbz	r3, 8006c9c <_free_r+0x50>
 8006c98:	42a3      	cmp	r3, r4
 8006c9a:	d9fa      	bls.n	8006c92 <_free_r+0x46>
 8006c9c:	6811      	ldr	r1, [r2, #0]
 8006c9e:	1855      	adds	r5, r2, r1
 8006ca0:	42a5      	cmp	r5, r4
 8006ca2:	d10b      	bne.n	8006cbc <_free_r+0x70>
 8006ca4:	6824      	ldr	r4, [r4, #0]
 8006ca6:	4421      	add	r1, r4
 8006ca8:	1854      	adds	r4, r2, r1
 8006caa:	42a3      	cmp	r3, r4
 8006cac:	6011      	str	r1, [r2, #0]
 8006cae:	d1e0      	bne.n	8006c72 <_free_r+0x26>
 8006cb0:	681c      	ldr	r4, [r3, #0]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	6053      	str	r3, [r2, #4]
 8006cb6:	4421      	add	r1, r4
 8006cb8:	6011      	str	r1, [r2, #0]
 8006cba:	e7da      	b.n	8006c72 <_free_r+0x26>
 8006cbc:	d902      	bls.n	8006cc4 <_free_r+0x78>
 8006cbe:	230c      	movs	r3, #12
 8006cc0:	6003      	str	r3, [r0, #0]
 8006cc2:	e7d6      	b.n	8006c72 <_free_r+0x26>
 8006cc4:	6825      	ldr	r5, [r4, #0]
 8006cc6:	1961      	adds	r1, r4, r5
 8006cc8:	428b      	cmp	r3, r1
 8006cca:	bf04      	itt	eq
 8006ccc:	6819      	ldreq	r1, [r3, #0]
 8006cce:	685b      	ldreq	r3, [r3, #4]
 8006cd0:	6063      	str	r3, [r4, #4]
 8006cd2:	bf04      	itt	eq
 8006cd4:	1949      	addeq	r1, r1, r5
 8006cd6:	6021      	streq	r1, [r4, #0]
 8006cd8:	6054      	str	r4, [r2, #4]
 8006cda:	e7ca      	b.n	8006c72 <_free_r+0x26>
 8006cdc:	b003      	add	sp, #12
 8006cde:	bd30      	pop	{r4, r5, pc}
 8006ce0:	20000348 	.word	0x20000348

08006ce4 <sbrk_aligned>:
 8006ce4:	b570      	push	{r4, r5, r6, lr}
 8006ce6:	4e0e      	ldr	r6, [pc, #56]	; (8006d20 <sbrk_aligned+0x3c>)
 8006ce8:	460c      	mov	r4, r1
 8006cea:	6831      	ldr	r1, [r6, #0]
 8006cec:	4605      	mov	r5, r0
 8006cee:	b911      	cbnz	r1, 8006cf6 <sbrk_aligned+0x12>
 8006cf0:	f000 f9e8 	bl	80070c4 <_sbrk_r>
 8006cf4:	6030      	str	r0, [r6, #0]
 8006cf6:	4621      	mov	r1, r4
 8006cf8:	4628      	mov	r0, r5
 8006cfa:	f000 f9e3 	bl	80070c4 <_sbrk_r>
 8006cfe:	1c43      	adds	r3, r0, #1
 8006d00:	d00a      	beq.n	8006d18 <sbrk_aligned+0x34>
 8006d02:	1cc4      	adds	r4, r0, #3
 8006d04:	f024 0403 	bic.w	r4, r4, #3
 8006d08:	42a0      	cmp	r0, r4
 8006d0a:	d007      	beq.n	8006d1c <sbrk_aligned+0x38>
 8006d0c:	1a21      	subs	r1, r4, r0
 8006d0e:	4628      	mov	r0, r5
 8006d10:	f000 f9d8 	bl	80070c4 <_sbrk_r>
 8006d14:	3001      	adds	r0, #1
 8006d16:	d101      	bne.n	8006d1c <sbrk_aligned+0x38>
 8006d18:	f04f 34ff 	mov.w	r4, #4294967295
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	bd70      	pop	{r4, r5, r6, pc}
 8006d20:	2000034c 	.word	0x2000034c

08006d24 <_malloc_r>:
 8006d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d28:	1ccd      	adds	r5, r1, #3
 8006d2a:	f025 0503 	bic.w	r5, r5, #3
 8006d2e:	3508      	adds	r5, #8
 8006d30:	2d0c      	cmp	r5, #12
 8006d32:	bf38      	it	cc
 8006d34:	250c      	movcc	r5, #12
 8006d36:	2d00      	cmp	r5, #0
 8006d38:	4607      	mov	r7, r0
 8006d3a:	db01      	blt.n	8006d40 <_malloc_r+0x1c>
 8006d3c:	42a9      	cmp	r1, r5
 8006d3e:	d905      	bls.n	8006d4c <_malloc_r+0x28>
 8006d40:	230c      	movs	r3, #12
 8006d42:	603b      	str	r3, [r7, #0]
 8006d44:	2600      	movs	r6, #0
 8006d46:	4630      	mov	r0, r6
 8006d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d4c:	4e2e      	ldr	r6, [pc, #184]	; (8006e08 <_malloc_r+0xe4>)
 8006d4e:	f000 fa25 	bl	800719c <__malloc_lock>
 8006d52:	6833      	ldr	r3, [r6, #0]
 8006d54:	461c      	mov	r4, r3
 8006d56:	bb34      	cbnz	r4, 8006da6 <_malloc_r+0x82>
 8006d58:	4629      	mov	r1, r5
 8006d5a:	4638      	mov	r0, r7
 8006d5c:	f7ff ffc2 	bl	8006ce4 <sbrk_aligned>
 8006d60:	1c43      	adds	r3, r0, #1
 8006d62:	4604      	mov	r4, r0
 8006d64:	d14d      	bne.n	8006e02 <_malloc_r+0xde>
 8006d66:	6834      	ldr	r4, [r6, #0]
 8006d68:	4626      	mov	r6, r4
 8006d6a:	2e00      	cmp	r6, #0
 8006d6c:	d140      	bne.n	8006df0 <_malloc_r+0xcc>
 8006d6e:	6823      	ldr	r3, [r4, #0]
 8006d70:	4631      	mov	r1, r6
 8006d72:	4638      	mov	r0, r7
 8006d74:	eb04 0803 	add.w	r8, r4, r3
 8006d78:	f000 f9a4 	bl	80070c4 <_sbrk_r>
 8006d7c:	4580      	cmp	r8, r0
 8006d7e:	d13a      	bne.n	8006df6 <_malloc_r+0xd2>
 8006d80:	6821      	ldr	r1, [r4, #0]
 8006d82:	3503      	adds	r5, #3
 8006d84:	1a6d      	subs	r5, r5, r1
 8006d86:	f025 0503 	bic.w	r5, r5, #3
 8006d8a:	3508      	adds	r5, #8
 8006d8c:	2d0c      	cmp	r5, #12
 8006d8e:	bf38      	it	cc
 8006d90:	250c      	movcc	r5, #12
 8006d92:	4629      	mov	r1, r5
 8006d94:	4638      	mov	r0, r7
 8006d96:	f7ff ffa5 	bl	8006ce4 <sbrk_aligned>
 8006d9a:	3001      	adds	r0, #1
 8006d9c:	d02b      	beq.n	8006df6 <_malloc_r+0xd2>
 8006d9e:	6823      	ldr	r3, [r4, #0]
 8006da0:	442b      	add	r3, r5
 8006da2:	6023      	str	r3, [r4, #0]
 8006da4:	e00e      	b.n	8006dc4 <_malloc_r+0xa0>
 8006da6:	6822      	ldr	r2, [r4, #0]
 8006da8:	1b52      	subs	r2, r2, r5
 8006daa:	d41e      	bmi.n	8006dea <_malloc_r+0xc6>
 8006dac:	2a0b      	cmp	r2, #11
 8006dae:	d916      	bls.n	8006dde <_malloc_r+0xba>
 8006db0:	1961      	adds	r1, r4, r5
 8006db2:	42a3      	cmp	r3, r4
 8006db4:	6025      	str	r5, [r4, #0]
 8006db6:	bf18      	it	ne
 8006db8:	6059      	strne	r1, [r3, #4]
 8006dba:	6863      	ldr	r3, [r4, #4]
 8006dbc:	bf08      	it	eq
 8006dbe:	6031      	streq	r1, [r6, #0]
 8006dc0:	5162      	str	r2, [r4, r5]
 8006dc2:	604b      	str	r3, [r1, #4]
 8006dc4:	4638      	mov	r0, r7
 8006dc6:	f104 060b 	add.w	r6, r4, #11
 8006dca:	f000 f9ed 	bl	80071a8 <__malloc_unlock>
 8006dce:	f026 0607 	bic.w	r6, r6, #7
 8006dd2:	1d23      	adds	r3, r4, #4
 8006dd4:	1af2      	subs	r2, r6, r3
 8006dd6:	d0b6      	beq.n	8006d46 <_malloc_r+0x22>
 8006dd8:	1b9b      	subs	r3, r3, r6
 8006dda:	50a3      	str	r3, [r4, r2]
 8006ddc:	e7b3      	b.n	8006d46 <_malloc_r+0x22>
 8006dde:	6862      	ldr	r2, [r4, #4]
 8006de0:	42a3      	cmp	r3, r4
 8006de2:	bf0c      	ite	eq
 8006de4:	6032      	streq	r2, [r6, #0]
 8006de6:	605a      	strne	r2, [r3, #4]
 8006de8:	e7ec      	b.n	8006dc4 <_malloc_r+0xa0>
 8006dea:	4623      	mov	r3, r4
 8006dec:	6864      	ldr	r4, [r4, #4]
 8006dee:	e7b2      	b.n	8006d56 <_malloc_r+0x32>
 8006df0:	4634      	mov	r4, r6
 8006df2:	6876      	ldr	r6, [r6, #4]
 8006df4:	e7b9      	b.n	8006d6a <_malloc_r+0x46>
 8006df6:	230c      	movs	r3, #12
 8006df8:	603b      	str	r3, [r7, #0]
 8006dfa:	4638      	mov	r0, r7
 8006dfc:	f000 f9d4 	bl	80071a8 <__malloc_unlock>
 8006e00:	e7a1      	b.n	8006d46 <_malloc_r+0x22>
 8006e02:	6025      	str	r5, [r4, #0]
 8006e04:	e7de      	b.n	8006dc4 <_malloc_r+0xa0>
 8006e06:	bf00      	nop
 8006e08:	20000348 	.word	0x20000348

08006e0c <__ssputs_r>:
 8006e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e10:	688e      	ldr	r6, [r1, #8]
 8006e12:	429e      	cmp	r6, r3
 8006e14:	4682      	mov	sl, r0
 8006e16:	460c      	mov	r4, r1
 8006e18:	4690      	mov	r8, r2
 8006e1a:	461f      	mov	r7, r3
 8006e1c:	d838      	bhi.n	8006e90 <__ssputs_r+0x84>
 8006e1e:	898a      	ldrh	r2, [r1, #12]
 8006e20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006e24:	d032      	beq.n	8006e8c <__ssputs_r+0x80>
 8006e26:	6825      	ldr	r5, [r4, #0]
 8006e28:	6909      	ldr	r1, [r1, #16]
 8006e2a:	eba5 0901 	sub.w	r9, r5, r1
 8006e2e:	6965      	ldr	r5, [r4, #20]
 8006e30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e38:	3301      	adds	r3, #1
 8006e3a:	444b      	add	r3, r9
 8006e3c:	106d      	asrs	r5, r5, #1
 8006e3e:	429d      	cmp	r5, r3
 8006e40:	bf38      	it	cc
 8006e42:	461d      	movcc	r5, r3
 8006e44:	0553      	lsls	r3, r2, #21
 8006e46:	d531      	bpl.n	8006eac <__ssputs_r+0xa0>
 8006e48:	4629      	mov	r1, r5
 8006e4a:	f7ff ff6b 	bl	8006d24 <_malloc_r>
 8006e4e:	4606      	mov	r6, r0
 8006e50:	b950      	cbnz	r0, 8006e68 <__ssputs_r+0x5c>
 8006e52:	230c      	movs	r3, #12
 8006e54:	f8ca 3000 	str.w	r3, [sl]
 8006e58:	89a3      	ldrh	r3, [r4, #12]
 8006e5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e5e:	81a3      	strh	r3, [r4, #12]
 8006e60:	f04f 30ff 	mov.w	r0, #4294967295
 8006e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e68:	6921      	ldr	r1, [r4, #16]
 8006e6a:	464a      	mov	r2, r9
 8006e6c:	f7ff fb46 	bl	80064fc <memcpy>
 8006e70:	89a3      	ldrh	r3, [r4, #12]
 8006e72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e7a:	81a3      	strh	r3, [r4, #12]
 8006e7c:	6126      	str	r6, [r4, #16]
 8006e7e:	6165      	str	r5, [r4, #20]
 8006e80:	444e      	add	r6, r9
 8006e82:	eba5 0509 	sub.w	r5, r5, r9
 8006e86:	6026      	str	r6, [r4, #0]
 8006e88:	60a5      	str	r5, [r4, #8]
 8006e8a:	463e      	mov	r6, r7
 8006e8c:	42be      	cmp	r6, r7
 8006e8e:	d900      	bls.n	8006e92 <__ssputs_r+0x86>
 8006e90:	463e      	mov	r6, r7
 8006e92:	6820      	ldr	r0, [r4, #0]
 8006e94:	4632      	mov	r2, r6
 8006e96:	4641      	mov	r1, r8
 8006e98:	f000 f966 	bl	8007168 <memmove>
 8006e9c:	68a3      	ldr	r3, [r4, #8]
 8006e9e:	1b9b      	subs	r3, r3, r6
 8006ea0:	60a3      	str	r3, [r4, #8]
 8006ea2:	6823      	ldr	r3, [r4, #0]
 8006ea4:	4433      	add	r3, r6
 8006ea6:	6023      	str	r3, [r4, #0]
 8006ea8:	2000      	movs	r0, #0
 8006eaa:	e7db      	b.n	8006e64 <__ssputs_r+0x58>
 8006eac:	462a      	mov	r2, r5
 8006eae:	f000 f981 	bl	80071b4 <_realloc_r>
 8006eb2:	4606      	mov	r6, r0
 8006eb4:	2800      	cmp	r0, #0
 8006eb6:	d1e1      	bne.n	8006e7c <__ssputs_r+0x70>
 8006eb8:	6921      	ldr	r1, [r4, #16]
 8006eba:	4650      	mov	r0, sl
 8006ebc:	f7ff fec6 	bl	8006c4c <_free_r>
 8006ec0:	e7c7      	b.n	8006e52 <__ssputs_r+0x46>
	...

08006ec4 <_svfiprintf_r>:
 8006ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec8:	4698      	mov	r8, r3
 8006eca:	898b      	ldrh	r3, [r1, #12]
 8006ecc:	061b      	lsls	r3, r3, #24
 8006ece:	b09d      	sub	sp, #116	; 0x74
 8006ed0:	4607      	mov	r7, r0
 8006ed2:	460d      	mov	r5, r1
 8006ed4:	4614      	mov	r4, r2
 8006ed6:	d50e      	bpl.n	8006ef6 <_svfiprintf_r+0x32>
 8006ed8:	690b      	ldr	r3, [r1, #16]
 8006eda:	b963      	cbnz	r3, 8006ef6 <_svfiprintf_r+0x32>
 8006edc:	2140      	movs	r1, #64	; 0x40
 8006ede:	f7ff ff21 	bl	8006d24 <_malloc_r>
 8006ee2:	6028      	str	r0, [r5, #0]
 8006ee4:	6128      	str	r0, [r5, #16]
 8006ee6:	b920      	cbnz	r0, 8006ef2 <_svfiprintf_r+0x2e>
 8006ee8:	230c      	movs	r3, #12
 8006eea:	603b      	str	r3, [r7, #0]
 8006eec:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef0:	e0d1      	b.n	8007096 <_svfiprintf_r+0x1d2>
 8006ef2:	2340      	movs	r3, #64	; 0x40
 8006ef4:	616b      	str	r3, [r5, #20]
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	9309      	str	r3, [sp, #36]	; 0x24
 8006efa:	2320      	movs	r3, #32
 8006efc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f00:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f04:	2330      	movs	r3, #48	; 0x30
 8006f06:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80070b0 <_svfiprintf_r+0x1ec>
 8006f0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f0e:	f04f 0901 	mov.w	r9, #1
 8006f12:	4623      	mov	r3, r4
 8006f14:	469a      	mov	sl, r3
 8006f16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f1a:	b10a      	cbz	r2, 8006f20 <_svfiprintf_r+0x5c>
 8006f1c:	2a25      	cmp	r2, #37	; 0x25
 8006f1e:	d1f9      	bne.n	8006f14 <_svfiprintf_r+0x50>
 8006f20:	ebba 0b04 	subs.w	fp, sl, r4
 8006f24:	d00b      	beq.n	8006f3e <_svfiprintf_r+0x7a>
 8006f26:	465b      	mov	r3, fp
 8006f28:	4622      	mov	r2, r4
 8006f2a:	4629      	mov	r1, r5
 8006f2c:	4638      	mov	r0, r7
 8006f2e:	f7ff ff6d 	bl	8006e0c <__ssputs_r>
 8006f32:	3001      	adds	r0, #1
 8006f34:	f000 80aa 	beq.w	800708c <_svfiprintf_r+0x1c8>
 8006f38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f3a:	445a      	add	r2, fp
 8006f3c:	9209      	str	r2, [sp, #36]	; 0x24
 8006f3e:	f89a 3000 	ldrb.w	r3, [sl]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	f000 80a2 	beq.w	800708c <_svfiprintf_r+0x1c8>
 8006f48:	2300      	movs	r3, #0
 8006f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f52:	f10a 0a01 	add.w	sl, sl, #1
 8006f56:	9304      	str	r3, [sp, #16]
 8006f58:	9307      	str	r3, [sp, #28]
 8006f5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f5e:	931a      	str	r3, [sp, #104]	; 0x68
 8006f60:	4654      	mov	r4, sl
 8006f62:	2205      	movs	r2, #5
 8006f64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f68:	4851      	ldr	r0, [pc, #324]	; (80070b0 <_svfiprintf_r+0x1ec>)
 8006f6a:	f7f9 f941 	bl	80001f0 <memchr>
 8006f6e:	9a04      	ldr	r2, [sp, #16]
 8006f70:	b9d8      	cbnz	r0, 8006faa <_svfiprintf_r+0xe6>
 8006f72:	06d0      	lsls	r0, r2, #27
 8006f74:	bf44      	itt	mi
 8006f76:	2320      	movmi	r3, #32
 8006f78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f7c:	0711      	lsls	r1, r2, #28
 8006f7e:	bf44      	itt	mi
 8006f80:	232b      	movmi	r3, #43	; 0x2b
 8006f82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f86:	f89a 3000 	ldrb.w	r3, [sl]
 8006f8a:	2b2a      	cmp	r3, #42	; 0x2a
 8006f8c:	d015      	beq.n	8006fba <_svfiprintf_r+0xf6>
 8006f8e:	9a07      	ldr	r2, [sp, #28]
 8006f90:	4654      	mov	r4, sl
 8006f92:	2000      	movs	r0, #0
 8006f94:	f04f 0c0a 	mov.w	ip, #10
 8006f98:	4621      	mov	r1, r4
 8006f9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f9e:	3b30      	subs	r3, #48	; 0x30
 8006fa0:	2b09      	cmp	r3, #9
 8006fa2:	d94e      	bls.n	8007042 <_svfiprintf_r+0x17e>
 8006fa4:	b1b0      	cbz	r0, 8006fd4 <_svfiprintf_r+0x110>
 8006fa6:	9207      	str	r2, [sp, #28]
 8006fa8:	e014      	b.n	8006fd4 <_svfiprintf_r+0x110>
 8006faa:	eba0 0308 	sub.w	r3, r0, r8
 8006fae:	fa09 f303 	lsl.w	r3, r9, r3
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	9304      	str	r3, [sp, #16]
 8006fb6:	46a2      	mov	sl, r4
 8006fb8:	e7d2      	b.n	8006f60 <_svfiprintf_r+0x9c>
 8006fba:	9b03      	ldr	r3, [sp, #12]
 8006fbc:	1d19      	adds	r1, r3, #4
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	9103      	str	r1, [sp, #12]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	bfbb      	ittet	lt
 8006fc6:	425b      	neglt	r3, r3
 8006fc8:	f042 0202 	orrlt.w	r2, r2, #2
 8006fcc:	9307      	strge	r3, [sp, #28]
 8006fce:	9307      	strlt	r3, [sp, #28]
 8006fd0:	bfb8      	it	lt
 8006fd2:	9204      	strlt	r2, [sp, #16]
 8006fd4:	7823      	ldrb	r3, [r4, #0]
 8006fd6:	2b2e      	cmp	r3, #46	; 0x2e
 8006fd8:	d10c      	bne.n	8006ff4 <_svfiprintf_r+0x130>
 8006fda:	7863      	ldrb	r3, [r4, #1]
 8006fdc:	2b2a      	cmp	r3, #42	; 0x2a
 8006fde:	d135      	bne.n	800704c <_svfiprintf_r+0x188>
 8006fe0:	9b03      	ldr	r3, [sp, #12]
 8006fe2:	1d1a      	adds	r2, r3, #4
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	9203      	str	r2, [sp, #12]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	bfb8      	it	lt
 8006fec:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ff0:	3402      	adds	r4, #2
 8006ff2:	9305      	str	r3, [sp, #20]
 8006ff4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80070c0 <_svfiprintf_r+0x1fc>
 8006ff8:	7821      	ldrb	r1, [r4, #0]
 8006ffa:	2203      	movs	r2, #3
 8006ffc:	4650      	mov	r0, sl
 8006ffe:	f7f9 f8f7 	bl	80001f0 <memchr>
 8007002:	b140      	cbz	r0, 8007016 <_svfiprintf_r+0x152>
 8007004:	2340      	movs	r3, #64	; 0x40
 8007006:	eba0 000a 	sub.w	r0, r0, sl
 800700a:	fa03 f000 	lsl.w	r0, r3, r0
 800700e:	9b04      	ldr	r3, [sp, #16]
 8007010:	4303      	orrs	r3, r0
 8007012:	3401      	adds	r4, #1
 8007014:	9304      	str	r3, [sp, #16]
 8007016:	f814 1b01 	ldrb.w	r1, [r4], #1
 800701a:	4826      	ldr	r0, [pc, #152]	; (80070b4 <_svfiprintf_r+0x1f0>)
 800701c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007020:	2206      	movs	r2, #6
 8007022:	f7f9 f8e5 	bl	80001f0 <memchr>
 8007026:	2800      	cmp	r0, #0
 8007028:	d038      	beq.n	800709c <_svfiprintf_r+0x1d8>
 800702a:	4b23      	ldr	r3, [pc, #140]	; (80070b8 <_svfiprintf_r+0x1f4>)
 800702c:	bb1b      	cbnz	r3, 8007076 <_svfiprintf_r+0x1b2>
 800702e:	9b03      	ldr	r3, [sp, #12]
 8007030:	3307      	adds	r3, #7
 8007032:	f023 0307 	bic.w	r3, r3, #7
 8007036:	3308      	adds	r3, #8
 8007038:	9303      	str	r3, [sp, #12]
 800703a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800703c:	4433      	add	r3, r6
 800703e:	9309      	str	r3, [sp, #36]	; 0x24
 8007040:	e767      	b.n	8006f12 <_svfiprintf_r+0x4e>
 8007042:	fb0c 3202 	mla	r2, ip, r2, r3
 8007046:	460c      	mov	r4, r1
 8007048:	2001      	movs	r0, #1
 800704a:	e7a5      	b.n	8006f98 <_svfiprintf_r+0xd4>
 800704c:	2300      	movs	r3, #0
 800704e:	3401      	adds	r4, #1
 8007050:	9305      	str	r3, [sp, #20]
 8007052:	4619      	mov	r1, r3
 8007054:	f04f 0c0a 	mov.w	ip, #10
 8007058:	4620      	mov	r0, r4
 800705a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800705e:	3a30      	subs	r2, #48	; 0x30
 8007060:	2a09      	cmp	r2, #9
 8007062:	d903      	bls.n	800706c <_svfiprintf_r+0x1a8>
 8007064:	2b00      	cmp	r3, #0
 8007066:	d0c5      	beq.n	8006ff4 <_svfiprintf_r+0x130>
 8007068:	9105      	str	r1, [sp, #20]
 800706a:	e7c3      	b.n	8006ff4 <_svfiprintf_r+0x130>
 800706c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007070:	4604      	mov	r4, r0
 8007072:	2301      	movs	r3, #1
 8007074:	e7f0      	b.n	8007058 <_svfiprintf_r+0x194>
 8007076:	ab03      	add	r3, sp, #12
 8007078:	9300      	str	r3, [sp, #0]
 800707a:	462a      	mov	r2, r5
 800707c:	4b0f      	ldr	r3, [pc, #60]	; (80070bc <_svfiprintf_r+0x1f8>)
 800707e:	a904      	add	r1, sp, #16
 8007080:	4638      	mov	r0, r7
 8007082:	f7fd ffc9 	bl	8005018 <_printf_float>
 8007086:	1c42      	adds	r2, r0, #1
 8007088:	4606      	mov	r6, r0
 800708a:	d1d6      	bne.n	800703a <_svfiprintf_r+0x176>
 800708c:	89ab      	ldrh	r3, [r5, #12]
 800708e:	065b      	lsls	r3, r3, #25
 8007090:	f53f af2c 	bmi.w	8006eec <_svfiprintf_r+0x28>
 8007094:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007096:	b01d      	add	sp, #116	; 0x74
 8007098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800709c:	ab03      	add	r3, sp, #12
 800709e:	9300      	str	r3, [sp, #0]
 80070a0:	462a      	mov	r2, r5
 80070a2:	4b06      	ldr	r3, [pc, #24]	; (80070bc <_svfiprintf_r+0x1f8>)
 80070a4:	a904      	add	r1, sp, #16
 80070a6:	4638      	mov	r0, r7
 80070a8:	f7fe fa5a 	bl	8005560 <_printf_i>
 80070ac:	e7eb      	b.n	8007086 <_svfiprintf_r+0x1c2>
 80070ae:	bf00      	nop
 80070b0:	08007f24 	.word	0x08007f24
 80070b4:	08007f2e 	.word	0x08007f2e
 80070b8:	08005019 	.word	0x08005019
 80070bc:	08006e0d 	.word	0x08006e0d
 80070c0:	08007f2a 	.word	0x08007f2a

080070c4 <_sbrk_r>:
 80070c4:	b538      	push	{r3, r4, r5, lr}
 80070c6:	4d06      	ldr	r5, [pc, #24]	; (80070e0 <_sbrk_r+0x1c>)
 80070c8:	2300      	movs	r3, #0
 80070ca:	4604      	mov	r4, r0
 80070cc:	4608      	mov	r0, r1
 80070ce:	602b      	str	r3, [r5, #0]
 80070d0:	f7fa fe58 	bl	8001d84 <_sbrk>
 80070d4:	1c43      	adds	r3, r0, #1
 80070d6:	d102      	bne.n	80070de <_sbrk_r+0x1a>
 80070d8:	682b      	ldr	r3, [r5, #0]
 80070da:	b103      	cbz	r3, 80070de <_sbrk_r+0x1a>
 80070dc:	6023      	str	r3, [r4, #0]
 80070de:	bd38      	pop	{r3, r4, r5, pc}
 80070e0:	20000350 	.word	0x20000350

080070e4 <__assert_func>:
 80070e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80070e6:	4614      	mov	r4, r2
 80070e8:	461a      	mov	r2, r3
 80070ea:	4b09      	ldr	r3, [pc, #36]	; (8007110 <__assert_func+0x2c>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4605      	mov	r5, r0
 80070f0:	68d8      	ldr	r0, [r3, #12]
 80070f2:	b14c      	cbz	r4, 8007108 <__assert_func+0x24>
 80070f4:	4b07      	ldr	r3, [pc, #28]	; (8007114 <__assert_func+0x30>)
 80070f6:	9100      	str	r1, [sp, #0]
 80070f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80070fc:	4906      	ldr	r1, [pc, #24]	; (8007118 <__assert_func+0x34>)
 80070fe:	462b      	mov	r3, r5
 8007100:	f000 f80e 	bl	8007120 <fiprintf>
 8007104:	f000 faac 	bl	8007660 <abort>
 8007108:	4b04      	ldr	r3, [pc, #16]	; (800711c <__assert_func+0x38>)
 800710a:	461c      	mov	r4, r3
 800710c:	e7f3      	b.n	80070f6 <__assert_func+0x12>
 800710e:	bf00      	nop
 8007110:	20000010 	.word	0x20000010
 8007114:	08007f35 	.word	0x08007f35
 8007118:	08007f42 	.word	0x08007f42
 800711c:	08007f70 	.word	0x08007f70

08007120 <fiprintf>:
 8007120:	b40e      	push	{r1, r2, r3}
 8007122:	b503      	push	{r0, r1, lr}
 8007124:	4601      	mov	r1, r0
 8007126:	ab03      	add	r3, sp, #12
 8007128:	4805      	ldr	r0, [pc, #20]	; (8007140 <fiprintf+0x20>)
 800712a:	f853 2b04 	ldr.w	r2, [r3], #4
 800712e:	6800      	ldr	r0, [r0, #0]
 8007130:	9301      	str	r3, [sp, #4]
 8007132:	f000 f897 	bl	8007264 <_vfiprintf_r>
 8007136:	b002      	add	sp, #8
 8007138:	f85d eb04 	ldr.w	lr, [sp], #4
 800713c:	b003      	add	sp, #12
 800713e:	4770      	bx	lr
 8007140:	20000010 	.word	0x20000010

08007144 <__ascii_mbtowc>:
 8007144:	b082      	sub	sp, #8
 8007146:	b901      	cbnz	r1, 800714a <__ascii_mbtowc+0x6>
 8007148:	a901      	add	r1, sp, #4
 800714a:	b142      	cbz	r2, 800715e <__ascii_mbtowc+0x1a>
 800714c:	b14b      	cbz	r3, 8007162 <__ascii_mbtowc+0x1e>
 800714e:	7813      	ldrb	r3, [r2, #0]
 8007150:	600b      	str	r3, [r1, #0]
 8007152:	7812      	ldrb	r2, [r2, #0]
 8007154:	1e10      	subs	r0, r2, #0
 8007156:	bf18      	it	ne
 8007158:	2001      	movne	r0, #1
 800715a:	b002      	add	sp, #8
 800715c:	4770      	bx	lr
 800715e:	4610      	mov	r0, r2
 8007160:	e7fb      	b.n	800715a <__ascii_mbtowc+0x16>
 8007162:	f06f 0001 	mvn.w	r0, #1
 8007166:	e7f8      	b.n	800715a <__ascii_mbtowc+0x16>

08007168 <memmove>:
 8007168:	4288      	cmp	r0, r1
 800716a:	b510      	push	{r4, lr}
 800716c:	eb01 0402 	add.w	r4, r1, r2
 8007170:	d902      	bls.n	8007178 <memmove+0x10>
 8007172:	4284      	cmp	r4, r0
 8007174:	4623      	mov	r3, r4
 8007176:	d807      	bhi.n	8007188 <memmove+0x20>
 8007178:	1e43      	subs	r3, r0, #1
 800717a:	42a1      	cmp	r1, r4
 800717c:	d008      	beq.n	8007190 <memmove+0x28>
 800717e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007182:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007186:	e7f8      	b.n	800717a <memmove+0x12>
 8007188:	4402      	add	r2, r0
 800718a:	4601      	mov	r1, r0
 800718c:	428a      	cmp	r2, r1
 800718e:	d100      	bne.n	8007192 <memmove+0x2a>
 8007190:	bd10      	pop	{r4, pc}
 8007192:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007196:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800719a:	e7f7      	b.n	800718c <memmove+0x24>

0800719c <__malloc_lock>:
 800719c:	4801      	ldr	r0, [pc, #4]	; (80071a4 <__malloc_lock+0x8>)
 800719e:	f000 bc1f 	b.w	80079e0 <__retarget_lock_acquire_recursive>
 80071a2:	bf00      	nop
 80071a4:	20000354 	.word	0x20000354

080071a8 <__malloc_unlock>:
 80071a8:	4801      	ldr	r0, [pc, #4]	; (80071b0 <__malloc_unlock+0x8>)
 80071aa:	f000 bc1a 	b.w	80079e2 <__retarget_lock_release_recursive>
 80071ae:	bf00      	nop
 80071b0:	20000354 	.word	0x20000354

080071b4 <_realloc_r>:
 80071b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071b8:	4680      	mov	r8, r0
 80071ba:	4614      	mov	r4, r2
 80071bc:	460e      	mov	r6, r1
 80071be:	b921      	cbnz	r1, 80071ca <_realloc_r+0x16>
 80071c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071c4:	4611      	mov	r1, r2
 80071c6:	f7ff bdad 	b.w	8006d24 <_malloc_r>
 80071ca:	b92a      	cbnz	r2, 80071d8 <_realloc_r+0x24>
 80071cc:	f7ff fd3e 	bl	8006c4c <_free_r>
 80071d0:	4625      	mov	r5, r4
 80071d2:	4628      	mov	r0, r5
 80071d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071d8:	f000 fc6a 	bl	8007ab0 <_malloc_usable_size_r>
 80071dc:	4284      	cmp	r4, r0
 80071de:	4607      	mov	r7, r0
 80071e0:	d802      	bhi.n	80071e8 <_realloc_r+0x34>
 80071e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80071e6:	d812      	bhi.n	800720e <_realloc_r+0x5a>
 80071e8:	4621      	mov	r1, r4
 80071ea:	4640      	mov	r0, r8
 80071ec:	f7ff fd9a 	bl	8006d24 <_malloc_r>
 80071f0:	4605      	mov	r5, r0
 80071f2:	2800      	cmp	r0, #0
 80071f4:	d0ed      	beq.n	80071d2 <_realloc_r+0x1e>
 80071f6:	42bc      	cmp	r4, r7
 80071f8:	4622      	mov	r2, r4
 80071fa:	4631      	mov	r1, r6
 80071fc:	bf28      	it	cs
 80071fe:	463a      	movcs	r2, r7
 8007200:	f7ff f97c 	bl	80064fc <memcpy>
 8007204:	4631      	mov	r1, r6
 8007206:	4640      	mov	r0, r8
 8007208:	f7ff fd20 	bl	8006c4c <_free_r>
 800720c:	e7e1      	b.n	80071d2 <_realloc_r+0x1e>
 800720e:	4635      	mov	r5, r6
 8007210:	e7df      	b.n	80071d2 <_realloc_r+0x1e>

08007212 <__sfputc_r>:
 8007212:	6893      	ldr	r3, [r2, #8]
 8007214:	3b01      	subs	r3, #1
 8007216:	2b00      	cmp	r3, #0
 8007218:	b410      	push	{r4}
 800721a:	6093      	str	r3, [r2, #8]
 800721c:	da08      	bge.n	8007230 <__sfputc_r+0x1e>
 800721e:	6994      	ldr	r4, [r2, #24]
 8007220:	42a3      	cmp	r3, r4
 8007222:	db01      	blt.n	8007228 <__sfputc_r+0x16>
 8007224:	290a      	cmp	r1, #10
 8007226:	d103      	bne.n	8007230 <__sfputc_r+0x1e>
 8007228:	f85d 4b04 	ldr.w	r4, [sp], #4
 800722c:	f000 b94a 	b.w	80074c4 <__swbuf_r>
 8007230:	6813      	ldr	r3, [r2, #0]
 8007232:	1c58      	adds	r0, r3, #1
 8007234:	6010      	str	r0, [r2, #0]
 8007236:	7019      	strb	r1, [r3, #0]
 8007238:	4608      	mov	r0, r1
 800723a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800723e:	4770      	bx	lr

08007240 <__sfputs_r>:
 8007240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007242:	4606      	mov	r6, r0
 8007244:	460f      	mov	r7, r1
 8007246:	4614      	mov	r4, r2
 8007248:	18d5      	adds	r5, r2, r3
 800724a:	42ac      	cmp	r4, r5
 800724c:	d101      	bne.n	8007252 <__sfputs_r+0x12>
 800724e:	2000      	movs	r0, #0
 8007250:	e007      	b.n	8007262 <__sfputs_r+0x22>
 8007252:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007256:	463a      	mov	r2, r7
 8007258:	4630      	mov	r0, r6
 800725a:	f7ff ffda 	bl	8007212 <__sfputc_r>
 800725e:	1c43      	adds	r3, r0, #1
 8007260:	d1f3      	bne.n	800724a <__sfputs_r+0xa>
 8007262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007264 <_vfiprintf_r>:
 8007264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007268:	460d      	mov	r5, r1
 800726a:	b09d      	sub	sp, #116	; 0x74
 800726c:	4614      	mov	r4, r2
 800726e:	4698      	mov	r8, r3
 8007270:	4606      	mov	r6, r0
 8007272:	b118      	cbz	r0, 800727c <_vfiprintf_r+0x18>
 8007274:	6983      	ldr	r3, [r0, #24]
 8007276:	b90b      	cbnz	r3, 800727c <_vfiprintf_r+0x18>
 8007278:	f000 fb14 	bl	80078a4 <__sinit>
 800727c:	4b89      	ldr	r3, [pc, #548]	; (80074a4 <_vfiprintf_r+0x240>)
 800727e:	429d      	cmp	r5, r3
 8007280:	d11b      	bne.n	80072ba <_vfiprintf_r+0x56>
 8007282:	6875      	ldr	r5, [r6, #4]
 8007284:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007286:	07d9      	lsls	r1, r3, #31
 8007288:	d405      	bmi.n	8007296 <_vfiprintf_r+0x32>
 800728a:	89ab      	ldrh	r3, [r5, #12]
 800728c:	059a      	lsls	r2, r3, #22
 800728e:	d402      	bmi.n	8007296 <_vfiprintf_r+0x32>
 8007290:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007292:	f000 fba5 	bl	80079e0 <__retarget_lock_acquire_recursive>
 8007296:	89ab      	ldrh	r3, [r5, #12]
 8007298:	071b      	lsls	r3, r3, #28
 800729a:	d501      	bpl.n	80072a0 <_vfiprintf_r+0x3c>
 800729c:	692b      	ldr	r3, [r5, #16]
 800729e:	b9eb      	cbnz	r3, 80072dc <_vfiprintf_r+0x78>
 80072a0:	4629      	mov	r1, r5
 80072a2:	4630      	mov	r0, r6
 80072a4:	f000 f96e 	bl	8007584 <__swsetup_r>
 80072a8:	b1c0      	cbz	r0, 80072dc <_vfiprintf_r+0x78>
 80072aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072ac:	07dc      	lsls	r4, r3, #31
 80072ae:	d50e      	bpl.n	80072ce <_vfiprintf_r+0x6a>
 80072b0:	f04f 30ff 	mov.w	r0, #4294967295
 80072b4:	b01d      	add	sp, #116	; 0x74
 80072b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ba:	4b7b      	ldr	r3, [pc, #492]	; (80074a8 <_vfiprintf_r+0x244>)
 80072bc:	429d      	cmp	r5, r3
 80072be:	d101      	bne.n	80072c4 <_vfiprintf_r+0x60>
 80072c0:	68b5      	ldr	r5, [r6, #8]
 80072c2:	e7df      	b.n	8007284 <_vfiprintf_r+0x20>
 80072c4:	4b79      	ldr	r3, [pc, #484]	; (80074ac <_vfiprintf_r+0x248>)
 80072c6:	429d      	cmp	r5, r3
 80072c8:	bf08      	it	eq
 80072ca:	68f5      	ldreq	r5, [r6, #12]
 80072cc:	e7da      	b.n	8007284 <_vfiprintf_r+0x20>
 80072ce:	89ab      	ldrh	r3, [r5, #12]
 80072d0:	0598      	lsls	r0, r3, #22
 80072d2:	d4ed      	bmi.n	80072b0 <_vfiprintf_r+0x4c>
 80072d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072d6:	f000 fb84 	bl	80079e2 <__retarget_lock_release_recursive>
 80072da:	e7e9      	b.n	80072b0 <_vfiprintf_r+0x4c>
 80072dc:	2300      	movs	r3, #0
 80072de:	9309      	str	r3, [sp, #36]	; 0x24
 80072e0:	2320      	movs	r3, #32
 80072e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80072ea:	2330      	movs	r3, #48	; 0x30
 80072ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80074b0 <_vfiprintf_r+0x24c>
 80072f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072f4:	f04f 0901 	mov.w	r9, #1
 80072f8:	4623      	mov	r3, r4
 80072fa:	469a      	mov	sl, r3
 80072fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007300:	b10a      	cbz	r2, 8007306 <_vfiprintf_r+0xa2>
 8007302:	2a25      	cmp	r2, #37	; 0x25
 8007304:	d1f9      	bne.n	80072fa <_vfiprintf_r+0x96>
 8007306:	ebba 0b04 	subs.w	fp, sl, r4
 800730a:	d00b      	beq.n	8007324 <_vfiprintf_r+0xc0>
 800730c:	465b      	mov	r3, fp
 800730e:	4622      	mov	r2, r4
 8007310:	4629      	mov	r1, r5
 8007312:	4630      	mov	r0, r6
 8007314:	f7ff ff94 	bl	8007240 <__sfputs_r>
 8007318:	3001      	adds	r0, #1
 800731a:	f000 80aa 	beq.w	8007472 <_vfiprintf_r+0x20e>
 800731e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007320:	445a      	add	r2, fp
 8007322:	9209      	str	r2, [sp, #36]	; 0x24
 8007324:	f89a 3000 	ldrb.w	r3, [sl]
 8007328:	2b00      	cmp	r3, #0
 800732a:	f000 80a2 	beq.w	8007472 <_vfiprintf_r+0x20e>
 800732e:	2300      	movs	r3, #0
 8007330:	f04f 32ff 	mov.w	r2, #4294967295
 8007334:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007338:	f10a 0a01 	add.w	sl, sl, #1
 800733c:	9304      	str	r3, [sp, #16]
 800733e:	9307      	str	r3, [sp, #28]
 8007340:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007344:	931a      	str	r3, [sp, #104]	; 0x68
 8007346:	4654      	mov	r4, sl
 8007348:	2205      	movs	r2, #5
 800734a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800734e:	4858      	ldr	r0, [pc, #352]	; (80074b0 <_vfiprintf_r+0x24c>)
 8007350:	f7f8 ff4e 	bl	80001f0 <memchr>
 8007354:	9a04      	ldr	r2, [sp, #16]
 8007356:	b9d8      	cbnz	r0, 8007390 <_vfiprintf_r+0x12c>
 8007358:	06d1      	lsls	r1, r2, #27
 800735a:	bf44      	itt	mi
 800735c:	2320      	movmi	r3, #32
 800735e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007362:	0713      	lsls	r3, r2, #28
 8007364:	bf44      	itt	mi
 8007366:	232b      	movmi	r3, #43	; 0x2b
 8007368:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800736c:	f89a 3000 	ldrb.w	r3, [sl]
 8007370:	2b2a      	cmp	r3, #42	; 0x2a
 8007372:	d015      	beq.n	80073a0 <_vfiprintf_r+0x13c>
 8007374:	9a07      	ldr	r2, [sp, #28]
 8007376:	4654      	mov	r4, sl
 8007378:	2000      	movs	r0, #0
 800737a:	f04f 0c0a 	mov.w	ip, #10
 800737e:	4621      	mov	r1, r4
 8007380:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007384:	3b30      	subs	r3, #48	; 0x30
 8007386:	2b09      	cmp	r3, #9
 8007388:	d94e      	bls.n	8007428 <_vfiprintf_r+0x1c4>
 800738a:	b1b0      	cbz	r0, 80073ba <_vfiprintf_r+0x156>
 800738c:	9207      	str	r2, [sp, #28]
 800738e:	e014      	b.n	80073ba <_vfiprintf_r+0x156>
 8007390:	eba0 0308 	sub.w	r3, r0, r8
 8007394:	fa09 f303 	lsl.w	r3, r9, r3
 8007398:	4313      	orrs	r3, r2
 800739a:	9304      	str	r3, [sp, #16]
 800739c:	46a2      	mov	sl, r4
 800739e:	e7d2      	b.n	8007346 <_vfiprintf_r+0xe2>
 80073a0:	9b03      	ldr	r3, [sp, #12]
 80073a2:	1d19      	adds	r1, r3, #4
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	9103      	str	r1, [sp, #12]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	bfbb      	ittet	lt
 80073ac:	425b      	neglt	r3, r3
 80073ae:	f042 0202 	orrlt.w	r2, r2, #2
 80073b2:	9307      	strge	r3, [sp, #28]
 80073b4:	9307      	strlt	r3, [sp, #28]
 80073b6:	bfb8      	it	lt
 80073b8:	9204      	strlt	r2, [sp, #16]
 80073ba:	7823      	ldrb	r3, [r4, #0]
 80073bc:	2b2e      	cmp	r3, #46	; 0x2e
 80073be:	d10c      	bne.n	80073da <_vfiprintf_r+0x176>
 80073c0:	7863      	ldrb	r3, [r4, #1]
 80073c2:	2b2a      	cmp	r3, #42	; 0x2a
 80073c4:	d135      	bne.n	8007432 <_vfiprintf_r+0x1ce>
 80073c6:	9b03      	ldr	r3, [sp, #12]
 80073c8:	1d1a      	adds	r2, r3, #4
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	9203      	str	r2, [sp, #12]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	bfb8      	it	lt
 80073d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80073d6:	3402      	adds	r4, #2
 80073d8:	9305      	str	r3, [sp, #20]
 80073da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80074c0 <_vfiprintf_r+0x25c>
 80073de:	7821      	ldrb	r1, [r4, #0]
 80073e0:	2203      	movs	r2, #3
 80073e2:	4650      	mov	r0, sl
 80073e4:	f7f8 ff04 	bl	80001f0 <memchr>
 80073e8:	b140      	cbz	r0, 80073fc <_vfiprintf_r+0x198>
 80073ea:	2340      	movs	r3, #64	; 0x40
 80073ec:	eba0 000a 	sub.w	r0, r0, sl
 80073f0:	fa03 f000 	lsl.w	r0, r3, r0
 80073f4:	9b04      	ldr	r3, [sp, #16]
 80073f6:	4303      	orrs	r3, r0
 80073f8:	3401      	adds	r4, #1
 80073fa:	9304      	str	r3, [sp, #16]
 80073fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007400:	482c      	ldr	r0, [pc, #176]	; (80074b4 <_vfiprintf_r+0x250>)
 8007402:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007406:	2206      	movs	r2, #6
 8007408:	f7f8 fef2 	bl	80001f0 <memchr>
 800740c:	2800      	cmp	r0, #0
 800740e:	d03f      	beq.n	8007490 <_vfiprintf_r+0x22c>
 8007410:	4b29      	ldr	r3, [pc, #164]	; (80074b8 <_vfiprintf_r+0x254>)
 8007412:	bb1b      	cbnz	r3, 800745c <_vfiprintf_r+0x1f8>
 8007414:	9b03      	ldr	r3, [sp, #12]
 8007416:	3307      	adds	r3, #7
 8007418:	f023 0307 	bic.w	r3, r3, #7
 800741c:	3308      	adds	r3, #8
 800741e:	9303      	str	r3, [sp, #12]
 8007420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007422:	443b      	add	r3, r7
 8007424:	9309      	str	r3, [sp, #36]	; 0x24
 8007426:	e767      	b.n	80072f8 <_vfiprintf_r+0x94>
 8007428:	fb0c 3202 	mla	r2, ip, r2, r3
 800742c:	460c      	mov	r4, r1
 800742e:	2001      	movs	r0, #1
 8007430:	e7a5      	b.n	800737e <_vfiprintf_r+0x11a>
 8007432:	2300      	movs	r3, #0
 8007434:	3401      	adds	r4, #1
 8007436:	9305      	str	r3, [sp, #20]
 8007438:	4619      	mov	r1, r3
 800743a:	f04f 0c0a 	mov.w	ip, #10
 800743e:	4620      	mov	r0, r4
 8007440:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007444:	3a30      	subs	r2, #48	; 0x30
 8007446:	2a09      	cmp	r2, #9
 8007448:	d903      	bls.n	8007452 <_vfiprintf_r+0x1ee>
 800744a:	2b00      	cmp	r3, #0
 800744c:	d0c5      	beq.n	80073da <_vfiprintf_r+0x176>
 800744e:	9105      	str	r1, [sp, #20]
 8007450:	e7c3      	b.n	80073da <_vfiprintf_r+0x176>
 8007452:	fb0c 2101 	mla	r1, ip, r1, r2
 8007456:	4604      	mov	r4, r0
 8007458:	2301      	movs	r3, #1
 800745a:	e7f0      	b.n	800743e <_vfiprintf_r+0x1da>
 800745c:	ab03      	add	r3, sp, #12
 800745e:	9300      	str	r3, [sp, #0]
 8007460:	462a      	mov	r2, r5
 8007462:	4b16      	ldr	r3, [pc, #88]	; (80074bc <_vfiprintf_r+0x258>)
 8007464:	a904      	add	r1, sp, #16
 8007466:	4630      	mov	r0, r6
 8007468:	f7fd fdd6 	bl	8005018 <_printf_float>
 800746c:	4607      	mov	r7, r0
 800746e:	1c78      	adds	r0, r7, #1
 8007470:	d1d6      	bne.n	8007420 <_vfiprintf_r+0x1bc>
 8007472:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007474:	07d9      	lsls	r1, r3, #31
 8007476:	d405      	bmi.n	8007484 <_vfiprintf_r+0x220>
 8007478:	89ab      	ldrh	r3, [r5, #12]
 800747a:	059a      	lsls	r2, r3, #22
 800747c:	d402      	bmi.n	8007484 <_vfiprintf_r+0x220>
 800747e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007480:	f000 faaf 	bl	80079e2 <__retarget_lock_release_recursive>
 8007484:	89ab      	ldrh	r3, [r5, #12]
 8007486:	065b      	lsls	r3, r3, #25
 8007488:	f53f af12 	bmi.w	80072b0 <_vfiprintf_r+0x4c>
 800748c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800748e:	e711      	b.n	80072b4 <_vfiprintf_r+0x50>
 8007490:	ab03      	add	r3, sp, #12
 8007492:	9300      	str	r3, [sp, #0]
 8007494:	462a      	mov	r2, r5
 8007496:	4b09      	ldr	r3, [pc, #36]	; (80074bc <_vfiprintf_r+0x258>)
 8007498:	a904      	add	r1, sp, #16
 800749a:	4630      	mov	r0, r6
 800749c:	f7fe f860 	bl	8005560 <_printf_i>
 80074a0:	e7e4      	b.n	800746c <_vfiprintf_r+0x208>
 80074a2:	bf00      	nop
 80074a4:	0800809c 	.word	0x0800809c
 80074a8:	080080bc 	.word	0x080080bc
 80074ac:	0800807c 	.word	0x0800807c
 80074b0:	08007f24 	.word	0x08007f24
 80074b4:	08007f2e 	.word	0x08007f2e
 80074b8:	08005019 	.word	0x08005019
 80074bc:	08007241 	.word	0x08007241
 80074c0:	08007f2a 	.word	0x08007f2a

080074c4 <__swbuf_r>:
 80074c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074c6:	460e      	mov	r6, r1
 80074c8:	4614      	mov	r4, r2
 80074ca:	4605      	mov	r5, r0
 80074cc:	b118      	cbz	r0, 80074d6 <__swbuf_r+0x12>
 80074ce:	6983      	ldr	r3, [r0, #24]
 80074d0:	b90b      	cbnz	r3, 80074d6 <__swbuf_r+0x12>
 80074d2:	f000 f9e7 	bl	80078a4 <__sinit>
 80074d6:	4b21      	ldr	r3, [pc, #132]	; (800755c <__swbuf_r+0x98>)
 80074d8:	429c      	cmp	r4, r3
 80074da:	d12b      	bne.n	8007534 <__swbuf_r+0x70>
 80074dc:	686c      	ldr	r4, [r5, #4]
 80074de:	69a3      	ldr	r3, [r4, #24]
 80074e0:	60a3      	str	r3, [r4, #8]
 80074e2:	89a3      	ldrh	r3, [r4, #12]
 80074e4:	071a      	lsls	r2, r3, #28
 80074e6:	d52f      	bpl.n	8007548 <__swbuf_r+0x84>
 80074e8:	6923      	ldr	r3, [r4, #16]
 80074ea:	b36b      	cbz	r3, 8007548 <__swbuf_r+0x84>
 80074ec:	6923      	ldr	r3, [r4, #16]
 80074ee:	6820      	ldr	r0, [r4, #0]
 80074f0:	1ac0      	subs	r0, r0, r3
 80074f2:	6963      	ldr	r3, [r4, #20]
 80074f4:	b2f6      	uxtb	r6, r6
 80074f6:	4283      	cmp	r3, r0
 80074f8:	4637      	mov	r7, r6
 80074fa:	dc04      	bgt.n	8007506 <__swbuf_r+0x42>
 80074fc:	4621      	mov	r1, r4
 80074fe:	4628      	mov	r0, r5
 8007500:	f000 f93c 	bl	800777c <_fflush_r>
 8007504:	bb30      	cbnz	r0, 8007554 <__swbuf_r+0x90>
 8007506:	68a3      	ldr	r3, [r4, #8]
 8007508:	3b01      	subs	r3, #1
 800750a:	60a3      	str	r3, [r4, #8]
 800750c:	6823      	ldr	r3, [r4, #0]
 800750e:	1c5a      	adds	r2, r3, #1
 8007510:	6022      	str	r2, [r4, #0]
 8007512:	701e      	strb	r6, [r3, #0]
 8007514:	6963      	ldr	r3, [r4, #20]
 8007516:	3001      	adds	r0, #1
 8007518:	4283      	cmp	r3, r0
 800751a:	d004      	beq.n	8007526 <__swbuf_r+0x62>
 800751c:	89a3      	ldrh	r3, [r4, #12]
 800751e:	07db      	lsls	r3, r3, #31
 8007520:	d506      	bpl.n	8007530 <__swbuf_r+0x6c>
 8007522:	2e0a      	cmp	r6, #10
 8007524:	d104      	bne.n	8007530 <__swbuf_r+0x6c>
 8007526:	4621      	mov	r1, r4
 8007528:	4628      	mov	r0, r5
 800752a:	f000 f927 	bl	800777c <_fflush_r>
 800752e:	b988      	cbnz	r0, 8007554 <__swbuf_r+0x90>
 8007530:	4638      	mov	r0, r7
 8007532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007534:	4b0a      	ldr	r3, [pc, #40]	; (8007560 <__swbuf_r+0x9c>)
 8007536:	429c      	cmp	r4, r3
 8007538:	d101      	bne.n	800753e <__swbuf_r+0x7a>
 800753a:	68ac      	ldr	r4, [r5, #8]
 800753c:	e7cf      	b.n	80074de <__swbuf_r+0x1a>
 800753e:	4b09      	ldr	r3, [pc, #36]	; (8007564 <__swbuf_r+0xa0>)
 8007540:	429c      	cmp	r4, r3
 8007542:	bf08      	it	eq
 8007544:	68ec      	ldreq	r4, [r5, #12]
 8007546:	e7ca      	b.n	80074de <__swbuf_r+0x1a>
 8007548:	4621      	mov	r1, r4
 800754a:	4628      	mov	r0, r5
 800754c:	f000 f81a 	bl	8007584 <__swsetup_r>
 8007550:	2800      	cmp	r0, #0
 8007552:	d0cb      	beq.n	80074ec <__swbuf_r+0x28>
 8007554:	f04f 37ff 	mov.w	r7, #4294967295
 8007558:	e7ea      	b.n	8007530 <__swbuf_r+0x6c>
 800755a:	bf00      	nop
 800755c:	0800809c 	.word	0x0800809c
 8007560:	080080bc 	.word	0x080080bc
 8007564:	0800807c 	.word	0x0800807c

08007568 <__ascii_wctomb>:
 8007568:	b149      	cbz	r1, 800757e <__ascii_wctomb+0x16>
 800756a:	2aff      	cmp	r2, #255	; 0xff
 800756c:	bf85      	ittet	hi
 800756e:	238a      	movhi	r3, #138	; 0x8a
 8007570:	6003      	strhi	r3, [r0, #0]
 8007572:	700a      	strbls	r2, [r1, #0]
 8007574:	f04f 30ff 	movhi.w	r0, #4294967295
 8007578:	bf98      	it	ls
 800757a:	2001      	movls	r0, #1
 800757c:	4770      	bx	lr
 800757e:	4608      	mov	r0, r1
 8007580:	4770      	bx	lr
	...

08007584 <__swsetup_r>:
 8007584:	4b32      	ldr	r3, [pc, #200]	; (8007650 <__swsetup_r+0xcc>)
 8007586:	b570      	push	{r4, r5, r6, lr}
 8007588:	681d      	ldr	r5, [r3, #0]
 800758a:	4606      	mov	r6, r0
 800758c:	460c      	mov	r4, r1
 800758e:	b125      	cbz	r5, 800759a <__swsetup_r+0x16>
 8007590:	69ab      	ldr	r3, [r5, #24]
 8007592:	b913      	cbnz	r3, 800759a <__swsetup_r+0x16>
 8007594:	4628      	mov	r0, r5
 8007596:	f000 f985 	bl	80078a4 <__sinit>
 800759a:	4b2e      	ldr	r3, [pc, #184]	; (8007654 <__swsetup_r+0xd0>)
 800759c:	429c      	cmp	r4, r3
 800759e:	d10f      	bne.n	80075c0 <__swsetup_r+0x3c>
 80075a0:	686c      	ldr	r4, [r5, #4]
 80075a2:	89a3      	ldrh	r3, [r4, #12]
 80075a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075a8:	0719      	lsls	r1, r3, #28
 80075aa:	d42c      	bmi.n	8007606 <__swsetup_r+0x82>
 80075ac:	06dd      	lsls	r5, r3, #27
 80075ae:	d411      	bmi.n	80075d4 <__swsetup_r+0x50>
 80075b0:	2309      	movs	r3, #9
 80075b2:	6033      	str	r3, [r6, #0]
 80075b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80075b8:	81a3      	strh	r3, [r4, #12]
 80075ba:	f04f 30ff 	mov.w	r0, #4294967295
 80075be:	e03e      	b.n	800763e <__swsetup_r+0xba>
 80075c0:	4b25      	ldr	r3, [pc, #148]	; (8007658 <__swsetup_r+0xd4>)
 80075c2:	429c      	cmp	r4, r3
 80075c4:	d101      	bne.n	80075ca <__swsetup_r+0x46>
 80075c6:	68ac      	ldr	r4, [r5, #8]
 80075c8:	e7eb      	b.n	80075a2 <__swsetup_r+0x1e>
 80075ca:	4b24      	ldr	r3, [pc, #144]	; (800765c <__swsetup_r+0xd8>)
 80075cc:	429c      	cmp	r4, r3
 80075ce:	bf08      	it	eq
 80075d0:	68ec      	ldreq	r4, [r5, #12]
 80075d2:	e7e6      	b.n	80075a2 <__swsetup_r+0x1e>
 80075d4:	0758      	lsls	r0, r3, #29
 80075d6:	d512      	bpl.n	80075fe <__swsetup_r+0x7a>
 80075d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075da:	b141      	cbz	r1, 80075ee <__swsetup_r+0x6a>
 80075dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075e0:	4299      	cmp	r1, r3
 80075e2:	d002      	beq.n	80075ea <__swsetup_r+0x66>
 80075e4:	4630      	mov	r0, r6
 80075e6:	f7ff fb31 	bl	8006c4c <_free_r>
 80075ea:	2300      	movs	r3, #0
 80075ec:	6363      	str	r3, [r4, #52]	; 0x34
 80075ee:	89a3      	ldrh	r3, [r4, #12]
 80075f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80075f4:	81a3      	strh	r3, [r4, #12]
 80075f6:	2300      	movs	r3, #0
 80075f8:	6063      	str	r3, [r4, #4]
 80075fa:	6923      	ldr	r3, [r4, #16]
 80075fc:	6023      	str	r3, [r4, #0]
 80075fe:	89a3      	ldrh	r3, [r4, #12]
 8007600:	f043 0308 	orr.w	r3, r3, #8
 8007604:	81a3      	strh	r3, [r4, #12]
 8007606:	6923      	ldr	r3, [r4, #16]
 8007608:	b94b      	cbnz	r3, 800761e <__swsetup_r+0x9a>
 800760a:	89a3      	ldrh	r3, [r4, #12]
 800760c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007614:	d003      	beq.n	800761e <__swsetup_r+0x9a>
 8007616:	4621      	mov	r1, r4
 8007618:	4630      	mov	r0, r6
 800761a:	f000 fa09 	bl	8007a30 <__smakebuf_r>
 800761e:	89a0      	ldrh	r0, [r4, #12]
 8007620:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007624:	f010 0301 	ands.w	r3, r0, #1
 8007628:	d00a      	beq.n	8007640 <__swsetup_r+0xbc>
 800762a:	2300      	movs	r3, #0
 800762c:	60a3      	str	r3, [r4, #8]
 800762e:	6963      	ldr	r3, [r4, #20]
 8007630:	425b      	negs	r3, r3
 8007632:	61a3      	str	r3, [r4, #24]
 8007634:	6923      	ldr	r3, [r4, #16]
 8007636:	b943      	cbnz	r3, 800764a <__swsetup_r+0xc6>
 8007638:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800763c:	d1ba      	bne.n	80075b4 <__swsetup_r+0x30>
 800763e:	bd70      	pop	{r4, r5, r6, pc}
 8007640:	0781      	lsls	r1, r0, #30
 8007642:	bf58      	it	pl
 8007644:	6963      	ldrpl	r3, [r4, #20]
 8007646:	60a3      	str	r3, [r4, #8]
 8007648:	e7f4      	b.n	8007634 <__swsetup_r+0xb0>
 800764a:	2000      	movs	r0, #0
 800764c:	e7f7      	b.n	800763e <__swsetup_r+0xba>
 800764e:	bf00      	nop
 8007650:	20000010 	.word	0x20000010
 8007654:	0800809c 	.word	0x0800809c
 8007658:	080080bc 	.word	0x080080bc
 800765c:	0800807c 	.word	0x0800807c

08007660 <abort>:
 8007660:	b508      	push	{r3, lr}
 8007662:	2006      	movs	r0, #6
 8007664:	f000 fa54 	bl	8007b10 <raise>
 8007668:	2001      	movs	r0, #1
 800766a:	f7fa fb13 	bl	8001c94 <_exit>
	...

08007670 <__sflush_r>:
 8007670:	898a      	ldrh	r2, [r1, #12]
 8007672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007676:	4605      	mov	r5, r0
 8007678:	0710      	lsls	r0, r2, #28
 800767a:	460c      	mov	r4, r1
 800767c:	d458      	bmi.n	8007730 <__sflush_r+0xc0>
 800767e:	684b      	ldr	r3, [r1, #4]
 8007680:	2b00      	cmp	r3, #0
 8007682:	dc05      	bgt.n	8007690 <__sflush_r+0x20>
 8007684:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007686:	2b00      	cmp	r3, #0
 8007688:	dc02      	bgt.n	8007690 <__sflush_r+0x20>
 800768a:	2000      	movs	r0, #0
 800768c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007690:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007692:	2e00      	cmp	r6, #0
 8007694:	d0f9      	beq.n	800768a <__sflush_r+0x1a>
 8007696:	2300      	movs	r3, #0
 8007698:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800769c:	682f      	ldr	r7, [r5, #0]
 800769e:	602b      	str	r3, [r5, #0]
 80076a0:	d032      	beq.n	8007708 <__sflush_r+0x98>
 80076a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80076a4:	89a3      	ldrh	r3, [r4, #12]
 80076a6:	075a      	lsls	r2, r3, #29
 80076a8:	d505      	bpl.n	80076b6 <__sflush_r+0x46>
 80076aa:	6863      	ldr	r3, [r4, #4]
 80076ac:	1ac0      	subs	r0, r0, r3
 80076ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076b0:	b10b      	cbz	r3, 80076b6 <__sflush_r+0x46>
 80076b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80076b4:	1ac0      	subs	r0, r0, r3
 80076b6:	2300      	movs	r3, #0
 80076b8:	4602      	mov	r2, r0
 80076ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076bc:	6a21      	ldr	r1, [r4, #32]
 80076be:	4628      	mov	r0, r5
 80076c0:	47b0      	blx	r6
 80076c2:	1c43      	adds	r3, r0, #1
 80076c4:	89a3      	ldrh	r3, [r4, #12]
 80076c6:	d106      	bne.n	80076d6 <__sflush_r+0x66>
 80076c8:	6829      	ldr	r1, [r5, #0]
 80076ca:	291d      	cmp	r1, #29
 80076cc:	d82c      	bhi.n	8007728 <__sflush_r+0xb8>
 80076ce:	4a2a      	ldr	r2, [pc, #168]	; (8007778 <__sflush_r+0x108>)
 80076d0:	40ca      	lsrs	r2, r1
 80076d2:	07d6      	lsls	r6, r2, #31
 80076d4:	d528      	bpl.n	8007728 <__sflush_r+0xb8>
 80076d6:	2200      	movs	r2, #0
 80076d8:	6062      	str	r2, [r4, #4]
 80076da:	04d9      	lsls	r1, r3, #19
 80076dc:	6922      	ldr	r2, [r4, #16]
 80076de:	6022      	str	r2, [r4, #0]
 80076e0:	d504      	bpl.n	80076ec <__sflush_r+0x7c>
 80076e2:	1c42      	adds	r2, r0, #1
 80076e4:	d101      	bne.n	80076ea <__sflush_r+0x7a>
 80076e6:	682b      	ldr	r3, [r5, #0]
 80076e8:	b903      	cbnz	r3, 80076ec <__sflush_r+0x7c>
 80076ea:	6560      	str	r0, [r4, #84]	; 0x54
 80076ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076ee:	602f      	str	r7, [r5, #0]
 80076f0:	2900      	cmp	r1, #0
 80076f2:	d0ca      	beq.n	800768a <__sflush_r+0x1a>
 80076f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076f8:	4299      	cmp	r1, r3
 80076fa:	d002      	beq.n	8007702 <__sflush_r+0x92>
 80076fc:	4628      	mov	r0, r5
 80076fe:	f7ff faa5 	bl	8006c4c <_free_r>
 8007702:	2000      	movs	r0, #0
 8007704:	6360      	str	r0, [r4, #52]	; 0x34
 8007706:	e7c1      	b.n	800768c <__sflush_r+0x1c>
 8007708:	6a21      	ldr	r1, [r4, #32]
 800770a:	2301      	movs	r3, #1
 800770c:	4628      	mov	r0, r5
 800770e:	47b0      	blx	r6
 8007710:	1c41      	adds	r1, r0, #1
 8007712:	d1c7      	bne.n	80076a4 <__sflush_r+0x34>
 8007714:	682b      	ldr	r3, [r5, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d0c4      	beq.n	80076a4 <__sflush_r+0x34>
 800771a:	2b1d      	cmp	r3, #29
 800771c:	d001      	beq.n	8007722 <__sflush_r+0xb2>
 800771e:	2b16      	cmp	r3, #22
 8007720:	d101      	bne.n	8007726 <__sflush_r+0xb6>
 8007722:	602f      	str	r7, [r5, #0]
 8007724:	e7b1      	b.n	800768a <__sflush_r+0x1a>
 8007726:	89a3      	ldrh	r3, [r4, #12]
 8007728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800772c:	81a3      	strh	r3, [r4, #12]
 800772e:	e7ad      	b.n	800768c <__sflush_r+0x1c>
 8007730:	690f      	ldr	r7, [r1, #16]
 8007732:	2f00      	cmp	r7, #0
 8007734:	d0a9      	beq.n	800768a <__sflush_r+0x1a>
 8007736:	0793      	lsls	r3, r2, #30
 8007738:	680e      	ldr	r6, [r1, #0]
 800773a:	bf08      	it	eq
 800773c:	694b      	ldreq	r3, [r1, #20]
 800773e:	600f      	str	r7, [r1, #0]
 8007740:	bf18      	it	ne
 8007742:	2300      	movne	r3, #0
 8007744:	eba6 0807 	sub.w	r8, r6, r7
 8007748:	608b      	str	r3, [r1, #8]
 800774a:	f1b8 0f00 	cmp.w	r8, #0
 800774e:	dd9c      	ble.n	800768a <__sflush_r+0x1a>
 8007750:	6a21      	ldr	r1, [r4, #32]
 8007752:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007754:	4643      	mov	r3, r8
 8007756:	463a      	mov	r2, r7
 8007758:	4628      	mov	r0, r5
 800775a:	47b0      	blx	r6
 800775c:	2800      	cmp	r0, #0
 800775e:	dc06      	bgt.n	800776e <__sflush_r+0xfe>
 8007760:	89a3      	ldrh	r3, [r4, #12]
 8007762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007766:	81a3      	strh	r3, [r4, #12]
 8007768:	f04f 30ff 	mov.w	r0, #4294967295
 800776c:	e78e      	b.n	800768c <__sflush_r+0x1c>
 800776e:	4407      	add	r7, r0
 8007770:	eba8 0800 	sub.w	r8, r8, r0
 8007774:	e7e9      	b.n	800774a <__sflush_r+0xda>
 8007776:	bf00      	nop
 8007778:	20400001 	.word	0x20400001

0800777c <_fflush_r>:
 800777c:	b538      	push	{r3, r4, r5, lr}
 800777e:	690b      	ldr	r3, [r1, #16]
 8007780:	4605      	mov	r5, r0
 8007782:	460c      	mov	r4, r1
 8007784:	b913      	cbnz	r3, 800778c <_fflush_r+0x10>
 8007786:	2500      	movs	r5, #0
 8007788:	4628      	mov	r0, r5
 800778a:	bd38      	pop	{r3, r4, r5, pc}
 800778c:	b118      	cbz	r0, 8007796 <_fflush_r+0x1a>
 800778e:	6983      	ldr	r3, [r0, #24]
 8007790:	b90b      	cbnz	r3, 8007796 <_fflush_r+0x1a>
 8007792:	f000 f887 	bl	80078a4 <__sinit>
 8007796:	4b14      	ldr	r3, [pc, #80]	; (80077e8 <_fflush_r+0x6c>)
 8007798:	429c      	cmp	r4, r3
 800779a:	d11b      	bne.n	80077d4 <_fflush_r+0x58>
 800779c:	686c      	ldr	r4, [r5, #4]
 800779e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d0ef      	beq.n	8007786 <_fflush_r+0xa>
 80077a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80077a8:	07d0      	lsls	r0, r2, #31
 80077aa:	d404      	bmi.n	80077b6 <_fflush_r+0x3a>
 80077ac:	0599      	lsls	r1, r3, #22
 80077ae:	d402      	bmi.n	80077b6 <_fflush_r+0x3a>
 80077b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077b2:	f000 f915 	bl	80079e0 <__retarget_lock_acquire_recursive>
 80077b6:	4628      	mov	r0, r5
 80077b8:	4621      	mov	r1, r4
 80077ba:	f7ff ff59 	bl	8007670 <__sflush_r>
 80077be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077c0:	07da      	lsls	r2, r3, #31
 80077c2:	4605      	mov	r5, r0
 80077c4:	d4e0      	bmi.n	8007788 <_fflush_r+0xc>
 80077c6:	89a3      	ldrh	r3, [r4, #12]
 80077c8:	059b      	lsls	r3, r3, #22
 80077ca:	d4dd      	bmi.n	8007788 <_fflush_r+0xc>
 80077cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077ce:	f000 f908 	bl	80079e2 <__retarget_lock_release_recursive>
 80077d2:	e7d9      	b.n	8007788 <_fflush_r+0xc>
 80077d4:	4b05      	ldr	r3, [pc, #20]	; (80077ec <_fflush_r+0x70>)
 80077d6:	429c      	cmp	r4, r3
 80077d8:	d101      	bne.n	80077de <_fflush_r+0x62>
 80077da:	68ac      	ldr	r4, [r5, #8]
 80077dc:	e7df      	b.n	800779e <_fflush_r+0x22>
 80077de:	4b04      	ldr	r3, [pc, #16]	; (80077f0 <_fflush_r+0x74>)
 80077e0:	429c      	cmp	r4, r3
 80077e2:	bf08      	it	eq
 80077e4:	68ec      	ldreq	r4, [r5, #12]
 80077e6:	e7da      	b.n	800779e <_fflush_r+0x22>
 80077e8:	0800809c 	.word	0x0800809c
 80077ec:	080080bc 	.word	0x080080bc
 80077f0:	0800807c 	.word	0x0800807c

080077f4 <std>:
 80077f4:	2300      	movs	r3, #0
 80077f6:	b510      	push	{r4, lr}
 80077f8:	4604      	mov	r4, r0
 80077fa:	e9c0 3300 	strd	r3, r3, [r0]
 80077fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007802:	6083      	str	r3, [r0, #8]
 8007804:	8181      	strh	r1, [r0, #12]
 8007806:	6643      	str	r3, [r0, #100]	; 0x64
 8007808:	81c2      	strh	r2, [r0, #14]
 800780a:	6183      	str	r3, [r0, #24]
 800780c:	4619      	mov	r1, r3
 800780e:	2208      	movs	r2, #8
 8007810:	305c      	adds	r0, #92	; 0x5c
 8007812:	f7fd fb59 	bl	8004ec8 <memset>
 8007816:	4b05      	ldr	r3, [pc, #20]	; (800782c <std+0x38>)
 8007818:	6263      	str	r3, [r4, #36]	; 0x24
 800781a:	4b05      	ldr	r3, [pc, #20]	; (8007830 <std+0x3c>)
 800781c:	62a3      	str	r3, [r4, #40]	; 0x28
 800781e:	4b05      	ldr	r3, [pc, #20]	; (8007834 <std+0x40>)
 8007820:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007822:	4b05      	ldr	r3, [pc, #20]	; (8007838 <std+0x44>)
 8007824:	6224      	str	r4, [r4, #32]
 8007826:	6323      	str	r3, [r4, #48]	; 0x30
 8007828:	bd10      	pop	{r4, pc}
 800782a:	bf00      	nop
 800782c:	08007b49 	.word	0x08007b49
 8007830:	08007b6b 	.word	0x08007b6b
 8007834:	08007ba3 	.word	0x08007ba3
 8007838:	08007bc7 	.word	0x08007bc7

0800783c <_cleanup_r>:
 800783c:	4901      	ldr	r1, [pc, #4]	; (8007844 <_cleanup_r+0x8>)
 800783e:	f000 b8af 	b.w	80079a0 <_fwalk_reent>
 8007842:	bf00      	nop
 8007844:	0800777d 	.word	0x0800777d

08007848 <__sfmoreglue>:
 8007848:	b570      	push	{r4, r5, r6, lr}
 800784a:	2268      	movs	r2, #104	; 0x68
 800784c:	1e4d      	subs	r5, r1, #1
 800784e:	4355      	muls	r5, r2
 8007850:	460e      	mov	r6, r1
 8007852:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007856:	f7ff fa65 	bl	8006d24 <_malloc_r>
 800785a:	4604      	mov	r4, r0
 800785c:	b140      	cbz	r0, 8007870 <__sfmoreglue+0x28>
 800785e:	2100      	movs	r1, #0
 8007860:	e9c0 1600 	strd	r1, r6, [r0]
 8007864:	300c      	adds	r0, #12
 8007866:	60a0      	str	r0, [r4, #8]
 8007868:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800786c:	f7fd fb2c 	bl	8004ec8 <memset>
 8007870:	4620      	mov	r0, r4
 8007872:	bd70      	pop	{r4, r5, r6, pc}

08007874 <__sfp_lock_acquire>:
 8007874:	4801      	ldr	r0, [pc, #4]	; (800787c <__sfp_lock_acquire+0x8>)
 8007876:	f000 b8b3 	b.w	80079e0 <__retarget_lock_acquire_recursive>
 800787a:	bf00      	nop
 800787c:	20000355 	.word	0x20000355

08007880 <__sfp_lock_release>:
 8007880:	4801      	ldr	r0, [pc, #4]	; (8007888 <__sfp_lock_release+0x8>)
 8007882:	f000 b8ae 	b.w	80079e2 <__retarget_lock_release_recursive>
 8007886:	bf00      	nop
 8007888:	20000355 	.word	0x20000355

0800788c <__sinit_lock_acquire>:
 800788c:	4801      	ldr	r0, [pc, #4]	; (8007894 <__sinit_lock_acquire+0x8>)
 800788e:	f000 b8a7 	b.w	80079e0 <__retarget_lock_acquire_recursive>
 8007892:	bf00      	nop
 8007894:	20000356 	.word	0x20000356

08007898 <__sinit_lock_release>:
 8007898:	4801      	ldr	r0, [pc, #4]	; (80078a0 <__sinit_lock_release+0x8>)
 800789a:	f000 b8a2 	b.w	80079e2 <__retarget_lock_release_recursive>
 800789e:	bf00      	nop
 80078a0:	20000356 	.word	0x20000356

080078a4 <__sinit>:
 80078a4:	b510      	push	{r4, lr}
 80078a6:	4604      	mov	r4, r0
 80078a8:	f7ff fff0 	bl	800788c <__sinit_lock_acquire>
 80078ac:	69a3      	ldr	r3, [r4, #24]
 80078ae:	b11b      	cbz	r3, 80078b8 <__sinit+0x14>
 80078b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078b4:	f7ff bff0 	b.w	8007898 <__sinit_lock_release>
 80078b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80078bc:	6523      	str	r3, [r4, #80]	; 0x50
 80078be:	4b13      	ldr	r3, [pc, #76]	; (800790c <__sinit+0x68>)
 80078c0:	4a13      	ldr	r2, [pc, #76]	; (8007910 <__sinit+0x6c>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80078c6:	42a3      	cmp	r3, r4
 80078c8:	bf04      	itt	eq
 80078ca:	2301      	moveq	r3, #1
 80078cc:	61a3      	streq	r3, [r4, #24]
 80078ce:	4620      	mov	r0, r4
 80078d0:	f000 f820 	bl	8007914 <__sfp>
 80078d4:	6060      	str	r0, [r4, #4]
 80078d6:	4620      	mov	r0, r4
 80078d8:	f000 f81c 	bl	8007914 <__sfp>
 80078dc:	60a0      	str	r0, [r4, #8]
 80078de:	4620      	mov	r0, r4
 80078e0:	f000 f818 	bl	8007914 <__sfp>
 80078e4:	2200      	movs	r2, #0
 80078e6:	60e0      	str	r0, [r4, #12]
 80078e8:	2104      	movs	r1, #4
 80078ea:	6860      	ldr	r0, [r4, #4]
 80078ec:	f7ff ff82 	bl	80077f4 <std>
 80078f0:	68a0      	ldr	r0, [r4, #8]
 80078f2:	2201      	movs	r2, #1
 80078f4:	2109      	movs	r1, #9
 80078f6:	f7ff ff7d 	bl	80077f4 <std>
 80078fa:	68e0      	ldr	r0, [r4, #12]
 80078fc:	2202      	movs	r2, #2
 80078fe:	2112      	movs	r1, #18
 8007900:	f7ff ff78 	bl	80077f4 <std>
 8007904:	2301      	movs	r3, #1
 8007906:	61a3      	str	r3, [r4, #24]
 8007908:	e7d2      	b.n	80078b0 <__sinit+0xc>
 800790a:	bf00      	nop
 800790c:	08007d00 	.word	0x08007d00
 8007910:	0800783d 	.word	0x0800783d

08007914 <__sfp>:
 8007914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007916:	4607      	mov	r7, r0
 8007918:	f7ff ffac 	bl	8007874 <__sfp_lock_acquire>
 800791c:	4b1e      	ldr	r3, [pc, #120]	; (8007998 <__sfp+0x84>)
 800791e:	681e      	ldr	r6, [r3, #0]
 8007920:	69b3      	ldr	r3, [r6, #24]
 8007922:	b913      	cbnz	r3, 800792a <__sfp+0x16>
 8007924:	4630      	mov	r0, r6
 8007926:	f7ff ffbd 	bl	80078a4 <__sinit>
 800792a:	3648      	adds	r6, #72	; 0x48
 800792c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007930:	3b01      	subs	r3, #1
 8007932:	d503      	bpl.n	800793c <__sfp+0x28>
 8007934:	6833      	ldr	r3, [r6, #0]
 8007936:	b30b      	cbz	r3, 800797c <__sfp+0x68>
 8007938:	6836      	ldr	r6, [r6, #0]
 800793a:	e7f7      	b.n	800792c <__sfp+0x18>
 800793c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007940:	b9d5      	cbnz	r5, 8007978 <__sfp+0x64>
 8007942:	4b16      	ldr	r3, [pc, #88]	; (800799c <__sfp+0x88>)
 8007944:	60e3      	str	r3, [r4, #12]
 8007946:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800794a:	6665      	str	r5, [r4, #100]	; 0x64
 800794c:	f000 f847 	bl	80079de <__retarget_lock_init_recursive>
 8007950:	f7ff ff96 	bl	8007880 <__sfp_lock_release>
 8007954:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007958:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800795c:	6025      	str	r5, [r4, #0]
 800795e:	61a5      	str	r5, [r4, #24]
 8007960:	2208      	movs	r2, #8
 8007962:	4629      	mov	r1, r5
 8007964:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007968:	f7fd faae 	bl	8004ec8 <memset>
 800796c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007970:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007974:	4620      	mov	r0, r4
 8007976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007978:	3468      	adds	r4, #104	; 0x68
 800797a:	e7d9      	b.n	8007930 <__sfp+0x1c>
 800797c:	2104      	movs	r1, #4
 800797e:	4638      	mov	r0, r7
 8007980:	f7ff ff62 	bl	8007848 <__sfmoreglue>
 8007984:	4604      	mov	r4, r0
 8007986:	6030      	str	r0, [r6, #0]
 8007988:	2800      	cmp	r0, #0
 800798a:	d1d5      	bne.n	8007938 <__sfp+0x24>
 800798c:	f7ff ff78 	bl	8007880 <__sfp_lock_release>
 8007990:	230c      	movs	r3, #12
 8007992:	603b      	str	r3, [r7, #0]
 8007994:	e7ee      	b.n	8007974 <__sfp+0x60>
 8007996:	bf00      	nop
 8007998:	08007d00 	.word	0x08007d00
 800799c:	ffff0001 	.word	0xffff0001

080079a0 <_fwalk_reent>:
 80079a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079a4:	4606      	mov	r6, r0
 80079a6:	4688      	mov	r8, r1
 80079a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80079ac:	2700      	movs	r7, #0
 80079ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80079b2:	f1b9 0901 	subs.w	r9, r9, #1
 80079b6:	d505      	bpl.n	80079c4 <_fwalk_reent+0x24>
 80079b8:	6824      	ldr	r4, [r4, #0]
 80079ba:	2c00      	cmp	r4, #0
 80079bc:	d1f7      	bne.n	80079ae <_fwalk_reent+0xe>
 80079be:	4638      	mov	r0, r7
 80079c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079c4:	89ab      	ldrh	r3, [r5, #12]
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d907      	bls.n	80079da <_fwalk_reent+0x3a>
 80079ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80079ce:	3301      	adds	r3, #1
 80079d0:	d003      	beq.n	80079da <_fwalk_reent+0x3a>
 80079d2:	4629      	mov	r1, r5
 80079d4:	4630      	mov	r0, r6
 80079d6:	47c0      	blx	r8
 80079d8:	4307      	orrs	r7, r0
 80079da:	3568      	adds	r5, #104	; 0x68
 80079dc:	e7e9      	b.n	80079b2 <_fwalk_reent+0x12>

080079de <__retarget_lock_init_recursive>:
 80079de:	4770      	bx	lr

080079e0 <__retarget_lock_acquire_recursive>:
 80079e0:	4770      	bx	lr

080079e2 <__retarget_lock_release_recursive>:
 80079e2:	4770      	bx	lr

080079e4 <__swhatbuf_r>:
 80079e4:	b570      	push	{r4, r5, r6, lr}
 80079e6:	460e      	mov	r6, r1
 80079e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ec:	2900      	cmp	r1, #0
 80079ee:	b096      	sub	sp, #88	; 0x58
 80079f0:	4614      	mov	r4, r2
 80079f2:	461d      	mov	r5, r3
 80079f4:	da08      	bge.n	8007a08 <__swhatbuf_r+0x24>
 80079f6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80079fa:	2200      	movs	r2, #0
 80079fc:	602a      	str	r2, [r5, #0]
 80079fe:	061a      	lsls	r2, r3, #24
 8007a00:	d410      	bmi.n	8007a24 <__swhatbuf_r+0x40>
 8007a02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a06:	e00e      	b.n	8007a26 <__swhatbuf_r+0x42>
 8007a08:	466a      	mov	r2, sp
 8007a0a:	f000 f903 	bl	8007c14 <_fstat_r>
 8007a0e:	2800      	cmp	r0, #0
 8007a10:	dbf1      	blt.n	80079f6 <__swhatbuf_r+0x12>
 8007a12:	9a01      	ldr	r2, [sp, #4]
 8007a14:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007a18:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007a1c:	425a      	negs	r2, r3
 8007a1e:	415a      	adcs	r2, r3
 8007a20:	602a      	str	r2, [r5, #0]
 8007a22:	e7ee      	b.n	8007a02 <__swhatbuf_r+0x1e>
 8007a24:	2340      	movs	r3, #64	; 0x40
 8007a26:	2000      	movs	r0, #0
 8007a28:	6023      	str	r3, [r4, #0]
 8007a2a:	b016      	add	sp, #88	; 0x58
 8007a2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007a30 <__smakebuf_r>:
 8007a30:	898b      	ldrh	r3, [r1, #12]
 8007a32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a34:	079d      	lsls	r5, r3, #30
 8007a36:	4606      	mov	r6, r0
 8007a38:	460c      	mov	r4, r1
 8007a3a:	d507      	bpl.n	8007a4c <__smakebuf_r+0x1c>
 8007a3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007a40:	6023      	str	r3, [r4, #0]
 8007a42:	6123      	str	r3, [r4, #16]
 8007a44:	2301      	movs	r3, #1
 8007a46:	6163      	str	r3, [r4, #20]
 8007a48:	b002      	add	sp, #8
 8007a4a:	bd70      	pop	{r4, r5, r6, pc}
 8007a4c:	ab01      	add	r3, sp, #4
 8007a4e:	466a      	mov	r2, sp
 8007a50:	f7ff ffc8 	bl	80079e4 <__swhatbuf_r>
 8007a54:	9900      	ldr	r1, [sp, #0]
 8007a56:	4605      	mov	r5, r0
 8007a58:	4630      	mov	r0, r6
 8007a5a:	f7ff f963 	bl	8006d24 <_malloc_r>
 8007a5e:	b948      	cbnz	r0, 8007a74 <__smakebuf_r+0x44>
 8007a60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a64:	059a      	lsls	r2, r3, #22
 8007a66:	d4ef      	bmi.n	8007a48 <__smakebuf_r+0x18>
 8007a68:	f023 0303 	bic.w	r3, r3, #3
 8007a6c:	f043 0302 	orr.w	r3, r3, #2
 8007a70:	81a3      	strh	r3, [r4, #12]
 8007a72:	e7e3      	b.n	8007a3c <__smakebuf_r+0xc>
 8007a74:	4b0d      	ldr	r3, [pc, #52]	; (8007aac <__smakebuf_r+0x7c>)
 8007a76:	62b3      	str	r3, [r6, #40]	; 0x28
 8007a78:	89a3      	ldrh	r3, [r4, #12]
 8007a7a:	6020      	str	r0, [r4, #0]
 8007a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a80:	81a3      	strh	r3, [r4, #12]
 8007a82:	9b00      	ldr	r3, [sp, #0]
 8007a84:	6163      	str	r3, [r4, #20]
 8007a86:	9b01      	ldr	r3, [sp, #4]
 8007a88:	6120      	str	r0, [r4, #16]
 8007a8a:	b15b      	cbz	r3, 8007aa4 <__smakebuf_r+0x74>
 8007a8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a90:	4630      	mov	r0, r6
 8007a92:	f000 f8d1 	bl	8007c38 <_isatty_r>
 8007a96:	b128      	cbz	r0, 8007aa4 <__smakebuf_r+0x74>
 8007a98:	89a3      	ldrh	r3, [r4, #12]
 8007a9a:	f023 0303 	bic.w	r3, r3, #3
 8007a9e:	f043 0301 	orr.w	r3, r3, #1
 8007aa2:	81a3      	strh	r3, [r4, #12]
 8007aa4:	89a0      	ldrh	r0, [r4, #12]
 8007aa6:	4305      	orrs	r5, r0
 8007aa8:	81a5      	strh	r5, [r4, #12]
 8007aaa:	e7cd      	b.n	8007a48 <__smakebuf_r+0x18>
 8007aac:	0800783d 	.word	0x0800783d

08007ab0 <_malloc_usable_size_r>:
 8007ab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ab4:	1f18      	subs	r0, r3, #4
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	bfbc      	itt	lt
 8007aba:	580b      	ldrlt	r3, [r1, r0]
 8007abc:	18c0      	addlt	r0, r0, r3
 8007abe:	4770      	bx	lr

08007ac0 <_raise_r>:
 8007ac0:	291f      	cmp	r1, #31
 8007ac2:	b538      	push	{r3, r4, r5, lr}
 8007ac4:	4604      	mov	r4, r0
 8007ac6:	460d      	mov	r5, r1
 8007ac8:	d904      	bls.n	8007ad4 <_raise_r+0x14>
 8007aca:	2316      	movs	r3, #22
 8007acc:	6003      	str	r3, [r0, #0]
 8007ace:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad2:	bd38      	pop	{r3, r4, r5, pc}
 8007ad4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007ad6:	b112      	cbz	r2, 8007ade <_raise_r+0x1e>
 8007ad8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007adc:	b94b      	cbnz	r3, 8007af2 <_raise_r+0x32>
 8007ade:	4620      	mov	r0, r4
 8007ae0:	f000 f830 	bl	8007b44 <_getpid_r>
 8007ae4:	462a      	mov	r2, r5
 8007ae6:	4601      	mov	r1, r0
 8007ae8:	4620      	mov	r0, r4
 8007aea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007aee:	f000 b817 	b.w	8007b20 <_kill_r>
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d00a      	beq.n	8007b0c <_raise_r+0x4c>
 8007af6:	1c59      	adds	r1, r3, #1
 8007af8:	d103      	bne.n	8007b02 <_raise_r+0x42>
 8007afa:	2316      	movs	r3, #22
 8007afc:	6003      	str	r3, [r0, #0]
 8007afe:	2001      	movs	r0, #1
 8007b00:	e7e7      	b.n	8007ad2 <_raise_r+0x12>
 8007b02:	2400      	movs	r4, #0
 8007b04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007b08:	4628      	mov	r0, r5
 8007b0a:	4798      	blx	r3
 8007b0c:	2000      	movs	r0, #0
 8007b0e:	e7e0      	b.n	8007ad2 <_raise_r+0x12>

08007b10 <raise>:
 8007b10:	4b02      	ldr	r3, [pc, #8]	; (8007b1c <raise+0xc>)
 8007b12:	4601      	mov	r1, r0
 8007b14:	6818      	ldr	r0, [r3, #0]
 8007b16:	f7ff bfd3 	b.w	8007ac0 <_raise_r>
 8007b1a:	bf00      	nop
 8007b1c:	20000010 	.word	0x20000010

08007b20 <_kill_r>:
 8007b20:	b538      	push	{r3, r4, r5, lr}
 8007b22:	4d07      	ldr	r5, [pc, #28]	; (8007b40 <_kill_r+0x20>)
 8007b24:	2300      	movs	r3, #0
 8007b26:	4604      	mov	r4, r0
 8007b28:	4608      	mov	r0, r1
 8007b2a:	4611      	mov	r1, r2
 8007b2c:	602b      	str	r3, [r5, #0]
 8007b2e:	f7fa f8a1 	bl	8001c74 <_kill>
 8007b32:	1c43      	adds	r3, r0, #1
 8007b34:	d102      	bne.n	8007b3c <_kill_r+0x1c>
 8007b36:	682b      	ldr	r3, [r5, #0]
 8007b38:	b103      	cbz	r3, 8007b3c <_kill_r+0x1c>
 8007b3a:	6023      	str	r3, [r4, #0]
 8007b3c:	bd38      	pop	{r3, r4, r5, pc}
 8007b3e:	bf00      	nop
 8007b40:	20000350 	.word	0x20000350

08007b44 <_getpid_r>:
 8007b44:	f7fa b88e 	b.w	8001c64 <_getpid>

08007b48 <__sread>:
 8007b48:	b510      	push	{r4, lr}
 8007b4a:	460c      	mov	r4, r1
 8007b4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b50:	f000 f894 	bl	8007c7c <_read_r>
 8007b54:	2800      	cmp	r0, #0
 8007b56:	bfab      	itete	ge
 8007b58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b5a:	89a3      	ldrhlt	r3, [r4, #12]
 8007b5c:	181b      	addge	r3, r3, r0
 8007b5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b62:	bfac      	ite	ge
 8007b64:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b66:	81a3      	strhlt	r3, [r4, #12]
 8007b68:	bd10      	pop	{r4, pc}

08007b6a <__swrite>:
 8007b6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b6e:	461f      	mov	r7, r3
 8007b70:	898b      	ldrh	r3, [r1, #12]
 8007b72:	05db      	lsls	r3, r3, #23
 8007b74:	4605      	mov	r5, r0
 8007b76:	460c      	mov	r4, r1
 8007b78:	4616      	mov	r6, r2
 8007b7a:	d505      	bpl.n	8007b88 <__swrite+0x1e>
 8007b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b80:	2302      	movs	r3, #2
 8007b82:	2200      	movs	r2, #0
 8007b84:	f000 f868 	bl	8007c58 <_lseek_r>
 8007b88:	89a3      	ldrh	r3, [r4, #12]
 8007b8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b92:	81a3      	strh	r3, [r4, #12]
 8007b94:	4632      	mov	r2, r6
 8007b96:	463b      	mov	r3, r7
 8007b98:	4628      	mov	r0, r5
 8007b9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b9e:	f000 b817 	b.w	8007bd0 <_write_r>

08007ba2 <__sseek>:
 8007ba2:	b510      	push	{r4, lr}
 8007ba4:	460c      	mov	r4, r1
 8007ba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007baa:	f000 f855 	bl	8007c58 <_lseek_r>
 8007bae:	1c43      	adds	r3, r0, #1
 8007bb0:	89a3      	ldrh	r3, [r4, #12]
 8007bb2:	bf15      	itete	ne
 8007bb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8007bb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007bba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007bbe:	81a3      	strheq	r3, [r4, #12]
 8007bc0:	bf18      	it	ne
 8007bc2:	81a3      	strhne	r3, [r4, #12]
 8007bc4:	bd10      	pop	{r4, pc}

08007bc6 <__sclose>:
 8007bc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bca:	f000 b813 	b.w	8007bf4 <_close_r>
	...

08007bd0 <_write_r>:
 8007bd0:	b538      	push	{r3, r4, r5, lr}
 8007bd2:	4d07      	ldr	r5, [pc, #28]	; (8007bf0 <_write_r+0x20>)
 8007bd4:	4604      	mov	r4, r0
 8007bd6:	4608      	mov	r0, r1
 8007bd8:	4611      	mov	r1, r2
 8007bda:	2200      	movs	r2, #0
 8007bdc:	602a      	str	r2, [r5, #0]
 8007bde:	461a      	mov	r2, r3
 8007be0:	f7fa f87f 	bl	8001ce2 <_write>
 8007be4:	1c43      	adds	r3, r0, #1
 8007be6:	d102      	bne.n	8007bee <_write_r+0x1e>
 8007be8:	682b      	ldr	r3, [r5, #0]
 8007bea:	b103      	cbz	r3, 8007bee <_write_r+0x1e>
 8007bec:	6023      	str	r3, [r4, #0]
 8007bee:	bd38      	pop	{r3, r4, r5, pc}
 8007bf0:	20000350 	.word	0x20000350

08007bf4 <_close_r>:
 8007bf4:	b538      	push	{r3, r4, r5, lr}
 8007bf6:	4d06      	ldr	r5, [pc, #24]	; (8007c10 <_close_r+0x1c>)
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	4604      	mov	r4, r0
 8007bfc:	4608      	mov	r0, r1
 8007bfe:	602b      	str	r3, [r5, #0]
 8007c00:	f7fa f88b 	bl	8001d1a <_close>
 8007c04:	1c43      	adds	r3, r0, #1
 8007c06:	d102      	bne.n	8007c0e <_close_r+0x1a>
 8007c08:	682b      	ldr	r3, [r5, #0]
 8007c0a:	b103      	cbz	r3, 8007c0e <_close_r+0x1a>
 8007c0c:	6023      	str	r3, [r4, #0]
 8007c0e:	bd38      	pop	{r3, r4, r5, pc}
 8007c10:	20000350 	.word	0x20000350

08007c14 <_fstat_r>:
 8007c14:	b538      	push	{r3, r4, r5, lr}
 8007c16:	4d07      	ldr	r5, [pc, #28]	; (8007c34 <_fstat_r+0x20>)
 8007c18:	2300      	movs	r3, #0
 8007c1a:	4604      	mov	r4, r0
 8007c1c:	4608      	mov	r0, r1
 8007c1e:	4611      	mov	r1, r2
 8007c20:	602b      	str	r3, [r5, #0]
 8007c22:	f7fa f886 	bl	8001d32 <_fstat>
 8007c26:	1c43      	adds	r3, r0, #1
 8007c28:	d102      	bne.n	8007c30 <_fstat_r+0x1c>
 8007c2a:	682b      	ldr	r3, [r5, #0]
 8007c2c:	b103      	cbz	r3, 8007c30 <_fstat_r+0x1c>
 8007c2e:	6023      	str	r3, [r4, #0]
 8007c30:	bd38      	pop	{r3, r4, r5, pc}
 8007c32:	bf00      	nop
 8007c34:	20000350 	.word	0x20000350

08007c38 <_isatty_r>:
 8007c38:	b538      	push	{r3, r4, r5, lr}
 8007c3a:	4d06      	ldr	r5, [pc, #24]	; (8007c54 <_isatty_r+0x1c>)
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	4604      	mov	r4, r0
 8007c40:	4608      	mov	r0, r1
 8007c42:	602b      	str	r3, [r5, #0]
 8007c44:	f7fa f885 	bl	8001d52 <_isatty>
 8007c48:	1c43      	adds	r3, r0, #1
 8007c4a:	d102      	bne.n	8007c52 <_isatty_r+0x1a>
 8007c4c:	682b      	ldr	r3, [r5, #0]
 8007c4e:	b103      	cbz	r3, 8007c52 <_isatty_r+0x1a>
 8007c50:	6023      	str	r3, [r4, #0]
 8007c52:	bd38      	pop	{r3, r4, r5, pc}
 8007c54:	20000350 	.word	0x20000350

08007c58 <_lseek_r>:
 8007c58:	b538      	push	{r3, r4, r5, lr}
 8007c5a:	4d07      	ldr	r5, [pc, #28]	; (8007c78 <_lseek_r+0x20>)
 8007c5c:	4604      	mov	r4, r0
 8007c5e:	4608      	mov	r0, r1
 8007c60:	4611      	mov	r1, r2
 8007c62:	2200      	movs	r2, #0
 8007c64:	602a      	str	r2, [r5, #0]
 8007c66:	461a      	mov	r2, r3
 8007c68:	f7fa f87e 	bl	8001d68 <_lseek>
 8007c6c:	1c43      	adds	r3, r0, #1
 8007c6e:	d102      	bne.n	8007c76 <_lseek_r+0x1e>
 8007c70:	682b      	ldr	r3, [r5, #0]
 8007c72:	b103      	cbz	r3, 8007c76 <_lseek_r+0x1e>
 8007c74:	6023      	str	r3, [r4, #0]
 8007c76:	bd38      	pop	{r3, r4, r5, pc}
 8007c78:	20000350 	.word	0x20000350

08007c7c <_read_r>:
 8007c7c:	b538      	push	{r3, r4, r5, lr}
 8007c7e:	4d07      	ldr	r5, [pc, #28]	; (8007c9c <_read_r+0x20>)
 8007c80:	4604      	mov	r4, r0
 8007c82:	4608      	mov	r0, r1
 8007c84:	4611      	mov	r1, r2
 8007c86:	2200      	movs	r2, #0
 8007c88:	602a      	str	r2, [r5, #0]
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	f7fa f80c 	bl	8001ca8 <_read>
 8007c90:	1c43      	adds	r3, r0, #1
 8007c92:	d102      	bne.n	8007c9a <_read_r+0x1e>
 8007c94:	682b      	ldr	r3, [r5, #0]
 8007c96:	b103      	cbz	r3, 8007c9a <_read_r+0x1e>
 8007c98:	6023      	str	r3, [r4, #0]
 8007c9a:	bd38      	pop	{r3, r4, r5, pc}
 8007c9c:	20000350 	.word	0x20000350

08007ca0 <_init>:
 8007ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ca2:	bf00      	nop
 8007ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ca6:	bc08      	pop	{r3}
 8007ca8:	469e      	mov	lr, r3
 8007caa:	4770      	bx	lr

08007cac <_fini>:
 8007cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cae:	bf00      	nop
 8007cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cb2:	bc08      	pop	{r3}
 8007cb4:	469e      	mov	lr, r3
 8007cb6:	4770      	bx	lr
